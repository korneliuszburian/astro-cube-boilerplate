---
/**
 * Fluid Simulation Showcase - Interactive FLIP Fluid Demo
 * Interactive fluid simulation with 3D logo obstacle
 */

import Layout from "../layouts/Layout.astro";
import GothicFrame from "../components/GothicFrame.astro";
import GothicButton from "../components/GothicButton.astro";

// Fluid simulation configurations
const fluidConfigs = [
  {
    id: 'water',
    name: 'SACRED WATER',
    description: 'Pure water simulation with standard physics',
    color: 'Ocean Blue',
    density: 1000.0,
    viscosity: 'low'
  },
  {
    id: 'blood',
    name: 'BLOOD RITUAL',
    description: 'Dense fluid simulation with enhanced viscosity',
    color: 'Crimson Red',
    density: 1060.0,
    viscosity: 'high'
  },
  {
    id: 'mercury',
    name: 'LIQUID MERCURY',
    description: 'Heavy metal fluid simulation',
    color: 'Silver Mercury',
    density: 13534.0,
    viscosity: 'medium'
  }
];

// Interaction modes
const interactionModes = [
  {
    id: 'touch',
    name: 'TOUCH INTERACTION',
    description: 'Direct touch/mouse interaction',
    icon: 'üëÜ'
  },
  {
    id: 'gravity',
    name: 'GRAVITY CONTROL',
    description: 'Device motion/tilt control',
    icon: 'üì±'
  },
  {
    id: 'auto',
    name: 'AUTOMATIC FLOW',
    description: 'Automatic obstacle movement',
    icon: 'üîÑ'
  }
];
---

<Layout title="Fluid Simulation - Gothic Sanctuary" description="Interactive FLIP fluid simulation showcase">
  <div class="fluid-simulation-showcase">
    <!-- Atmospheric Background -->
    <div class="fluid-simulation-showcase__background"></div>

    <!-- Header -->
    <header class="fluid-simulation-showcase__header">
      <GothicFrame variant="ornate" size="thick" background="none" class="header-frame">
        <div class="header-content">
          <h1 class="header-title">FLUID SIMULATION</h1>
          <p class="header-subtitle">Interactive sacred fluid dynamics with 3D logo obstacles</p>
          <div class="header-stats">
            <span class="stat">{fluidConfigs.length} Fluid Types</span>
            <span class="stat">{interactionModes.length} Interaction Modes</span>
            <span class="stat">Real-time Physics</span>
          </div>
        </div>
      </GothicFrame>
    </header>

    <!-- Controls -->
    <section class="fluid-simulation-showcase__controls">
      <GothicFrame variant="carved" size="medium" background="none" class="controls-frame">
        <div class="controls-content">
          <h2 class="controls-title">SIMULATION CONTROLS</h2>

          <!-- Fluid Type Selection -->
          <div class="control-section">
            <h3 class="control-label">Select Fluid Type:</h3>
            <div class="fluid-buttons">
              {fluidConfigs.map((fluid, index) => (
                <button
                  class={`fluid-btn ${index === 0 ? 'active' : ''}`}
                  data-fluid={fluid.id}
                  data-density={fluid.density}
                  data-viscosity={fluid.viscosity}
                >
                  <span class="fluid-btn__name">{fluid.name}</span>
                  <span class="fluid-btn__color" style={`color: var(--color-${fluid.id === 'water' ? 'accent-ocean' : fluid.id === 'blood' ? 'accent-blood' : 'metal-polished-silver'})`}>
                    {fluid.color}
                  </span>
                </button>
              ))}
            </div>
          </div>

          <!-- Interaction Mode Selection -->
          <div class="control-section">
            <h3 class="control-label">Select Interaction Mode:</h3>
            <div class="interaction-grid">
              {interactionModes.map((mode, index) => (
                <button
                  class={`interaction-btn ${index === 0 ? 'active' : ''}`}
                  data-mode={mode.id}
                >
                  <span class="interaction-btn__icon">{mode.icon}</span>
                  <span class="interaction-btn__name">{mode.name}</span>
                  <span class="interaction-btn__desc">{mode.description}</span>
                </button>
              ))}
            </div>
          </div>

          <!-- Simulation Parameters -->
          <div class="control-section">
            <h3 class="control-label">Simulation Parameters:</h3>
            <div class="parameter-controls">
              <div class="parameter-control">
                <label for="gravity">Gravity Strength:</label>
                <input type="range" id="gravity" min="-20" max="0" step="0.1" value="-9.81" />
                <span class="parameter-value" id="gravity-value">-9.8</span>
              </div>
              <div class="parameter-control">
                <label for="viscosity">Viscosity:</label>
                <input type="range" id="viscosity" min="0.1" max="5" step="0.1" value="1.0" />
                <span class="parameter-value" id="viscosity-value">1.0</span>
              </div>
              <div class="parameter-control">
                <label for="obstacle-size">Obstacle Size:</label>
                <input type="range" id="obstacle-size" min="0.1" max="0.8" step="0.01" value="0.3" />
                <span class="parameter-value" id="obstacle-size-value">0.30</span>
              </div>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="control-section">
            <div class="action-buttons">
              <button id="pause-btn" class="action-btn action-btn--pause">
                <span class="action-btn__text">PAUSE</span>
              </button>
              <button id="reset-btn" class="action-btn action-btn--reset">
                <span class="action-btn__text">RESET</span>
              </button>
              <button id="fullscreen-btn" class="action-btn action-btn--fullscreen">
                <span class="action-btn__text">FULLSCREEN</span>
              </button>
            </div>
          </div>
        </div>
      </GothicFrame>
    </section>

    <!-- Main Simulation Display -->
    <main class="fluid-simulation-showcase__main">
      <GothicFrame variant="heavy" size="medium" background="none" class="simulation-frame">
        <div class="simulation-display">
          <!-- Fluid Simulation Container -->
          <div class="fluid__simulation-container" id="fluid-container">
            <canvas id="canvas"></canvas>
            <div class="render" id="render"></div>

            <!-- 3D Logo Overlay -->
            <div class="logo-3d-container" id="logo-3d-container">
              <div class="logo-3d-loader">
                <div class="loading-spinner"></div>
                <p class="loading-text">Loading 3D Logo...</p>
              </div>
            </div>
          </div>

          <!-- Simulation Information -->
          <div class="simulation-info">
            <h3 class="simulation-info__title" id="current-fluid-name">SACRED WATER</h3>
            <p class="simulation-info__description" id="current-fluid-desc">
              Pure water simulation with standard physics
            </p>
            <div class="simulation-info__stats">
              <div class="stat-item">
                <span class="stat-label">Particles:</span>
                <span class="stat-value" id="particle-count">--</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">FPS:</span>
                <span class="stat-value" id="fps-counter">--</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Mode:</span>
                <span class="stat-value" id="current-mode">Touch</span>
              </div>
            </div>
          </div>
        </div>
      </GothicFrame>
    </main>

    <!-- Instructions -->
    <section class="fluid-simulation-showcase__instructions">
      <GothicFrame variant="runic" size="medium" background="none" class="instructions-frame">
        <div class="instructions-content">
          <h2 class="instructions-title">SACRED INSTRUCTIONS</h2>

          <div class="instruction-grid">
            <div class="instruction-item">
              <h4 class="instruction-item__title">üñ±Ô∏è Mouse Control</h4>
              <p class="instruction-item__desc">Click and drag to create obstacles and manipulate fluid flow</p>
            </div>
            <div class="instruction-item">
              <h4 class="instruction-item__title">üì± Touch Control</h4>
              <p class="instruction-item__desc">Touch and drag on mobile devices to interact with fluid</p>
            </div>
            <div class="instruction-item">
              <h4 class="instruction-item__title">üì± Device Motion</h4>
              <p class="instruction-item__desc">Tilt your device to control gravity direction</p>
            </div>
            <div class="instruction-item">
              <h4 class="instruction-item__title">‚å®Ô∏è Keyboard</h4>
              <p class="instruction-item__desc">Press 'P' to pause, 'M' for single frame step</p>
            </div>
          </div>
        </div>
      </GothicFrame>
    </section>

    <!-- Navigation -->
    <nav class="fluid-simulation-showcase__nav">
      <GothicFrame variant="simple" size="thin" background="none" class="nav-frame">
        <div class="nav-content">
          <GothicButton variant="button3" size="medium" href="/hero-effects">
            ‚Üê HERO EFFECTS
          </GothicButton>
          <GothicButton variant="button2" size="medium" href="/">
            MAIN MENU
          </GothicButton>
          <GothicButton variant="button4" size="medium" href="/design-system">
            DESIGN SYSTEM
          </GothicButton>
        </div>
      </GothicFrame>
    </nav>

  </div>

  <!-- Import Three.js for 3D logo -->
  <script type="module" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script type="module" src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
  <script type="module" src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

  <!-- Import the fluid simulation -->
  <script type="module" src="/src/scripts/fluid-simulation.js"></script>

  <!-- 3D Logo Integration Script -->
  <script type="module">
    import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js';
    import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js';

    let logoScene, logoCamera, logoRenderer, logoModel;
    const logoContainer = document.getElementById('logo-3d-container');

    function init3DLogo() {
      // Scene setup
      logoScene = new THREE.Scene();

      // Camera setup
      const containerWidth = logoContainer.clientWidth;
      const containerHeight = logoContainer.clientHeight;
      logoCamera = new THREE.PerspectiveCamera(75, containerWidth / containerHeight, 0.1, 1000);
      logoCamera.position.z = 5;

      // Renderer setup
      logoRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
      logoRenderer.setSize(containerWidth, containerHeight);
      logoRenderer.setClearColor(0x000000, 0);
      logoContainer.appendChild(logoRenderer.domElement);

      // Lighting
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      logoScene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(1, 1, 1);
      logoScene.add(directionalLight);

      // Load 3D logo
      const loader = new GLTFLoader();
      loader.load(
        '/logo-3d.glb',
        (gltf) => {
          logoModel = gltf.scene;

          // Scale and position the logo
          const box = new THREE.Box3().setFromObject(logoModel);
          const size = box.getSize(new THREE.Vector3());
          const maxDim = Math.max(size.x, size.y, size.z);
          const scale = 2 / maxDim;
          logoModel.scale.multiplyScalar(scale);

          // Center the model
          const center = box.getCenter(new THREE.Vector3());
          logoModel.position.sub(center.multiplyScalar(scale));

          logoScene.add(logoModel);

          // Hide loading indicator
          document.querySelector('.logo-3d-loader').style.display = 'none';
        },
        (progress) => {
          console.log('Loading progress:', (progress.loaded / progress.total * 100) + '%');
        },
        (error) => {
          console.error('Error loading 3D logo:', error);
          document.querySelector('.logo-3d-loader').innerHTML = '<p class="error-text">Failed to load 3D logo</p>';
        }
      );

      // Animation loop
      function animateLogo() {
        requestAnimationFrame(animateLogo);

        if (logoModel) {
          logoModel.rotation.y += 0.01;
        }

        logoRenderer.render(logoScene, logoCamera);
      }

      animateLogo();
    }

    // Initialize 3D logo when page loads
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(init3DLogo, 1000);
    });

    // Handle window resize
    window.addEventListener('resize', () => {
      if (logoCamera && logoRenderer) {
        const containerWidth = logoContainer.clientWidth;
        const containerHeight = logoContainer.clientHeight;

        logoCamera.aspect = containerWidth / containerHeight;
        logoCamera.updateProjectionMatrix();
        logoRenderer.setSize(containerWidth, containerHeight);
      }
    });
  </script>

  <script>
    // Fluid simulation control script
    document.addEventListener('DOMContentLoaded', () => {
      // Fluid configurations data
      const fluidConfigs = {
        water: { name: 'SACRED WATER', desc: 'Pure water simulation with standard physics', density: 1000.0 },
        blood: { name: 'BLOOD RITUAL', desc: 'Dense fluid simulation with enhanced viscosity', density: 1060.0 },
        mercury: { name: 'LIQUID MERCURY', desc: 'Heavy metal fluid simulation', density: 13534.0 }
      };

      const interactionModes = {
        touch: 'Touch',
        gravity: 'Gravity',
        auto: 'Auto'
      };

      // Update fluid information when fluid type changes
      function updateFluidInfo(fluidId) {
        const info = fluidConfigs[fluidId];
        if (info) {
          document.getElementById('current-fluid-name').textContent = info.name;
          document.getElementById('current-fluid-desc').textContent = info.desc;
        }
      }

      // Update interaction mode display
      function updateInteractionMode(modeId) {
        const modeName = interactionModes[modeId];
        if (modeName) {
          document.getElementById('current-mode').textContent = modeName;
        }
      }

      // Fluid button listeners
      const fluidButtons = document.querySelectorAll('[data-fluid]');
      fluidButtons.forEach(button => {
        button.addEventListener('click', () => {
          const fluidId = button.getAttribute('data-fluid');
          const density = parseFloat(button.getAttribute('data-density'));
          const viscosity = button.getAttribute('data-viscosity');

          updateFluidInfo(fluidId);

          // Update fluid simulation if available
          if (window.fluidSimulation) {
            window.fluidSimulation.setFluidType(fluidId);
          }

          // Remove active class from all buttons
          fluidButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');
        });
      });

      // Interaction mode button listeners
      const interactionButtons = document.querySelectorAll('[data-mode]');
      interactionButtons.forEach(button => {
        button.addEventListener('click', () => {
          const modeId = button.getAttribute('data-mode');
          updateInteractionMode(modeId);

          // Update fluid simulation interaction mode
          if (window.fluidSimulation) {
            window.fluidSimulation.setInteractionMode(modeId);
          }

          // Remove active class from all buttons
          interactionButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');
        });
      });

      // Parameter controls
      const gravitySlider = document.getElementById('gravity');
      const viscositySlider = document.getElementById('viscosity');
      const obstacleSizeSlider = document.getElementById('obstacle-size');

      if (gravitySlider) {
        const gravityValue = document.getElementById('gravity-value');
        gravitySlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(1);
          gravityValue.textContent = value;

          // Update gravity in simulation
          if (window.fluidSimulation && window.fluidSimulation.scene) {
            window.fluidSimulation.scene.gravity = parseFloat(value);
          }
        });
      }

      if (viscositySlider) {
        const viscosityValue = document.getElementById('viscosity-value');
        viscositySlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(1);
          viscosityValue.textContent = value;
          // Viscosity updates would need to be implemented in the fluid simulation
        });
      }

      if (obstacleSizeSlider) {
        const obstacleSizeValue = document.getElementById('obstacle-size-value');
        obstacleSizeSlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(2);
          obstacleSizeValue.textContent = value;

          // Update obstacle size in simulation
          if (window.fluidSimulation && window.fluidSimulation.scene) {
            window.fluidSimulation.scene.obstacleRadius = parseFloat(value);
          }
        });
      }

      // Action buttons
      const pauseBtn = document.getElementById('pause-btn');
      const resetBtn = document.getElementById('reset-btn');
      const fullscreenBtn = document.getElementById('fullscreen-btn');

      if (pauseBtn) {
        pauseBtn.addEventListener('click', () => {
          if (window.fluidSimulation) {
            if (window.fluidSimulation.scene.paused) {
              window.fluidSimulation.resume();
              pauseBtn.querySelector('.action-btn__text').textContent = 'PAUSE';
            } else {
              window.fluidSimulation.pause();
              pauseBtn.querySelector('.action-btn__text').textContent = 'RESUME';
            }
          }
        });
      }

      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          if (window.fluidSimulation) {
            window.fluidSimulation.reset();
          }
        });
      }

      if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', () => {
          const elem = document.documentElement;
          if (elem.requestFullscreen) {
            elem.requestFullscreen();
          } else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
          } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
          }
        });
      }

      // Simple FPS counter
      let frameCount = 0;
      let lastTime = performance.now();

      function updateFPS() {
        frameCount++;
        const currentTime = performance.now();
        const elapsed = currentTime - lastTime;

        if (elapsed >= 1000) {
          const fps = Math.round((frameCount * 1000) / elapsed);
          document.getElementById('fps-counter').textContent = fps;
          frameCount = 0;
          lastTime = currentTime;
        }

        requestAnimationFrame(updateFPS);
      }

      updateFPS();

      // Update particle count if available
      function updateParticleCount() {
        if (window.fluidSimulation && window.fluidSimulation.scene && window.fluidSimulation.scene.fluid) {
          document.getElementById('particle-count').textContent = window.fluidSimulation.scene.fluid.numParticles || '--';
        }
        setTimeout(updateParticleCount, 1000);
      }

      updateParticleCount();
    });
  </script>
</Layout>

<style>
  .fluid-simulation-showcase {
    min-height: 100vh;
    position: relative;
    overflow-x: hidden;
  }

  /* Background */
  .fluid-simulation-showcase__background {
    background-image: url("/assets/videos/testing-video-poster-01.png");
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    z-index: -2;
    filter: brightness(0.4) contrast(1.1) saturate(0.7);
  }

  /* Header */
  .fluid-simulation-showcase__header {
    padding: 2rem 1rem;
    text-align: center;
  }

  .header-frame {
    max-width: 900px;
    margin: 0 auto;
  }

  .header-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.9);
    backdrop-filter: blur(4px);
  }

  .header-title {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-shadow:
      2px 2px 0 var(--color-shadow-deep),
      0 0 20px var(--glow-divine);
    letter-spacing: 0.2em;
    margin: 0 0 1rem 0;
    text-transform: uppercase;
  }

  .header-subtitle {
    font-size: 1.1rem;
    color: var(--color-metal-polished-brass);
    margin: 0 0 1.5rem 0;
    font-style: italic;
    line-height: 1.4;
  }

  .header-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .stat {
    color: var(--color-metal-antique-gold);
    font-weight: bold;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  /* Controls */
  .fluid-simulation-showcase__controls {
    padding: 0 1rem 2rem;
  }

  .controls-frame {
    max-width: 1200px;
    margin: 0 auto;
  }

  .controls-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
  }

  .controls-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 2px;
    margin: 0 0 2rem 0;
    text-align: center;
    text-shadow: 0 0 15px var(--glow-aura);
  }

  .control-section {
    margin-bottom: 2rem;
  }

  .control-section:last-child {
    margin-bottom: 0;
  }

  .control-label {
    font-size: 1.2rem;
    color: var(--color-metal-polished-brass);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 1rem 0;
    display: block;
  }

  /* Fluid Buttons */
  .fluid-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .fluid-btn {
    background: linear-gradient(145deg, var(--color-base-crypt), var(--color-base-charcoal));
    border: 2px solid var(--color-metal-bronze-patina);
    border-radius: 8px;
    padding: 1rem 1.5rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    min-width: 150px;
  }

  .fluid-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sanctuary);
  }

  .fluid-btn.active {
    background: linear-gradient(145deg, var(--color-metal-antique-gold), var(--color-metal-bronze-patina));
    border-color: var(--color-highlight-ivory);
    box-shadow: var(--glow-aura);
  }

  .fluid-btn__name {
    font-size: 1rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .fluid-btn__color {
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Interaction Grid */
  .interaction-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .interaction-btn {
    background: rgba(26, 26, 26, 0.6);
    border: 1px solid var(--color-metal-bronze-patina);
    border-radius: 6px;
    padding: 1rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    text-align: center;
  }

  .interaction-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-crypt);
  }

  .interaction-btn.active {
    background: rgba(212, 175, 55, 0.1);
    border-color: var(--color-metal-antique-gold);
    box-shadow: 0 0 15px rgba(212, 175, 55, 0.3);
  }

  .interaction-btn__icon {
    font-size: 2rem;
  }

  .interaction-btn__name {
    font-size: 0.9rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .interaction-btn__desc {
    font-size: 0.75rem;
    color: var(--color-metal-polished-brass);
    font-style: italic;
  }

  /* Parameter Controls */
  .parameter-controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .parameter-control {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .parameter-control label {
    color: var(--color-metal-polished-brass);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 0.9rem;
  }

  .parameter-control input[type="range"] {
    width: 100%;
    height: 6px;
    background: var(--color-base-crypt);
    border-radius: 3px;
    outline: none;
    -webkit-appearance: none;
  }

  .parameter-control input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: var(--color-metal-antique-gold);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: var(--shadow-crypt);
  }

  .parameter-control input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: var(--color-metal-antique-gold);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: var(--shadow-crypt);
    border: none;
  }

  .parameter-value {
    color: var(--color-highlight-ivory);
    font-weight: bold;
    text-align: center;
    font-family: monospace;
  }

  /* Action Buttons */
  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .action-btn {
    background: linear-gradient(145deg, var(--color-base-crypt), var(--color-base-charcoal));
    border: 2px solid var(--color-metal-bronze-patina);
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    color: var(--color-highlight-ivory);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .action-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sanctuary);
  }

  .action-btn--pause {
    border-color: var(--color-accent-fire);
  }

  .action-btn--reset {
    border-color: var(--color-accent-blood);
  }

  .action-btn--fullscreen {
    border-color: var(--color-highlight-brass);
  }

  /* Main Simulation Display */
  .fluid-simulation-showcase__main {
    padding: 0 1rem 2rem;
  }

  .simulation-frame {
    max-width: 1200px;
    margin: 0 auto;
  }

  .simulation-display {
    min-height: 600px;
    display: flex;
    flex-direction: column;
  }

  .fluid__simulation-container {
    flex: 1;
    position: relative;
    background: var(--color-base-void);
    border-radius: 8px;
    overflow: hidden;
    min-height: 500px;
  }

  #canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .render {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
    font-family: "Geist Mono", monospace;
    white-space: pre;
    letter-spacing: 0.4em;
    color: var(--color-highlight-ivory);
  }

  .logo-3d-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 200px;
    height: 200px;
    z-index: 3;
    pointer-events: none;
  }

  .logo-3d-loader {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: var(--color-metal-polished-brass);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--color-metal-bronze-patina);
    border-top: 3px solid var(--color-metal-antique-gold);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  .loading-text {
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .error-text {
    color: var(--color-accent-blood);
    font-size: 0.8rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Simulation Information */
  .simulation-info {
    padding: 1.5rem;
    background: rgba(26, 26, 26, 0.8);
    border-top: 1px solid var(--color-metal-bronze-patina);
  }

  .simulation-info__title {
    font-size: 1.3rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 0.5rem 0;
  }

  .simulation-info__description {
    font-size: 1rem;
    color: var(--color-metal-polished-brass);
    margin: 0 0 1rem 0;
    font-style: italic;
  }

  .simulation-info__stats {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .stat-item {
    text-align: center;
  }

  .stat-label {
    display: block;
    font-size: 0.8rem;
    color: var(--color-metal-polished-brass);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.25rem;
  }

  .stat-value {
    font-size: 1.2rem;
    color: var(--color-highlight-ivory);
    font-weight: bold;
    font-family: monospace;
  }

  /* Instructions */
  .fluid-simulation-showcase__instructions {
    padding: 0 1rem 2rem;
  }

  .instructions-frame {
    max-width: 1000px;
    margin: 0 auto;
  }

  .instructions-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
  }

  .instructions-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 2px;
    margin: 0 0 2rem 0;
    text-align: center;
    text-shadow: 0 0 15px var(--glow-aura);
  }

  .instruction-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
  }

  .instruction-item {
    text-align: center;
    padding: 1rem;
    background: var(--color-base-crypt);
    border: 1px solid var(--color-metal-bronze-patina);
    border-radius: 6px;
  }

  .instruction-item__title {
    font-size: 1rem;
    color: var(--color-metal-polished-brass);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 0.5rem 0;
  }

  .instruction-item__desc {
    font-size: 0.85rem;
    color: var(--color-highlight-ivory);
    line-height: 1.4;
  }

  /* Navigation */
  .fluid-simulation-showcase__nav {
    padding: 0 1rem 2rem;
  }

  .nav-frame {
    max-width: 800px;
    margin: 0 auto;
  }

  .nav-content {
    padding: 1.5rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .fluid-simulation-showcase__header,
    .fluid-simulation-showcase__controls,
    .fluid-simulation-showcase__main,
    .fluid-simulation-showcase__instructions,
    .fluid-simulation-showcase__nav {
      padding: 1rem 0.5rem;
    }

    .controls-content,
    .instructions-content,
    .nav-content {
      padding: 1.5rem 1rem;
    }

    .fluid-buttons {
      flex-direction: column;
      align-items: center;
    }

    .fluid-btn {
      width: 100%;
      max-width: 300px;
    }

    .interaction-grid {
      grid-template-columns: 1fr;
    }

    .parameter-controls {
      grid-template-columns: 1fr;
    }

    .instruction-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }

    .action-buttons {
      flex-direction: column;
      align-items: stretch;
    }

    .logo-3d-container {
      width: 150px;
      height: 150px;
    }
  }

  @media (max-width: 480px) {
    .header-title {
      font-size: 1.8rem;
    }

    .controls-title,
    .instructions-title {
      font-size: 1.4rem;
    }

    .fluid-btn__name {
      font-size: 0.9rem;
    }

    .logo-3d-container {
      width: 120px;
      height: 120px;
    }
  }

  /* High contrast and reduced motion */
  @media (prefers-contrast: high) {
    .header-title { text-shadow: none; }
    .controls-title { text-shadow: none; }
    .instructions-title { text-shadow: none; }
  }

  @media (prefers-reduced-motion: reduce) {
    .loading-spinner { animation: none; }

    * {
      transition: none !important;
      animation: none !important;
    }
  }
</style>