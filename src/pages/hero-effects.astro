---
/**
 * Hero Effects Showcase - Complete WebGL Effects Gallery
 * Interactive demonstration of all hero effects with different image sets
 */

import Layout from "../layouts/Layout.astro";
import GothicFrame from "../components/GothicFrame.astro";
import GothicButton from "../components/GothicButton.astro";

// Hero effect configurations
const heroEffects = [
  {
    id: 'effect1',
    name: 'CELLULAR NOISE',
    description: 'Red cellular pattern with depth-based distortion and scanning',
    color: 'Crimson Red',
    features: ['Cellular noise generation', 'Depth distortion', 'Red highlight detection', 'Scanning animation']
  },
  {
    id: 'effect2',
    name: 'EDGE DETECTION',
    description: 'Edge-based masking with depth scanning and mouse interaction',
    color: 'Bronze Gold',
    features: ['Edge map processing', 'Depth masking', 'Mouse distortion', 'Flow animation']
  },
  {
    id: 'effect3',
    name: 'CROSS GRID',
    description: 'Cross-pattern grid with inverted depth scanning',
    color: 'Mystic Blue',
    features: ['Cross SDF patterns', 'Grid generation', 'Inverted depth', 'Rhythmic scanning']
  }
];

// Picture set configurations
const pictureSets = [
  {
    id: 'pictures_1',
    name: 'ANCIENT RUINS',
    description: 'Mystical ruins with sacred geometry',
    thumbnail: '/assets/hero/pictures_1/raw-1.png'
  },
  {
    id: 'pictures_2',
    name: 'DARK FOREST',
    description: 'Shadowy woodland with hidden paths',
    thumbnail: '/assets/hero/pictures_2/raw-1.png'
  },
  {
    id: 'pictures_3',
    name: 'GOTHIC CATHEDRAL',
    description: 'Ancient sanctuary architecture',
    thumbnail: '/assets/hero/pictures_3/raw-1.png'
  },
  {
    id: 'pictures_4',
    name: 'MOUNTAIN PEAKS',
    description: 'Majestic peaks with mystical energy',
    thumbnail: '/assets/hero/pictures_4/raw-1.png'
  },
  {
    id: 'pictures_5',
    name: 'MYSTIC PORTAL',
    description: 'Gateway to other dimensions',
    thumbnail: '/assets/hero/pictures_5/raw-1.png'
  }
];
---

<Layout title="Hero Effects - Gothic Sanctuary" description="Interactive showcase of WebGL hero effects">
  <div class="hero-effects-showcase">
    <!-- Atmospheric Background -->
    <div class="hero-effects-showcase__background"></div>

    <!-- Header -->
    <header class="hero-effects-showcase__header">
      <GothicFrame variant="ornate" size="thick" background="none" class="header-frame">
        <div class="header-content">
          <h1 class="header-title">WEBGL HERO EFFECTS</h1>
          <p class="header-subtitle">Interactive demonstrations of sacred visual technologies</p>
          <div class="header-stats">
            <span class="stat">{heroEffects.length} Effects</span>
            <span class="stat">{pictureSets.length} Picture Sets</span>
            <span class="stat">Real-time WebGL</span>
          </div>
        </div>
      </GothicFrame>
    </header>

    <!-- Controls -->
    <section class="hero-effects-showcase__controls">
      <GothicFrame variant="carved" size="medium" background="none" class="controls-frame">
        <div class="controls-content">
          <h2 class="controls-title">EFFECT CONTROLS</h2>

          <!-- Effect Selection -->
          <div class="control-section">
            <h3 class="control-label">Select Effect:</h3>
            <div class="effect-buttons">
              {heroEffects.map((effect, index) => (
                <button
                  class={`effect-btn ${index === 0 ? 'active' : ''}`}
                  data-effect={effect.id}
                >
                  <span class="effect-btn__name">{effect.name}</span>
                  <span class="effect-btn__color" style={`color: var(--color-${effect.id === 'effect1' ? 'accent-blood' : effect.id === 'effect2' ? 'metal-antique-gold' : 'metal-polished-brass'})`}>
                    {effect.color}
                  </span>
                </button>
              ))}
            </div>
          </div>

          <!-- Picture Set Selection -->
          <div class="control-section">
            <h3 class="control-label">Select Scene:</h3>
            <div class="picture-set-grid">
              {pictureSets.map((set, index) => (
                <button
                  class={`picture-set-btn ${index === 0 ? 'active' : ''}`}
                  data-set={set.id}
                >
                  <img src={set.thumbnail} alt={set.name} class="picture-set-btn__thumb" />
                  <span class="picture-set-btn__name">{set.name}</span>
                </button>
              ))}
            </div>
          </div>

          <!-- Image Selection within Scene -->
          <div class="control-section">
            <h3 class="control-label">Select Image in Scene:</h3>
            <div class="image-selection-grid">
              <button
                class={`image-btn active`}
                data-image="raw1"
              >
                <span class="image-btn__name">IMAGE I</span>
                <span class="image-btn__desc">Primary view</span>
              </button>
              <button
                class={`image-btn`}
                data-image="raw2"
              >
                <span class="image-btn__name">IMAGE II</span>
                <span class="image-btn__desc">Secondary view</span>
              </button>
              <button
                class={`image-btn`}
                data-image="raw3"
              >
                <span class="image-btn__name">IMAGE III</span>
                <span class="image-btn__desc">Tertiary view</span>
              </button>
            </div>
          </div>

          <!-- Advanced Controls -->
          <div class="control-section">
            <h3 class="control-label">Effect Parameters:</h3>
            <div class="parameter-controls">
              <div class="parameter-control">
                <label for="intensity">Intensity:</label>
                <input type="range" id="intensity" min="0.5" max="5" step="0.1" value="2" />
                <span class="parameter-value" id="intensity-value">2.0</span>
              </div>
              <div class="parameter-control">
                <label for="brightness">Brightness:</label>
                <input type="range" id="brightness" min="0.5" max="4" step="0.1" value="1.5" />
                <span class="parameter-value" id="brightness-value">1.5</span>
              </div>
              <div class="parameter-control">
                <label for="scan-speed">Scan Speed:</label>
                <input type="range" id="scan-speed" min="0.5" max="5" step="0.1" value="3" />
                <span class="parameter-value" id="scan-speed-value">3.0</span>
              </div>
            </div>
          </div>
        </div>
      </GothicFrame>
    </section>

    <!-- Main Hero Display -->
    <main class="hero-effects-showcase__main">
      <GothicFrame variant="heavy" size="medium" background="none" class="hero-frame">
        <div class="hero-display">
          <!-- Hero Effect Container -->
          <div class="hero__image-container" data-hero-variant="main">
            <!-- The hero effect will be rendered here -->
            <div class="hero-loading">
              <div class="loading-spinner"></div>
              <p class="loading-text">Initializing WebGL Effects...</p>
            </div>
          </div>
        </div>
      </GothicFrame>
    </main>

    <nav class="hero-effects-showcase__nav">
      <GothicFrame variant="simple" size="thin" background="none" class="nav-frame">
        <div class="nav-content">
          <GothicButton variant="button3" size="medium" href="/design-system">
            ‚Üê DESIGN SYSTEM
          </GothicButton>
          <GothicButton variant="button2" size="medium" href="/">
            MAIN MENU
          </GothicButton>
          <GothicButton variant="button4" size="medium" href="/shop">
            VISIT SHOP
          </GothicButton>
        </div>
      </GothicFrame>
    </nav>

  </div>

  <!-- Import the hero effects manager -->
  <script type="module">
    import {
      initializeHeroEffects,
      switchEffect,
      switchAssetSet,
      switchImage,
      updateIntensity,
      updateBrightness,
      updateScanSpeed
    } from '/src/scripts/hero-effects-manager.js';

    // Make functions globally available for onclick handlers
    window.switchEffect = switchEffect;
    window.switchAssetSet = switchAssetSet;
    window.switchImage = switchImage;
    window.updateIntensity = updateIntensity;
    window.updateBrightness = updateBrightness;
    window.updateScanSpeed = updateScanSpeed;

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize hero effects
      initializeHeroEffects();

      // Enhanced controls for hero effects
      // Effect descriptions data
      const effectDescriptions = {
        effect1: {
          name: 'CELLULAR NOISE',
          description: 'Red cellular pattern with depth-based distortion and scanning',
          features: ['Cellular noise generation', 'Depth distortion', 'Red highlight detection', 'Scanning animation']
        },
        effect2: {
          name: 'EDGE DETECTION',
          description: 'Edge-based masking with depth scanning and mouse interaction',
          features: ['Edge map processing', 'Depth masking', 'Mouse distortion', 'Flow animation']
        },
        effect3: {
          name: 'CROSS GRID',
          description: 'Cross-pattern grid with inverted depth scanning',
          features: ['Cross SDF patterns', 'Grid generation', 'Inverted depth', 'Rhythmic scanning']
        }
      };

      // Update effect information when effect changes
      function updateEffectInfo(effectId) {
        const info = effectDescriptions[effectId];
        if (info) {
          document.getElementById('current-effect-name').textContent = info.name;
          document.getElementById('current-effect-desc').textContent = info.description;

          const featuresContainer = document.getElementById('current-effect-features');
          featuresContainer.innerHTML = info.features.map(feature =>
            `<span class="feature-tag">${feature}</span>`
          ).join('');
        }
      }

      // Enhanced effect button listeners
      const effectButtons = document.querySelectorAll('[data-effect]');
      effectButtons.forEach(button => {
        button.addEventListener('click', () => {
          const effectId = button.getAttribute('data-effect');
          updateEffectInfo(effectId);
          switchEffect(effectId);

          // Remove active class from all buttons
          effectButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');
        });
      });

      // Picture set button listeners
      const pictureSetButtons = document.querySelectorAll('[data-set]');
      pictureSetButtons.forEach(button => {
        button.addEventListener('click', () => {
          const setId = button.getAttribute('data-set');
          switchAssetSet(setId);

          // Remove active class from all buttons
          pictureSetButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');
        });
      });

      // Image selection button listeners
      const imageButtons = document.querySelectorAll('[data-image]');
      imageButtons.forEach(button => {
        button.addEventListener('click', () => {
          const imageName = button.getAttribute('data-image');
          switchImage(imageName);

          // Remove active class from all buttons
          imageButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');
        });
      });

      // Parameter controls
      const intensitySlider = document.getElementById('intensity');
      const brightnessSlider = document.getElementById('brightness');
      const scanSpeedSlider = document.getElementById('scan-speed');

      if (intensitySlider) {
        const intensityValue = document.getElementById('intensity-value');
        intensitySlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(1);
          intensityValue.textContent = value;
          // Update effect parameters using the manager function
          if (window.updateIntensity) {
            window.updateIntensity(value);
          }
        });
      }

      if (brightnessSlider) {
        const brightnessValue = document.getElementById('brightness-value');
        brightnessSlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(1);
          brightnessValue.textContent = value;
          // Update effect parameters using the manager function
          if (window.updateBrightness) {
            window.updateBrightness(value);
          }
        });
      }

      if (scanSpeedSlider) {
        const scanSpeedValue = document.getElementById('scan-speed-value');
        scanSpeedSlider.addEventListener('input', (e) => {
          const value = parseFloat(e.target.value).toFixed(1);
          scanSpeedValue.textContent = value;
          // Update effect parameters using the manager function
          if (window.updateScanSpeed) {
            window.updateScanSpeed(value);
          }
        });
      }

      // Simple FPS counter
      let frameCount = 0;
      let lastTime = performance.now();

      function updateFPS() {
        frameCount++;
        const currentTime = performance.now();
        const elapsed = currentTime - lastTime;

        if (elapsed >= 1000) {
          const fps = Math.round((frameCount * 1000) / elapsed);
          document.getElementById('fps-counter').textContent = fps;
          frameCount = 0;
          lastTime = currentTime;
        }

        requestAnimationFrame(updateFPS);
      }

      updateFPS();

      // Hide loading when hero effects initialize
      setTimeout(() => {
        const loadingElement = document.querySelector('.hero-loading');
        if (loadingElement) {
          loadingElement.style.display = 'none';
        }
      }, 2000);
    });
  </script>
</Layout>

<style>
  .hero-effects-showcase {
    min-height: 100vh;
    position: relative;
    overflow-x: hidden;
  }

  /* Background */
  .hero-effects-showcase__background {
    background-image: url("/assets/videos/testing-video-poster-01.png");
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    z-index: -2;
    filter: brightness(0.5) contrast(1.2) saturate(0.8);
  }

  /* Header */
  .hero-effects-showcase__header {
    padding: 2rem 1rem;
    text-align: center;
  }

  .header-frame {
    max-width: 900px;
    margin: 0 auto;
  }

  .header-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.9);
    backdrop-filter: blur(4px);
  }

  .header-title {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-shadow:
      2px 2px 0 var(--color-shadow-deep),
      0 0 20px var(--glow-divine);
    letter-spacing: 0.2em;
    margin: 0 0 1rem 0;
    text-transform: uppercase;
  }

  .header-subtitle {
    font-size: 1.1rem;
    color: var(--color-metal-polished-brass);
    margin: 0 0 1.5rem 0;
    font-style: italic;
    line-height: 1.4;
  }

  .header-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .stat {
    color: var(--color-metal-antique-gold);
    font-weight: bold;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  /* Controls */
  .hero-effects-showcase__controls {
    padding: 0 1rem 2rem;
  }

  .controls-frame {
    max-width: 1200px;
    margin: 0 auto;
  }

  .controls-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
  }

  .controls-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 2px;
    margin: 0 0 2rem 0;
    text-align: center;
    text-shadow: 0 0 15px var(--glow-aura);
  }

  .control-section {
    margin-bottom: 2rem;
  }

  .control-section:last-child {
    margin-bottom: 0;
  }

  .control-label {
    font-size: 1.2rem;
    color: var(--color-metal-polished-brass);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 1rem 0;
    display: block;
  }

  /* Effect Buttons */
  .effect-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .effect-btn {
    background: linear-gradient(145deg, var(--color-base-crypt), var(--color-base-charcoal));
    border: 2px solid var(--color-metal-bronze-patina);
    border-radius: 8px;
    padding: 1rem 1.5rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    min-width: 150px;
  }

  .effect-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sanctuary);
  }

  .effect-btn.active {
    background: linear-gradient(145deg, var(--color-metal-antique-gold), var(--color-metal-bronze-patina));
    border-color: var(--color-highlight-ivory);
    box-shadow: var(--glow-aura);
  }

  .effect-btn__name {
    font-size: 1rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .effect-btn__color {
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Picture Set Grid */
  .picture-set-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .picture-set-btn {
    background: rgba(26, 26, 26, 0.6);
    border: 1px solid var(--color-metal-bronze-patina);
    border-radius: 6px;
    padding: 0.5rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .picture-set-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-crypt);
  }

  .picture-set-btn.active {
    background: rgba(212, 175, 55, 0.1);
    border-color: var(--color-metal-antique-gold);
    box-shadow: 0 0 15px rgba(212, 175, 55, 0.3);
  }

  .picture-set-btn__thumb {
    width: 80px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
    border: 1px solid var(--color-metal-bronze-patina);
  }

  .picture-set-btn__name {
    font-size: 0.8rem;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: bold;
  }

  /* Image Selection Grid */
  .image-selection-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
    max-width: 600px;
    margin: 0 auto;
  }

  .image-btn {
    background: linear-gradient(145deg, var(--color-base-crypt), var(--color-base-charcoal));
    border: 2px solid var(--color-metal-bronze-patina);
    border-radius: 8px;
    padding: 1rem;
    cursor: pointer;
    transition: all var(--transition-ember);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    text-align: center;
  }

  .image-btn:hover {
    border-color: var(--color-metal-antique-gold);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sanctuary);
  }

  .image-btn.active {
    background: linear-gradient(145deg, rgba(212, 175, 55, 0.15), rgba(212, 175, 55, 0.05));
    border-color: var(--color-metal-antique-gold);
    box-shadow: 0 0 20px rgba(212, 175, 55, 0.4);
  }

  .image-btn__name {
    font-size: 1rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .image-btn__desc {
    font-size: 0.75rem;
    color: var(--color-metal-polished-brass);
    font-style: italic;
  }

  /* Parameter Controls */
  .parameter-controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .parameter-control {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .parameter-control label {
    color: var(--color-metal-polished-brass);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 0.9rem;
  }

  .parameter-control input[type="range"] {
    width: 100%;
    height: 6px;
    background: var(--color-base-crypt);
    border-radius: 3px;
    outline: none;
    -webkit-appearance: none;
  }

  .parameter-control input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: var(--color-metal-antique-gold);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: var(--shadow-crypt);
  }

  .parameter-control input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: var(--color-metal-antique-gold);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: var(--shadow-crypt);
    border: none;
  }

  .parameter-value {
    color: var(--color-highlight-ivory);
    font-weight: bold;
    text-align: center;
    font-family: monospace;
  }

  /* Main Hero Display */
  .hero-effects-showcase__main {
    padding: 0 1rem 2rem;
  }

  .hero-frame {
    max-width: 1200px;
    margin: 0 auto;
  }

  .hero-display {
    min-height: 600px;
    display: flex;
    flex-direction: column;
  }

  .hero__image-container {
    flex: 1;
    position: relative;
    background: var(--color-base-void);
    border-radius: 8px;
    overflow: hidden;
    min-height: 400px;
  }

  .hero-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: var(--color-metal-polished-brass);
  }

  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid var(--color-metal-bronze-patina);
    border-top: 3px solid var(--color-metal-antique-gold);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-text {
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  /* Effect Information */
  .effect-info {
    padding: 1.5rem;
    background: rgba(26, 26, 26, 0.8);
    border-top: 1px solid var(--color-metal-bronze-patina);
  }

  .effect-info__title {
    font-size: 1.3rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 0.5rem 0;
  }

  .effect-info__description {
    font-size: 1rem;
    color: var(--color-metal-polished-brass);
    margin: 0 0 1rem 0;
    font-style: italic;
  }

  .effect-info__features {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .feature-tag {
    background: var(--color-base-crypt);
    color: var(--color-metal-antique-gold);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border: 1px solid var(--color-metal-bronze-patina);
  }

  /* Technical Details */
  .hero-effects-showcase__technical {
    padding: 0 1rem 2rem;
  }

  .technical-frame {
    max-width: 1000px;
    margin: 0 auto;
  }

  .technical-content {
    padding: 2rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
  }

  .technical-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--color-highlight-ivory);
    text-transform: uppercase;
    letter-spacing: 2px;
    margin: 0 0 2rem 0;
    text-align: center;
    text-shadow: 0 0 15px var(--glow-aura);
  }

  .tech-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .tech-item {
    text-align: center;
    padding: 1rem;
    background: var(--color-base-crypt);
    border: 1px solid var(--color-metal-bronze-patina);
    border-radius: 6px;
  }

  .tech-item__title {
    font-size: 0.9rem;
    color: var(--color-metal-polished-brass);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 0.5rem 0;
  }

  .tech-item__value {
    font-size: 1.1rem;
    color: var(--color-highlight-ivory);
    font-weight: bold;
  }

  /* Performance Monitor */
  .performance-monitor {
    background: var(--color-base-crypt);
    border: 1px solid var(--color-metal-bronze-patina);
    border-radius: 6px;
    padding: 1.5rem;
  }

  .performance-title {
    font-size: 1.1rem;
    color: var(--color-metal-polished-brass);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0 0 1rem 0;
    text-align: center;
  }

  .performance-stats {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .stat-item {
    text-align: center;
  }

  .stat-label {
    display: block;
    font-size: 0.8rem;
    color: var(--color-metal-polished-brass);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.25rem;
  }

  .stat-value {
    font-size: 1.2rem;
    color: var(--color-highlight-ivory);
    font-weight: bold;
    font-family: monospace;
  }

  /* Navigation */
  .hero-effects-showcase__nav {
    padding: 0 1rem 2rem;
  }

  .nav-frame {
    max-width: 800px;
    margin: 0 auto;
  }

  .nav-content {
    padding: 1.5rem;
    background: rgba(26, 26, 26, 0.8);
    backdrop-filter: blur(3px);
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .hero-effects-showcase__header,
    .hero-effects-showcase__controls,
    .hero-effects-showcase__main,
    .hero-effects-showcase__technical,
    .hero-effects-showcase__nav {
      padding: 1rem 0.5rem;
    }

    .controls-content,
    .technical-content,
    .nav-content {
      padding: 1.5rem 1rem;
    }

    .effect-buttons {
      flex-direction: column;
      align-items: center;
    }

    .effect-btn {
      width: 100%;
      max-width: 300px;
    }

    .picture-set-grid {
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    }

    .parameter-controls {
      grid-template-columns: 1fr;
    }

    .tech-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }

    .nav-content {
      flex-direction: column;
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .header-title {
      font-size: 1.8rem;
    }

    .controls-title,
    .technical-title {
      font-size: 1.4rem;
    }

    .picture-set-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* High contrast and reduced motion */
  @media (prefers-contrast: high) {
    .header-title { text-shadow: none; }
    .controls-title { text-shadow: none; }
    .technical-title { text-shadow: none; }
  }

  @media (prefers-reduced-motion: reduce) {
    .loading-spinner { animation: none; }

    * {
      transition: none !important;
      animation: none !important;
    }
  }
</style>

