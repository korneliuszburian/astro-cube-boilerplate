---
import Layout from "../layouts/Layout.astro";
import { getAvailableProducts } from "../utils/products";

const availableProducts = getAvailableProducts();
---

<Layout title="PRZEDMIOTY - Katalog Świętych Reliktów" description="Katalog zakazanych artefaktów">
  <div class="items-viewport">
    <div class="items-viewport__background">
      <video
        id="header-video"
        class="background-video"
        autoplay
        muted
        loop
        playsinline
      >
        <source src="/assets/videos/testing-video.mp4" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>

    <div class="items-viewport__grid" id="header-hover">
      <main class="items-viewport__main">
      </main>
    </div>
  </div>
</Layout>

<style>
  .items-viewport {
    width: 100vw;
    height: 100vh;
    position: relative;
    overflow: hidden;
  }

  .background-video {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
    pointer-events: none;
  }

  .items-viewport__background {
    background-image: url("/assets/videos/testing-video-poster.png");
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    z-index: -2;
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Items page loaded - ready for video implementations');

    const headerHover = document.getElementById('header-hover');
    const headerVideo = document.querySelector('.header-video') as HTMLVideoElement | null;

    if (headerHover && headerVideo) {
      let videoPlayPromise: Promise<void> | null = null;

      const playVideo = () => {
        if (headerVideo.paused && headerVideo.readyState >= 3) {
          videoPlayPromise = headerVideo.play();
          if (videoPlayPromise) {
            videoPlayPromise.catch((error) => {
              console.error("Video play failed:", error);
              videoPlayPromise = null;
            });
          }
        }
      };

      const pauseVideo = async () => {
        if (videoPlayPromise !== null) {
          try {
            await videoPlayPromise;
          } catch (error) {
          } finally {
            videoPlayPromise = null;
          }
        }
        if (!headerVideo.paused) {
          headerVideo.pause();
        }
      };

      headerHover.addEventListener('mouseenter', playVideo);
      headerHover.addEventListener('mouseleave', pauseVideo);
    }

    const productContainers = document.querySelectorAll('.product-video-container');

    productContainers.forEach((container, index) => {
      const video = container.querySelector('video') as HTMLVideoElement | null;
      if (video) {
        let playPromise: Promise<void> | null = null;

        container.addEventListener('mouseenter', () => {
          if (video.paused && video.readyState >= 3) {
            playPromise = video.play();
            if (playPromise) {
              playPromise.catch((error) => {
                console.error("Product video play failed:", error);
                playPromise = null;
              });
            }
          }
        });

        container.addEventListener('mouseleave', async () => {
          if (playPromise !== null) {
            try {
              await playPromise;
            } catch (error) {
            } finally {
              playPromise = null;
            }
          }
          if (!video.paused) {
            video.pause();
          }
        });
      }

      (container as HTMLElement).style.animationDelay = `${index * 0.1}s`;
    });
  });
</script>
