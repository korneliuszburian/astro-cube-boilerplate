---
/**
 * ProductGrid.astro
 * A component to display a grid of product items with 3D stack motion effects
 * and filtering capabilities by category and rarity.
 */

 import ItemCard from './ItemCard.astro';
import StackMotion from './StackMotion.astro';

interface Product {
  id: string;
  title: string;
  price: number;
  image: string;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
  category: string;
  description?: string;
  stats?: Record<string, number>;
}

interface Props {
  products: Product[];
  title?: string;
  useStackMotion?: boolean;
  showFilters?: boolean;
  initialCategory?: string;
  class?: string;
}

const {
  products,
  title,
  useStackMotion = true,
  showFilters = true,
  initialCategory = 'all',
  class: className = ''
} = Astro.props;

// Get unique categories from products
const categories = ['all', ...new Set(products.map(product => product.category))];

// Get rarities used in these products
const rarities = [...new Set(products.map(product => product.rarity))];

// Sort rarities by value
const rarityOrder = {
  'common': 0,
  'rare': 1,
  'mystic': 2,
  'legendary': 3
};

const sortedRarities = rarities.sort((a, b) =>
  rarityOrder[a as keyof typeof rarityOrder] - rarityOrder[b as keyof typeof rarityOrder]
);

const gridId = `product-grid-${Math.random().toString(36).substring(2, 9)}`;
---

<section class:list={["product-section", className]}>
  {title && <h2 class="product-section__title">{title}</h2>}

  {showFilters && (
    <div class="product-filters">
      <div class="product-filters__categories">
        {categories.map(category => (
          <button
            class:list={[
              "product-filters__button",
              { "product-filters__button--active": category === initialCategory }
            ]}
            data-category={category}
            data-filter-type="category"
          >
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>

      <div class="product-filters__rarities">
        {sortedRarities.map(rarity => (
          <button
            class:list={[
              "product-filters__button",
              "product-filters__button--rarity",
              `product-filters__button--${rarity}`
            ]}
            data-rarity={rarity}
            data-filter-type="rarity"
          >
            <span class="product-filters__rarity-icon"></span>
            {rarity.charAt(0).toUpperCase() + rarity.slice(1)}
          </button>
        ))}
      </div>
    </div>
  )}

  {useStackMotion ? (
    <StackMotion id={gridId} itemSelector=".product-grid__item" perspective={1200} maxTilt={8}>
      <div id={gridId} class="product-grid">
        {products.map(product => (
          <div class="product-grid__item stack__item" data-category={product.category} data-rarity={product.rarity}>
            <ItemCard
              id={product.id}
              title={product.title}
              price={product.price}
              image={product.image}
              rarity={product.rarity}
              description={product.description}
              stats={product.stats}
            />
          </div>
        ))}
      </div>
    </StackMotion>
  ) : (
    <div id={gridId} class="product-grid">
      {products.map(product => (
        <div class="product-grid__item" data-category={product.category} data-rarity={product.rarity}>
          <ItemCard
            id={product.id}
            title={product.title}
            price={product.price}
            image={product.image}
            rarity={product.rarity}
            description={product.description}
            stats={product.stats}
          />
        </div>
      ))}
    </div>
  )}

  <div class="product-grid__empty" style="display: none;">
    <p>No products match the selected filters.</p>
    <button class="product-grid__reset-button">Reset Filters</button>
  </div>
</section>

<script define:vars={{ gridId, initialCategory }}>
  document.addEventListener('DOMContentLoaded', () => {
    const gridElement = document.getElementById(gridId);
    if (!gridElement) return;

    const filterButtons = document.querySelectorAll('.product-filters__button');
    const gridItems = gridElement.querySelectorAll('.product-grid__item');
    const emptyMessage = document.querySelector('.product-grid__empty');
    const resetButton = document.querySelector('.product-grid__reset-button');

    // Filter state
    const activeFilters = {
      category: initialCategory,
      rarity: null
    };

    // Filter products based on active filters
    const filterProducts = () => {
      let visibleCount = 0;

      gridItems.forEach(item => {
        const matchesCategory = activeFilters.category === 'all' ||
                               item.dataset.category === activeFilters.category;
        const matchesRarity = activeFilters.rarity === null ||
                              item.dataset.rarity === activeFilters.rarity;

        if (matchesCategory && matchesRarity) {
          item.style.display = '';
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });

      // Show/hide empty message
      if (emptyMessage) {
        emptyMessage.style.display = visibleCount > 0 ? 'none' : 'block';
      }

      // If stack motion is enabled, trigger a reflow
      if (typeof window.updateStackEffect === 'function') {
        setTimeout(() => window.updateStackEffect(), 50);
      }
    };

    // Set active filter buttons
    const updateFilterButtons = () => {
      // Reset all buttons
      filterButtons.forEach(button => {
        const filterType = button.dataset.filterType;

        if (filterType === 'category') {
          button.classList.toggle('product-filters__button--active',
            button.dataset.category === activeFilters.category);
        } else if (filterType === 'rarity') {
          button.classList.toggle('product-filters__button--active',
            button.dataset.rarity === activeFilters.rarity);
        }
      });
    };

    // Handle filter button clicks
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filterType = button.dataset.filterType;

        if (filterType === 'category') {
          // Toggle only among category filters
          activeFilters.category = button.dataset.category;
        } else if (filterType === 'rarity') {
          // Toggle rarity filter on/off
          activeFilters.rarity = activeFilters.rarity === button.dataset.rarity ?
                                null : button.dataset.rarity;
        }

        updateFilterButtons();
        filterProducts();
      });
    });

    // Reset filters
    if (resetButton) {
      resetButton.addEventListener('click', () => {
        activeFilters.category = 'all';
        activeFilters.rarity = null;
        updateFilterButtons();
        filterProducts();
      });
    }

    // Apply initial filters
    filterProducts();

    // Handle theme changes by refreshing the filter display
    window.addEventListener('themeChanged', () => {
      // Allow time for CSS transitions
      setTimeout(() => {
        updateFilterButtons();
      }, 100);
    });
  });
</script>

<style>
  .product-section {
    margin: var(--space-3xl) 0;
  }

  .product-section__title {
    font-size: var(--size-step-3);
    margin-bottom: var(--space-xl);
    text-align: center;
    color: var(--theme-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    position: relative;
    display: inline-block;
    left: 50%;
    transform: translateX(-50%);
  }

  .product-section__title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--theme-accent);
    transform: scaleX(0.6);
    transform-origin: center;
    transition: transform var(--transition-standard);
  }

  .product-section:hover .product-section__title::after {
    transform: scaleX(1);
  }

  /* Filters */
  .product-filters {
    display: flex;
    flex-direction: column;
    gap: var(--space-l);
    margin-bottom: var(--space-2xl);
  }

  .product-filters__categories,
  .product-filters__rarities {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: var(--space-s);
  }

  .product-filters__button {
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-surface);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all var(--transition-standard);
    backdrop-filter: blur(5px);
  }

  .product-filters__button:hover {
    background-color: var(--theme-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .product-filters__button--active {
    background-color: var(--theme-primary);
    box-shadow: 0 0 10px var(--theme-primary);
  }

  /* Rarity filter buttons */
  .product-filters__button--rarity {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .product-filters__rarity-icon {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .product-filters__button--common .product-filters__rarity-icon {
    background-color: var(--color-rarity-common);
  }

  .product-filters__button--rare .product-filters__rarity-icon {
    background-color: var(--color-rarity-rare);
  }

  .product-filters__button--mystic .product-filters__rarity-icon {
    background-color: var(--color-rarity-mystic);
  }

  .product-filters__button--legendary .product-filters__rarity-icon {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 5px var(--color-rarity-legendary);
    animation: rarity-pulse 2s infinite alternate;
  }

  /* Product grid */
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: var(--space-xl);
    position: relative;
  }

  .product-grid__item {
    display: flex;
    justify-content: center;
  }

  /* Empty state */
  .product-grid__empty {
    text-align: center;
    padding: var(--space-xl);
    background-color: var(--theme-surface);
    border-radius: var(--radius-lg);
    margin-top: var(--space-xl);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-grid__reset-button {
    margin-top: var(--space-m);
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    cursor: pointer;
    font-weight: 600;
    transition: all var(--transition-standard);
  }

  .product-grid__reset-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Animations */
  @keyframes rarity-pulse {
    0% { transform: scale(1); }
    100% { transform: scale(1.3); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .product-filters {
      gap: var(--space-m);
    }

    .product-filters__button {
      padding: var(--space-xs) var(--space-m);
      font-size: 0.8rem;
    }

    .product-grid {
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: var(--space-l);
    }

    .product-section__title {
      font-size: var(--size-step-2);
    }
  }

  @media (max-width: 480px) {
    .product-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: var(--space-m);
    }
  }
</style>
