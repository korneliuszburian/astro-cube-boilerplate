This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-28T15:09:56.061Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
astro.config.mjs
package.json
postcss.config.cjs
public/favicon.svg
README.md
src/components/AmbientEffects.astro
src/components/Card.astro
src/components/CardPackOpener.astro
src/components/ItemCard.astro
src/components/ParallaxHero.astro
src/components/ProductDetail.astro
src/components/ProductGrid.astro
src/components/ShoppingCart.astro
src/components/StackMotion.astro
src/components/ThemeSwitcher.astro
src/css-utils/clamp-generator.js
src/css-utils/tokens-to-tailwind.js
src/css/blocks/prose.css
src/css/components/box.css
src/css/components/cluster.css
src/css/components/flow.css
src/css/components/grid.css
src/css/components/icon.css
src/css/components/repel.css
src/css/components/sidebar.css
src/css/components/switcher.css
src/css/components/wrapper.css
src/css/global.css
src/css/global/fonts.css
src/css/global/global-styles.css
src/css/global/reset.css
src/css/global/variables.css
src/css/utilities/animation.css
src/css/utilities/rarity.css
src/css/utilities/region.css
src/css/utilities/visually-hidden.css
src/design-tokens/colors.json
src/design-tokens/effects.json
src/design-tokens/fonts.json
src/design-tokens/spacing.json
src/design-tokens/text-leading.json
src/design-tokens/text-sizes.json
src/design-tokens/text-weights.json
src/design-tokens/themes/base.json
src/design-tokens/themes/iceland.json
src/design-tokens/viewports.json
src/env.d.ts
src/js/theme-utils.js
src/layouts/BaseLayout.astro
src/layouts/Layout.astro
src/pages/index.astro
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# build output
dist/

# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';
import tailwind from "@astrojs/tailwind";
import partytown from "@astrojs/partytown";
import sitemap from "@astrojs/sitemap";

// https://astro.build/config
export default defineConfig({
  integrations: [tailwind({
    applyBaseStyles: false
  }), partytown(), sitemap()]
});

================
File: package.json
================
{
  "name": "astro-cube-boilerplate",
  "type": "module",
  "version": "0.0.1",
  "author": "Frank Stallone <frank@stallone.dev>",
  "description": "A simple Astro boilerplate with CUBE CSS and TailwindCSS",
  "homepage": "https://github.com/frankstallone/astro-cube-boilerplate",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/partytown": "^2.1.2",
    "@astrojs/sitemap": "^3.2.1",
    "@astrojs/tailwind": "^5.1.4",
    "astro": "^5.1.1",
    "slugify": "^1.6.6",
    "tailwindcss": "^3.4.1"
  },
  "devDependencies": {
    "prettier": "^3.2.5",
    "prettier-plugin-astro": "^0.13.0",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": ">=20.12.2"
  },
  "resolutions": {
    "esbuild": "0.24.0"
  }
}

================
File: postcss.config.cjs
================
module.exports = {
  plugins: [
    require('tailwindcss')
  ]
};

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: README.md
================
# Astro CUBE CSS Boilerplate

Based on the [CUBE CSS Boilerplate](https://github.com/Set-Creative-Studio/cube-boilerplate). 

The Astro CUBE CSS Boilerplate is a simple, modern, web platform native starting point with sensible defaults. You get the advantages of modern CSS, with the aid of utility classes, and the affordances of design token architecture. 

Uses:
- [Astro](https://astro.build/), a web framework for content-driven websites
- [Utopia](https://utopia.fyi/), for responsive typography, spacing, and sizing
- [Cube CSS](https://cube.fyi/), a pragmatric and simple CSS methodology
- [Every Layouts](https://every-layout.dev/), better, more resilient CSS
- [Tailwind CSS](https://tailwindcss.com/), a utility-first CSS framework, used as utility-second
- [Partytown](https://partytown.builder.io/), for running third-party scripts in a web worker
- [Astro Sitemap](https://docs.astro.build/en/guides/integrations-guide/sitemap/), for generating a sitemap
- Design tokens, bringing sanity to design decisions.

Read more from Andy Bell's [A CSS project boilerplate
](https://piccalil.li/blog/a-css-project-boilerplate/).

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

================
File: src/components/AmbientEffects.astro
================
---
/**
 * AmbientEffects.astro
 * Creates theme-specific ambient background effects that change
 * based on the current theme.
 */

 interface Props {
  class?: string;
  particleDensity?: number;
  animationSpeed?: number;
  disableOnMobile?: boolean;
}

const {
  class: className = '',
  particleDensity = 40, // Default particle density
  animationSpeed = 1, // Animation speed multiplier
  disableOnMobile = true
} = Astro.props;
---

<div class:list={["ambient-effects", className]} data-disable-mobile={disableOnMobile}>
  <div class="ambient-effects__container">
    <div class="ambient-effects__layer ambient-effects__particles"></div>
    <div class="ambient-effects__layer ambient-effects__overlay"></div>
    <div class="ambient-effects__layer ambient-effects__noise"></div>
  </div>
</div>

<script define:vars={{ particleDensity, animationSpeed }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.ambient-effects');
    if (!container) return;

    const particlesLayer = container.querySelector('.ambient-effects__particles');
    const noiseLayer = container.querySelector('.ambient-effects__noise');
    const overlayLayer = container.querySelector('.ambient-effects__overlay');

    // Skip setup on mobile if disabled
    if (container.dataset.disableMobile === 'true' && window.innerWidth < 768) {
      container.style.display = 'none';
      return;
    }

    // Get current theme and animation
    const updateThemeEffects = () => {
      const html = document.documentElement;
      const currentTheme = html.dataset.theme || 'iceland';
      const animationType = getComputedStyle(html).getPropertyValue('--ambient-animation').trim().replace(/"/g, '');
      const themeParticleDensity = parseInt(getComputedStyle(html).getPropertyValue('--particle-density') || `${particleDensity}`);

      // Set appropriate animation class
      if (particlesLayer) {
        // Reset animations
        particlesLayer.className = 'ambient-effects__layer ambient-effects__particles';

        // Apply current theme animation
        particlesLayer.classList.add(`ambient-effects__particles--${animationType}`);

        // Create particles based on theme
        createParticles(particlesLayer, themeParticleDensity, animationType);

        // Apply animation speed
        const animationElements = particlesLayer.querySelectorAll('.ambient-effects__particle');
        animationElements.forEach(el => {
          const currentDuration = parseFloat(getComputedStyle(el).animationDuration);
          el.style.animationDuration = `${currentDuration / animationSpeed}s`;
        });
      }

      // Set theme-specific noise texture
      if (noiseLayer) {
        const noiseTexture = getComputedStyle(html).getPropertyValue('--accent-noise').trim();
        if (noiseTexture && noiseTexture !== 'none') {
          noiseLayer.style.backgroundImage = noiseTexture;
          noiseLayer.style.opacity = '0.1'; // Set to visible
        } else {
          noiseLayer.style.opacity = '0'; // Hide if no texture
        }
      }

      // Apply theme-specific overlay gradient
      if (overlayLayer) {
        let gradient;

        switch (currentTheme) {
          case 'iceland':
            gradient = 'radial-gradient(circle at 70% 20%, rgba(122, 164, 227, 0.1) 0%, transparent 50%)';
            break;
          case 'thailand':
            gradient = 'radial-gradient(circle at 30% 70%, rgba(76, 175, 80, 0.1) 0%, transparent 60%)';
            break;
          case 'berlin':
            gradient = 'radial-gradient(circle at 50% 30%, rgba(229, 57, 53, 0.1) 0%, transparent 40%)';
            break;
          case 'spain':
            gradient = 'radial-gradient(circle at 20% 60%, rgba(186, 104, 200, 0.1) 0%, transparent 50%)';
            break;
          default:
            gradient = 'none';
        }

        overlayLayer.style.background = gradient;
      }
    };

    // Create particles for different animation types
    function createParticles(container, count, type) {
      // Clear existing particles
      container.innerHTML = '';

      // Create new particles
      for (let i = 0; i < count; i++) {
        const particle = document.createElement('div');
        particle.classList.add('ambient-effects__particle');

        // Apply animation-specific styles
        if (type === 'snowfall') {
          // Snowflake particle
          particle.classList.add('ambient-effects__particle--snow');
          particle.style.left = `${Math.random() * 100}%`;
          particle.style.animationDelay = `${Math.random() * 15}s`;
          particle.style.animationDuration = `${10 + Math.random() * 20}s`;
          particle.style.opacity = `${0.1 + Math.random() * 0.7}`;
          particle.style.width = `${2 + Math.random() * 6}px`;
          particle.style.height = particle.style.width;
        }
        else if (type === 'rainforest') {
          // Leaf particle
          particle.classList.add('ambient-effects__particle--leaf');
          particle.style.left = `${Math.random() * 100}%`;
          particle.style.top = `${Math.random() * -100}%`;
          particle.style.animationDelay = `${Math.random() * 20}s`;
          particle.style.animationDuration = `${15 + Math.random() * 30}s`;
          particle.style.opacity = `${0.1 + Math.random() * 0.5}`;
          particle.style.width = `${5 + Math.random() * 15}px`;
          particle.style.height = `${parseInt(particle.style.width) * 0.8}px`;
          particle.style.transform = `rotate(${Math.random() * 360}deg)`;
        }
        else if (type === 'embers') {
          // Ember particle
          particle.classList.add('ambient-effects__particle--ember');
          particle.style.left = `${Math.random() * 100}%`;
          particle.style.bottom = `-${10 + Math.random() * 10}px`;
          particle.style.animationDelay = `${Math.random() * 10}s`;
          particle.style.animationDuration = `${3 + Math.random() * 6}s`;
          particle.style.opacity = `${0.1 + Math.random() * 0.6}`;
          particle.style.width = `${2 + Math.random() * 3}px`;
          particle.style.height = particle.style.width;
        }
        else if (type === 'stardust') {
          // Stardust particle
          particle.classList.add('ambient-effects__particle--stardust');
          particle.style.left = `${Math.random() * 100}%`;
          particle.style.top = `${Math.random() * 100}%`;
          particle.style.animationDelay = `${Math.random() * 10}s`;
          particle.style.animationDuration = `${4 + Math.random() * 8}s`;
          particle.style.opacity = `${0.1 + Math.random() * 0.6}`;
          particle.style.width = `${1 + Math.random() * 3}px`;
          particle.style.height = particle.style.width;
        }

        container.appendChild(particle);
      }
    }

    // Initialize with current theme
    updateThemeEffects();

    // Update on theme change
    window.addEventListener('themeChanged', updateThemeEffects);

    // Update on resize (for responsive behavior)
    window.addEventListener('resize', () => {
      if (container.dataset.disableMobile === 'true') {
        if (window.innerWidth < 768) {
          container.style.display = 'none';
        } else {
          container.style.display = 'block';
          updateThemeEffects();
        }
      }
    });
  });
</script>

<style>
  .ambient-effects {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: var(--z-below, -1);
    overflow: hidden;
  }

  .ambient-effects__container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .ambient-effects__layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ambient-effects__noise {
    background-size: 200px 200px;
    opacity: 0.1;
    mix-blend-mode: overlay;
  }

  .ambient-effects__overlay {
    background-size: cover;
    background-position: center;
  }

  /* Particles - Snowfall */
  .ambient-effects__particles--snowfall .ambient-effects__particle--snow {
    position: absolute;
    background-color: white;
    border-radius: 50%;
    filter: blur(1px);
    animation: snowfall linear infinite;
  }

  @keyframes snowfall {
    0% {
      transform: translateY(-10px) rotate(0deg);
      opacity: 0;
    }
    20% {
      opacity: var(--particle-opacity, 0.7);
    }
    100% {
      transform: translateY(calc(100vh + 10px)) rotate(360deg);
      opacity: 0;
    }
  }

  /* Particles - Rainforest */
  .ambient-effects__particles--rainforest .ambient-effects__particle--leaf {
    position: absolute;
    background-color: #4caf50;
    border-radius: 40% 70% 60% 30% / 30% 30% 70% 70%;
    filter: blur(0.5px);
    animation: rainforest linear infinite;
  }

  @keyframes rainforest {
    0% {
      transform: translateY(-10px) rotate(0deg);
      opacity: 0;
    }
    20% {
      opacity: var(--particle-opacity, 0.5);
    }
    100% {
      transform: translateY(calc(100vh + 10px)) translateX(100px) rotate(360deg);
      opacity: 0;
    }
  }

  /* Particles - Embers */
  .ambient-effects__particles--embers .ambient-effects__particle--ember {
    position: absolute;
    background-color: #ff6e40;
    box-shadow: 0 0 4px #ff6e40;
    border-radius: 50%;
    filter: blur(0.5px);
    animation: embers ease-out infinite;
  }

  @keyframes embers {
    0% {
      transform: translateY(0) translateX(0);
      opacity: 0;
    }
    20% {
      opacity: var(--particle-opacity, 0.6);
    }
    100% {
      transform: translateY(-100px) translateX(calc(30px - 60px * var(--random, 0.5)));
      opacity: 0;
    }
  }

  /* Particles - Stardust */
  .ambient-effects__particles--stardust .ambient-effects__particle--stardust {
    position: absolute;
    background-color: white;
    box-shadow: 0 0 4px rgba(186, 104, 200, 0.8);
    border-radius: 50%;
    filter: blur(0.5px);
    animation: stardust ease-in-out infinite;
  }

  @keyframes stardust {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: scale(1.5) rotate(180deg);
      opacity: var(--particle-opacity, 0.6);
    }
    100% {
      transform: scale(0) rotate(360deg);
      opacity: 0;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .ambient-effects {
      display: none;
    }
  }
</style>

================
File: src/components/Card.astro
================
---
interface Props {
	title: string;
	body: string;
	href: string;
}

const { href, title, body } = Astro.props;
---

<li class="link-card">
	<a href={href}>
		<h2>
			{title}
			<span>&rarr;</span>
		</h2>
		<p>
			{body}
		</p>
	</a>
</li>
<style>
	.link-card {
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>

================
File: src/components/CardPackOpener.astro
================
---
/**
 * CardPackOpener.astro
 * A component that creates a game-like card pack opening experience.
 * Products are revealed one by one with animations and effects based on rarity.
 */

 import ItemCard from './ItemCard.astro';

interface Product {
  id: string;
  title: string;
  price: number;
  image: string;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
  description?: string;
  stats?: Record<string, number>;
}

interface Props {
  packName: string;
  packImage: string;
  products: Product[];
  class?: string;
  onOpenCallback?: string; // JavaScript function name to call after opening
}

const {
  packName,
  packImage,
  products,
  class: className = '',
  onOpenCallback
} = Astro.props;

// Generate unique ID for this pack opener
const id = `pack-opener-${Math.random().toString(36).substring(2, 9)}`;

// Sort products by rarity for dramatic effect
const rarityOrder = {
  'common': 0,
  'rare': 1,
  'mystic': 2,
  'legendary': 3
};

const sortedProducts = [...products].sort(
  (a, b) => rarityOrder[a.rarity] - rarityOrder[b.rarity]
);
---

<div id={id} class:list={["pack-opener", className]}>
  <!-- Initial closed pack state -->
  <div class="pack-opener__closed-state">
    <div class="pack-opener__pack">
      <img src={packImage} alt={packName} class="pack-opener__pack-image" />
      <h3 class="pack-opener__pack-name">{packName}</h3>
      <p class="pack-opener__pack-count">{products.length} items</p>
      <button class="pack-opener__open-button">Open Pack</button>
    </div>
  </div>

  <!-- Opening animation state -->
  <div class="pack-opener__opening-state" style="display: none;">
    <div class="pack-opener__animation">
      <div class="pack-opener__pack-front">
        <img src={packImage} alt={packName} class="pack-opener__pack-image" />
      </div>
      <div class="pack-opener__pack-shine"></div>
    </div>
  </div>

  <!-- Revealed items state -->
  <div class="pack-opener__revealed-state" style="display: none;">
    <h2 class="pack-opener__reveal-title">Your Items</h2>

    <div class="pack-opener__items">
      {sortedProducts.map((product, index) => (
        <div class="pack-opener__item" data-index={index} data-rarity={product.rarity}>
          <ItemCard
            id={product.id}
            title={product.title}
            price={product.price}
            image={product.image}
            rarity={product.rarity}
            description={product.description}
            stats={product.stats}
          />
        </div>
      ))}
    </div>

    <button class="pack-opener__done-button">Continue Shopping</button>
  </div>
</div>

<script define:vars={{ id, onOpenCallback }}>
  document.addEventListener('DOMContentLoaded', () => {
    const packOpener = document.getElementById(id);
    if (!packOpener) return;

    const closedState = packOpener.querySelector('.pack-opener__closed-state');
    const openingState = packOpener.querySelector('.pack-opener__opening-state');
    const revealedState = packOpener.querySelector('.pack-opener__revealed-state');
    const openButton = packOpener.querySelector('.pack-opener__open-button');
    const doneButton = packOpener.querySelector('.pack-opener__done-button');
    const items = packOpener.querySelectorAll('.pack-opener__item');

    // Audio elements for sound effects
    const createAudio = (src, volume = 0.5) => {
      const audio = new Audio(src);
      audio.volume = volume;
      return audio;
    };

    // Sound effects - these paths should be updated to your actual audio files
    const sounds = {
      packOpen: createAudio('/sounds/pack-open.mp3', 0.6),
      cardFlip: createAudio('/sounds/card-flip.mp3', 0.4),
      rarityCommon: createAudio('/sounds/rarity-common.mp3', 0.3),
      rarityRare: createAudio('/sounds/rarity-rare.mp3', 0.4),
      rarityMystic: createAudio('/sounds/rarity-mystic.mp3', 0.5),
      rarityLegendary: createAudio('/sounds/rarity-legendary.mp3', 0.7)
    };

    // Function to play a sound with fallback if audio fails
    const playSound = (soundKey) => {
      try {
        if (sounds[soundKey]) {
          sounds[soundKey].currentTime = 0;
          sounds[soundKey].play().catch(err => console.log('Audio play prevented:', err));
        }
      } catch (error) {
        console.log('Error playing sound:', error);
      }
    };

    // Open pack animation sequence
    const openPack = () => {
      // Hide the closed state
      closedState.style.display = 'none';

      // Show and animate the opening state
      openingState.style.display = 'flex';

      // Play pack opening sound
      playSound('packOpen');

      // Add animation class to start the sequence
      const packAnimation = openingState.querySelector('.pack-opener__animation');
      packAnimation.classList.add('pack-opener__animation--active');

      // After animation completes, show the revealed items
      setTimeout(() => {
        openingState.style.display = 'none';
        revealedState.style.display = 'block';

        // Reveal items one by one
        revealItems();

        // Call callback if provided
        if (onOpenCallback && typeof window[onOpenCallback] === 'function') {
          window[onOpenCallback]();
        }
      }, 2000); // Match this to your CSS animation duration
    };

    // Reveal items with sequential animations
    const revealItems = () => {
      items.forEach((item, index) => {
        setTimeout(() => {
          item.classList.add('pack-opener__item--revealed');

          // Play sound based on rarity
          const rarity = item.dataset.rarity;
          switch(rarity) {
            case 'legendary':
              playSound('rarityLegendary');
              break;
            case 'mystic':
              playSound('rarityMystic');
              break;
            case 'rare':
              playSound('rarityRare');
              break;
            default:
              playSound('rarityCommon');
          }

          // Add special effects for higher rarities
          if (rarity === 'legendary') {
            // Create legendary reveal effect
            const legendaryEffect = document.createElement('div');
            legendaryEffect.className = 'pack-opener__legendary-effect';
            item.appendChild(legendaryEffect);

            // Remove effect after animation
            setTimeout(() => {
              legendaryEffect.remove();
            }, 3000);
          }

        }, 600 * index); // Stagger the reveals
      });
    };

    // Event listeners
    if (openButton) {
      openButton.addEventListener('click', openPack);
    }

    if (doneButton) {
      doneButton.addEventListener('click', () => {
        // You might want to redirect or close a modal here
        packOpener.style.display = 'none';
      });
    }
  });
</script>

<style>
  .pack-opener {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: var(--z-modal);
    display: flex;
    align-items: center;
    justify-content: center;
    perspective: 1200px;
  }

  /* Closed state */
  .pack-opener__closed-state {
    text-align: center;
    padding: var(--space-xl);
  }

  .pack-opener__pack {
    background-color: var(--theme-surface);
    padding: var(--space-xl);
    border-radius: var(--radius-lg);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    backdrop-filter: var(--card-backdrop-filter);
    max-width: 400px;
    transition: transform 0.3s ease;
  }

  .pack-opener__pack:hover {
    transform: translateY(-5px) scale(1.02);
  }

  .pack-opener__pack-image {
    width: 100%;
    height: auto;
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-l);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }

  .pack-opener__pack-name {
    font-size: var(--size-step-2);
    color: var(--theme-text-primary);
    margin-bottom: var(--space-s);
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .pack-opener__pack-count {
    font-size: var(--size-step-0);
    color: var(--theme-text-secondary);
    margin-bottom: var(--space-l);
    font-family: var(--font-secondary);
  }

  .pack-opener__open-button {
    padding: var(--space-s) var(--space-xl);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    font-size: var(--size-step-0);
    font-weight: bold;
    cursor: pointer;
    transition: all var(--transition-standard);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .pack-opener__open-button:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
  }

  /* Opening animation state */
  .pack-opener__opening-state {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .pack-opener__animation {
    position: relative;
    width: 300px;
    height: 400px;
    transform-style: preserve-3d;
    transform: rotateY(0deg);
  }

  .pack-opener__animation--active {
    animation: packOpenAnimation 2s ease-out forwards;
  }

  .pack-opener__pack-front {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: var(--radius-lg);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    overflow: hidden;
    background-color: var(--theme-surface);
  }

  .pack-opener__pack-shine {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 45%,
      rgba(255, 255, 255, 0.7) 50%,
      rgba(255, 255, 255, 0) 55%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: packShineEffect 2s ease-out forwards;
    pointer-events: none;
    z-index: 1;
  }

  /* Revealed items state */
  .pack-opener__revealed-state {
    width: 100%;
    height: 100%;
    overflow-y: auto;
    padding: var(--space-xl);
    text-align: center;
  }

  .pack-opener__reveal-title {
    font-size: var(--size-step-3);
    color: var(--theme-text-primary);
    margin-bottom: var(--space-xl);
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
  }

  .pack-opener__items {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--space-xl);
    margin-bottom: var(--space-2xl);
  }

  .pack-opener__item {
    opacity: 0;
    transform: rotateY(180deg) scale(0.8);
    transition: transform 0.5s ease, opacity 0.5s ease;
  }

  .pack-opener__item--revealed {
    opacity: 1;
    transform: rotateY(0deg) scale(1);
  }

  .pack-opener__done-button {
    padding: var(--space-s) var(--space-xl);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    font-size: var(--size-step-0);
    font-weight: bold;
    cursor: pointer;
    transition: all var(--transition-standard);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: var(--space-xl);
  }

  .pack-opener__done-button:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-3px);
  }

  /* Legendary effect */
  .pack-opener__legendary-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, var(--color-rarity-legendary) 0%, transparent 70%);
    opacity: 0;
    z-index: -1;
    animation: legendaryRevealEffect 3s ease-out;
  }

  /* Animations */
  @keyframes packOpenAnimation {
    0% {
      transform: rotateY(0deg) scale(1);
    }
    50% {
      transform: rotateY(180deg) scale(1.2);
    }
    75% {
      transform: rotateY(360deg) scale(1.1);
    }
    100% {
      transform: rotateY(720deg) scale(0);
    }
  }

  @keyframes packShineEffect {
    0% {
      transform: rotate(30deg) translateX(-100%);
      opacity: 0;
    }
    25% {
      opacity: 1;
    }
    50% {
      transform: rotate(30deg) translateX(100%);
      opacity: 0;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes legendaryRevealEffect {
    0% {
      opacity: 0;
      transform: scale(0.5);
    }
    10% {
      opacity: 0.8;
      transform: scale(1.2);
    }
    30% {
      opacity: 0.6;
      transform: scale(1);
    }
    100% {
      opacity: 0;
      transform: scale(2);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .pack-opener__pack {
      max-width: 300px;
      padding: var(--space-l);
    }

    .pack-opener__animation {
      width: 250px;
      height: 350px;
    }

    .pack-opener__items {
      gap: var(--space-l);
    }
  }

  @media (max-width: 480px) {
    .pack-opener__revealed-state {
      padding: var(--space-m);
    }

    .pack-opener__reveal-title {
      font-size: var(--size-step-2);
    }

    .pack-opener__items {
      gap: var(--space-m);
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .pack-opener__animation--active {
      animation: none;
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .pack-opener__pack-shine {
      display: none;
    }

    .pack-opener__item {
      transition: opacity 0.5s ease;
      transform: none;
    }

    .pack-opener__item--revealed {
      opacity: 1;
      transform: none;
    }

    .pack-opener__legendary-effect {
      display: none;
    }
  }
</style>

================
File: src/components/ItemCard.astro
================
---
/**
 * ItemCard.astro
 * A game-like product card component that displays items with different rarity levels,
 * visual treatments, and interactive effects.
 */

 interface Props {
  id: string;
  title: string;
  price: number;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
  image: string;
  description?: string;
  stats?: {
    comfort?: number;
    durability?: number;
    style?: number;
    uniqueness?: number;
  };
}

const { id, title, price, rarity, image, description, stats } = Astro.props;

// Calculate a "power level" for the item based on rarity
const rarityMultiplier = {
  common: 1,
  rare: 1.5,
  mystic: 2,
  legendary: 3
};

// Format price
const formattedPrice = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD'
}).format(price);

// Get max stat if stats provided
const maxStat = stats ? Math.max(...Object.values(stats)) : 0;
---

<article class="item-card flow" data-rarity={rarity} data-id={id}>
  <div class="item-card__inner">
    <div class="item-card__image-container">
      <img src={image} alt={title} class="item-card__image" loading="lazy" />
      <div class="item-card__rarity-badge">
        <span class="item-card__rarity-icon"></span>
        <span class="item-card__rarity-name">{rarity}</span>
      </div>
    </div>

    <header class="item-card__header">
      <h3 class="item-card__title">{title}</h3>
      <div class="item-card__price">{formattedPrice}</div>
    </header>

    {description && (
      <div class="item-card__description">{description}</div>
    )}

    {stats && (
      <div class="item-card__stats">
        {Object.entries(stats).map(([key, value]) => (
          <div class="item-card__stat">
            <span class="item-card__stat-name">{key}</span>
            <div class="item-card__stat-bar">
              <div
                class="item-card__stat-fill"
                style={`width: ${value}%`}
                data-value={value}
              ></div>
            </div>
          </div>
        ))}
      </div>
    )}

    <div class="item-card__actions">
      <button class="item-card__action-button">
        Add to Cart
      </button>
      <button class="item-card__action-button item-card__action-button--secondary">
        Details
      </button>
    </div>
  </div>

  <!-- Legendary items get a shine effect -->
  {rarity === 'legendary' && <div class="item-card__shine"></div>}
</article>

<script define:vars={{ id, rarity }}>
  // Add 3D tilt effect on mousemove for this specific card
  document.addEventListener('DOMContentLoaded', () => {
    const card = document.querySelector(`.item-card[data-id="${id}"]`);
    if (!card) return;

    const inner = card.querySelector('.item-card__inner');
    const image = card.querySelector('.item-card__image');

    // Only add tilt effect for higher rarity items
    if (['rare', 'mystic', 'legendary'].includes(rarity)) {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left; // x position within the element
        const y = e.clientY - rect.top; // y position within the element

        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        // Calculate rotation based on mouse position
        // Limit rotation to small values for subtle effect
        const rotateY = ((x - centerX) / centerX) * 5; // max 5 degrees
        const rotateX = ((centerY - y) / centerY) * 5; // max 5 degrees

        // Apply the rotation
        inner.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;

        // Move the image slightly for parallax effect
        if (image) {
          const moveIntensity = rarity === 'legendary' ? 12 :
                                rarity === 'mystic' ? 8 : 5;
          image.style.transform = `translateX(${(x - centerX) / centerX * moveIntensity}px)
                                   translateY(${(y - centerY) / centerY * moveIntensity}px)`;
        }
      });

      // Reset transforms when mouse leaves
      card.addEventListener('mouseleave', () => {
        inner.style.transform = 'rotateX(0) rotateY(0)';
        if (image) {
          image.style.transform = 'translateX(0) translateY(0)';
        }
      });
    }
  });
</script>

<style>
  /* Base card styles */
  .item-card {
    --flow-space: 0.5rem;
    position: relative;
    width: 100%;
    max-width: 300px;
    aspect-ratio: 2/3;
    border-radius: var(--radius-card, 10px);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    perspective: 1000px;
    transform-style: preserve-3d;
    cursor: pointer;
    overflow: hidden;
  }

  .item-card__inner {
    position: relative;
    width: 100%;
    height: 100%;
    padding: var(--space-s, 0.75rem);
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-card, 10px);
    transform-style: preserve-3d;
    transition: transform 0.3s ease;
  }

  /* Image container and image */
  .item-card__image-container {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    overflow: hidden;
    border-radius: calc(var(--radius-card, 10px) - var(--space-xs, 0.5rem));
    margin-bottom: var(--space-s, 0.75rem);
  }

  .item-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  /* Rarity badge */
  .item-card__rarity-badge {
    position: absolute;
    top: var(--space-xs, 0.5rem);
    right: var(--space-xs, 0.5rem);
    display: flex;
    align-items: center;
    gap: var(--space-2xs, 0.25rem);
    padding: var(--space-2xs, 0.25rem) var(--space-xs, 0.5rem);
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    border-radius: var(--radius-full, 9999px);
    font-size: 0.75rem;
    text-transform: uppercase;
    font-weight: bold;
  }

  .item-card__rarity-icon {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  /* Title and price */
  .item-card__header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-xs, 0.5rem);
  }

  .item-card__title {
    font-size: var(--size-step-0, 1rem);
    font-weight: bold;
    text-transform: uppercase;
    margin: 0;
  }

  .item-card__price {
    font-family: var(--font-secondary, monospace);
    font-weight: bold;
  }

  /* Description */
  .item-card__description {
    font-size: var(--size-step-00, 0.875rem);
    margin-bottom: var(--space-s, 0.75rem);
    flex-grow: 1;
  }

  /* Stats */
  .item-card__stats {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs, 0.5rem);
    margin-bottom: var(--space-s, 0.75rem);
  }

  .item-card__stat {
    display: grid;
    grid-template-columns: 80px 1fr;
    align-items: center;
    gap: var(--space-s, 0.75rem);
  }

  .item-card__stat-name {
    font-size: 0.75rem;
    text-transform: capitalize;
  }

  .item-card__stat-bar {
    height: 6px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-full, 9999px);
    overflow: hidden;
  }

  .item-card__stat-fill {
    height: 100%;
    border-radius: var(--radius-full, 9999px);
    transition: width 1s ease;
  }

  /* Action buttons */
  .item-card__actions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-xs, 0.5rem);
    margin-top: auto;
  }

  .item-card__action-button {
    padding: var(--space-xs, 0.5rem);
    border: none;
    border-radius: var(--radius-button, 6px);
    font-size: 0.875rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .item-card__action-button:hover {
    transform: translateY(-2px);
  }

  .item-card__action-button--secondary {
    background-color: transparent;
    border: 1px solid;
  }

  /* Legendary shine effect */
  .item-card__shine {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 45%,
      rgba(255, 255, 255, 0.7) 50%,
      rgba(255, 255, 255, 0) 55%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: shinyEffect 6s infinite;
    pointer-events: none;
    z-index: 1;
  }

  @keyframes shinyEffect {
    0% {
      transform: rotate(30deg) translateX(-100%);
    }
    15%, 100% {
      transform: rotate(30deg) translateX(100%);
    }
  }

  /* Rarity styles - Common */
  .item-card[data-rarity="common"] {
    background: var(--card-bg-common, linear-gradient(135deg, #62728a 0%, #2e3b4f 100%));
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .item-card[data-rarity="common"] .item-card__rarity-icon {
    background-color: var(--color-rarity-common, #b0bec5);
  }

  .item-card[data-rarity="common"] .item-card__stat-fill {
    background-color: var(--color-rarity-common, #b0bec5);
  }

  .item-card[data-rarity="common"] .item-card__action-button {
    background-color: var(--color-rarity-common, #b0bec5);
    color: #000;
  }

  .item-card[data-rarity="common"] .item-card__action-button--secondary {
    background-color: transparent;
    color: var(--color-rarity-common, #b0bec5);
    border-color: var(--color-rarity-common, #b0bec5);
  }

  /* Rarity styles - Rare */
  .item-card[data-rarity="rare"] {
    background: var(--card-bg-rare, linear-gradient(135deg, #315a82 0%, #1a304d 100%));
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3),
                0 0 10px var(--color-rarity-rare, #64b5f6);
  }

  .item-card[data-rarity="rare"] .item-card__rarity-icon {
    background-color: var(--color-rarity-rare, #64b5f6);
  }

  .item-card[data-rarity="rare"] .item-card__stat-fill {
    background-color: var(--color-rarity-rare, #64b5f6);
  }

  .item-card[data-rarity="rare"] .item-card__action-button {
    background-color: var(--color-rarity-rare, #64b5f6);
    color: #000;
  }

  .item-card[data-rarity="rare"] .item-card__action-button--secondary {
    background-color: transparent;
    color: var(--color-rarity-rare, #64b5f6);
    border-color: var(--color-rarity-rare, #64b5f6);
  }

  /* Rarity styles - Mystic */
  .item-card[data-rarity="mystic"] {
    background: var(--card-bg-mystic, linear-gradient(135deg, #6b45a4 0%, #2e1d45 100%));
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.4),
                0 0 15px var(--color-rarity-mystic, #ce93d8);
  }

  .item-card[data-rarity="mystic"] .item-card__rarity-icon {
    background-color: var(--color-rarity-mystic, #ce93d8);
  }

  .item-card[data-rarity="mystic"] .item-card__stat-fill {
    background-color: var(--color-rarity-mystic, #ce93d8);
  }

  .item-card[data-rarity="mystic"] .item-card__action-button {
    background-color: var(--color-rarity-mystic, #ce93d8);
    color: #000;
  }

  .item-card[data-rarity="mystic"] .item-card__action-button--secondary {
    background-color: transparent;
    color: var(--color-rarity-mystic, #ce93d8);
    border-color: var(--color-rarity-mystic, #ce93d8);
  }

  /* Rarity styles - Legendary */
  .item-card[data-rarity="legendary"] {
    background: var(--card-bg-legendary, linear-gradient(135deg, #b4883b 0%, #5d4010 100%));
    box-shadow: 0 5px 30px rgba(0, 0, 0, 0.5),
                0 0 20px var(--color-rarity-legendary, #ffd54f);
    animation: legendaryPulse 2s infinite alternate;
  }

  .item-card[data-rarity="legendary"] .item-card__rarity-icon {
    background-color: var(--color-rarity-legendary, #ffd54f);
    animation: pulsate 1.5s infinite alternate;
  }

  .item-card[data-rarity="legendary"] .item-card__stat-fill {
    background-color: var(--color-rarity-legendary, #ffd54f);
    background-image: linear-gradient(45deg,
      rgba(255,255,255,0.2) 25%,
      transparent 25%,
      transparent 50%,
      rgba(255,255,255,0.2) 50%,
      rgba(255,255,255,0.2) 75%,
      transparent 75%,
      transparent
    );
    background-size: 20px 20px;
    animation: legendaryBarAnimation 1s linear infinite;
  }

  .item-card[data-rarity="legendary"] .item-card__action-button {
    background-color: var(--color-rarity-legendary, #ffd54f);
    color: #000;
  }

  .item-card[data-rarity="legendary"] .item-card__action-button--secondary {
    background-color: transparent;
    color: var(--color-rarity-legendary, #ffd54f);
    border-color: var(--color-rarity-legendary, #ffd54f);
  }

  @keyframes legendaryPulse {
    0% {
      box-shadow: 0 5px 30px rgba(0, 0, 0, 0.5),
                  0 0 20px var(--color-rarity-legendary, #ffd54f);
    }
    100% {
      box-shadow: 0 5px 40px rgba(0, 0, 0, 0.6),
                  0 0 30px var(--color-rarity-legendary, #ffd54f),
                  0 0 50px rgba(255, 213, 79, 0.4);
    }
  }

  @keyframes pulsate {
    0% { transform: scale(1); }
    100% { transform: scale(1.3); }
  }

  @keyframes legendaryBarAnimation {
    0% { background-position: 0 0; }
    100% { background-position: 20px 0; }
  }

  /* Hover effects */
  .item-card:hover {
    transform: translateY(-10px);
  }

  .item-card:hover .item-card__image {
    transform: scale(1.05);
  }
</style>

================
File: src/components/ParallaxHero.astro
================
---
/**
 * ParallaxHero.astro
 * Creates an immersive parallax hero section with multiple depth layers
 * that move at different speeds for a dynamic 3D effect.
 */

 interface Layer {
  image: string;
  depth: number;
  opacity?: number;
  position?: string;
}

interface Props {
  title: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  layers: Layer[];
  height?: string;
  class?: string;
  overlayOpacity?: number;
}

const {
  title,
  subtitle,
  ctaText,
  ctaLink = '/shop',
  layers = [],
  height = '80vh',
  class: className = '',
  overlayOpacity = 0.5
} = Astro.props;

// Generate unique ID for this parallax instance
const id = `parallax-hero-${Math.random().toString(36).substring(2, 9)}`;
---

<section id={id} class:list={["parallax-hero", className]} style={`height: ${height};`}>
  <!-- Parallax Layers -->
  {layers.map((layer, index) => (
    <div
      class="parallax-hero__layer"
      data-depth={layer.depth}
      style={`
        background-image: url(${layer.image});
        z-index: ${index};
        opacity: ${layer.opacity ?? 1};
        background-position: ${layer.position ?? 'center'};
      `}
    ></div>
  ))}

  <!-- Overlay to enhance text readability -->
  <div
    class="parallax-hero__overlay"
    style={`opacity: ${overlayOpacity};`}
  ></div>

  <!-- Hero Content -->
  <div class="parallax-hero__content">
    <h1 class="parallax-hero__title">{title}</h1>
    {subtitle && <p class="parallax-hero__subtitle">{subtitle}</p>}

    {ctaText && (
      <a href={ctaLink} class="parallax-hero__cta">
        {ctaText}
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="parallax-hero__cta-icon">
          <line x1="5" y1="12" x2="19" y2="12"></line>
          <polyline points="12 5 19 12 12 19"></polyline>
        </svg>
      </a>
    )}
  </div>
</section>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const parallaxContainer = document.getElementById(id);
    if (!parallaxContainer) return;

    const layers = parallaxContainer.querySelectorAll('.parallax-hero__layer');
    const content = parallaxContainer.querySelector('.parallax-hero__content');

    // Check if the user prefers reduced motion
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    if (prefersReducedMotion) {
      // Skip parallax effects for users who prefer reduced motion
      return;
    }

    // Apply parallax effect on scroll
    const handleParallax = () => {
      const scrollPosition = window.pageYOffset;
      const containerTop = parallaxContainer.offsetTop;
      const containerHeight = parallaxContainer.offsetHeight;

      // Only apply parallax when hero is in view
      if (scrollPosition >= containerTop - window.innerHeight &&
          scrollPosition <= containerTop + containerHeight) {

        // Calculate relative scroll position
        const relativeScroll = scrollPosition - containerTop;

        // Apply parallax to each layer
        layers.forEach(layer => {
          const depth = parseFloat(layer.dataset.depth || '0');
          const translateY = relativeScroll * depth * 0.15;
          layer.style.transform = `translateY(${translateY}px)`;
        });

        // Subtle effect on content
        if (content) {
          const contentTranslateY = relativeScroll * -0.1; // Content moves up slowly
          const contentOpacity = 1 - (relativeScroll / containerHeight) * 1.5;
          content.style.transform = `translateY(${contentTranslateY}px)`;
          content.style.opacity = Math.max(0, Math.min(1, contentOpacity));
        }
      }
    };

    // Apply parallax on mousemove for extra depth
    const handleMouseParallax = (e) => {
      const containerRect = parallaxContainer.getBoundingClientRect();

      // Check if mouse is over the container
      if (e.clientY >= containerRect.top &&
          e.clientY <= containerRect.bottom &&
          e.clientX >= containerRect.left &&
          e.clientX <= containerRect.right) {

        // Calculate mouse position relative to container center
        const centerX = containerRect.width / 2;
        const centerY = containerRect.height / 2;
        const mouseX = e.clientX - containerRect.left - centerX;
        const mouseY = e.clientY - containerRect.top - centerY;

        // Apply subtle parallax to each layer
        layers.forEach(layer => {
          const depth = parseFloat(layer.dataset.depth || '0');
          const translateX = mouseX * depth * -0.01; // Inverted for natural effect
          const translateY = mouseY * depth * -0.01;

          // Get existing transform from scroll parallax
          const existingTransform = layer.style.transform || '';

          // Extract any existing translateY value
          let existingTranslateY = 0;
          const match = existingTransform.match(/translateY\(([^)]+)\)/);
          if (match) {
            existingTranslateY = parseFloat(match[1]);
          }

          // Apply combined transform
          layer.style.transform = `translateY(${existingTranslateY}px) translateX(${translateX}px) translateY(${translateY}px)`;
        });

        // Subtle effect on content in opposite direction
        if (content) {
          const contentTranslateX = mouseX * 0.005;
          const contentTranslateY = mouseY * 0.005;

          // Get existing transform from scroll parallax
          const existingTransform = content.style.transform || '';

          // Extract any existing translateY value
          let existingTranslateY = 0;
          const match = existingTransform.match(/translateY\(([^)]+)\)/);
          if (match) {
            existingTranslateY = parseFloat(match[1]);
          }

          content.style.transform = `translateY(${existingTranslateY}px) translateX(${contentTranslateX}px) translateY(${contentTranslateY}px)`;
        }
      }
    };

    // Apply initial parallax
    handleParallax();

    // Add scroll event listener
    window.addEventListener('scroll', handleParallax, { passive: true });

    // Add mousemove event listener
    window.addEventListener('mousemove', handleMouseParallax, { passive: true });

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      window.removeEventListener('scroll', handleParallax);
      window.removeEventListener('mousemove', handleMouseParallax);
    });

    // Handle theme changes
    window.addEventListener('themeChanged', () => {
      // Re-apply parallax effect after theme change
      setTimeout(handleParallax, 50);
    });

    // Handle resize for responsive adjustments
    window.addEventListener('resize', handleParallax, { passive: true });
  });
</script>

<style>
  .parallax-hero {
    position: relative;
    width: 100%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-lg, 8px);
  }

  .parallax-hero__layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-repeat: no-repeat;
    will-change: transform;
    transition: transform 0.1s ease-out;
  }

  .parallax-hero__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      var(--theme-background, rgba(0, 0, 0, 0.5)) 0%,
      transparent 40%,
      transparent 60%,
      var(--theme-background, rgba(0, 0, 0, 0.5)) 100%
    );
    z-index: 5;
  }

  .parallax-hero__content {
    position: relative;
    z-index: 10;
    text-align: center;
    padding: var(--space-l);
    max-width: 800px;
    color: var(--theme-text-primary);
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    will-change: transform, opacity;
  }

  .parallax-hero__title {
    font-size: var(--size-step-5, 3rem);
    font-weight: bold;
    margin-bottom: var(--space-m);
    letter-spacing: 0.02em;
    text-transform: uppercase;
    font-family: var(--font-primary);
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    animation: hero-title-entry 1s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .parallax-hero__subtitle {
    font-size: var(--size-step-1, 1.25rem);
    font-weight: normal;
    margin-bottom: var(--space-xl);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    font-family: var(--font-secondary);
    line-height: 1.6;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    animation: hero-subtitle-entry 1s ease-out 0.2s forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .parallax-hero__cta {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    text-decoration: none;
    border-radius: var(--radius-button);
    font-weight: bold;
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all var(--transition-standard);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    animation: hero-cta-entry 1s ease-out 0.4s forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .parallax-hero__cta:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
  }

  .parallax-hero__cta-icon {
    transition: transform var(--transition-standard);
  }

  .parallax-hero__cta:hover .parallax-hero__cta-icon {
    transform: translateX(4px);
  }

  /* Entry animations */
  @keyframes hero-title-entry {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes hero-subtitle-entry {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 0.9;
      transform: translateY(0);
    }
  }

  @keyframes hero-cta-entry {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .parallax-hero__title {
      font-size: var(--size-step-4, 2.5rem);
    }

    .parallax-hero__subtitle {
      font-size: var(--size-step-0, 1rem);
    }
  }

  @media (max-width: 480px) {
    .parallax-hero__title {
      font-size: var(--size-step-3, 2rem);
    }

    .parallax-hero__content {
      padding: var(--space-m);
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .parallax-hero__layer {
      transition: none;
    }

    .parallax-hero__title,
    .parallax-hero__subtitle,
    .parallax-hero__cta {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>

================
File: src/components/ProductDetail.astro
================
---
/**
 * ProductDetail.astro
 * A detailed view of a single product with rarity-specific features and
 * effects. Includes 3D viewing, stats visualization, and related products.
 */

 import ItemCard from './ItemCard.astro';

interface Attribute {
  name: string;
  value: string;
}

interface Stats {
  [key: string]: number;
}

interface RelatedProduct {
  id: string;
  title: string;
  price: number;
  image: string;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
}

interface Props {
  id: string;
  title: string;
  price: number;
  originalPrice?: number;
  images: string[];
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
  description: string;
  longDescription?: string;
  attributes?: Attribute[];
  stats?: Stats;
  inStock?: boolean;
  stockCount?: number;
  relatedProducts?: RelatedProduct[];
  class?: string;
}

const {
  id,
  title,
  price,
  originalPrice,
  images,
  rarity,
  description,
  longDescription,
  attributes = [],
  stats = {},
  inStock = true,
  stockCount,
  relatedProducts = [],
  class: className = ''
} = Astro.props;

// Format price
const formattedPrice = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD'
}).format(price);

const formattedOriginalPrice = originalPrice
  ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(originalPrice)
  : null;

// Calculate discount percentage if original price exists
const discountPercentage = originalPrice
  ? Math.round(((originalPrice - price) / originalPrice) * 100)
  : null;

// Rarity information
const rarityInfo = {
  common: {
    label: "Common",
    description: "Quality essentials with reliable construction and performance."
  },
  rare: {
    label: "Rare",
    description: "Limited production runs with enhanced features and premium details."
  },
  mystic: {
    label: "Mystic",
    description: "Exclusive designs with advanced technology and superior craftsmanship."
  },
  legendary: {
    label: "Legendary",
    description: "Ultra-rare collector's items with unique features and exceptional quality."
  }
};
---

<section class:list={["product-detail", `product-detail--${rarity}`, className]}>
  <div class="product-detail__container">
    <!-- Product Gallery -->
    <div class="product-detail__gallery">
      <div class="product-detail__main-image-container">
        <img
          src={images[0]}
          alt={title}
          class="product-detail__main-image"
          id="main-product-image"
        />
        <div class="product-detail__rarity-badge" data-rarity={rarity}>
          <span class="product-detail__rarity-icon"></span>
          <span class="product-detail__rarity-name">{rarityInfo[rarity].label}</span>
        </div>

        {originalPrice && (
          <div class="product-detail__discount-badge">
            <span class="product-detail__discount-value">-{discountPercentage}%</span>
          </div>
        )}
      </div>

      {images.length > 1 && (
        <div class="product-detail__thumbnails">
          {images.map((image, index) => (
            <button
              class:list={[
                "product-detail__thumbnail-button",
                { "product-detail__thumbnail-button--active": index === 0 }
              ]}
              data-image={image}
              aria-label={`View image ${index + 1}`}
            >
              <img src={image} alt={`${title} - view ${index + 1}`} class="product-detail__thumbnail" />
            </button>
          ))}
        </div>
      )}

      <button class="product-detail__view-3d-button" id="view-3d-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
          <path d="M12 3l8 4.5v9L12 21l-8-4.5v-9L12 3z"/>
          <path d="M12 12l8-4.5M12 12v9M12 12L4 7.5"/>
        </svg>
        View in 3D
      </button>
    </div>

    <!-- Product Information -->
    <div class="product-detail__info">
      <div class="product-detail__header">
        <h1 class="product-detail__title">{title}</h1>

        <div class="product-detail__price-container">
          <div class="product-detail__price">{formattedPrice}</div>
          {formattedOriginalPrice && (
            <div class="product-detail__original-price">{formattedOriginalPrice}</div>
          )}
        </div>
      </div>

      <div class="product-detail__rarity-info">
        <div class="product-detail__rarity-label">Rarity:</div>
        <div class="product-detail__rarity-value" data-rarity={rarity}>
          {rarityInfo[rarity].label}
        </div>
        <div class="product-detail__rarity-description">
          {rarityInfo[rarity].description}
        </div>
      </div>

      <div class="product-detail__description">
        <p>{description}</p>
      </div>

      {longDescription && (
        <div class="product-detail__long-description">
          <div set:html={longDescription} />
        </div>
      )}

      <!-- Stats Visualization (if stats exist) -->
      {Object.keys(stats).length > 0 && (
        <div class="product-detail__stats">
          <h3 class="product-detail__stats-title">Item Stats</h3>
          <div class="product-detail__stats-grid">
            {Object.entries(stats).map(([key, value]) => (
              <div class="product-detail__stat">
                <div class="product-detail__stat-name">{key}</div>
                <div class="product-detail__stat-bar">
                  <div
                    class="product-detail__stat-fill"
                    style={`width: ${value}%`}
                    data-value={value}
                  ></div>
                  <span class="product-detail__stat-value">{value}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Attributes (if any) -->
      {attributes.length > 0 && (
        <div class="product-detail__attributes">
          <h3 class="product-detail__attributes-title">Specifications</h3>
          <div class="product-detail__attributes-grid">
            {attributes.map(attr => (
              <div class="product-detail__attribute">
                <div class="product-detail__attribute-name">{attr.name}</div>
                <div class="product-detail__attribute-value">{attr.value}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Add to Cart Section -->
      <div class="product-detail__actions">
        <div class="product-detail__quantity">
          <button class="product-detail__quantity-button" data-action="decrease">-</button>
          <input type="number" value="1" min="1" max={stockCount || 10} class="product-detail__quantity-input" />
          <button class="product-detail__quantity-button" data-action="increase">+</button>
        </div>

        <button
          class:list={[
            "product-detail__add-button",
            { "product-detail__add-button--disabled": !inStock }
          ]}
          disabled={!inStock}
          data-product-id={id}
        >
          {inStock ? 'Add to Inventory' : 'Out of Stock'}
          {inStock && (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
              <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <path d="M16 10a4 4 0 0 1-8 0"></path>
            </svg>
          )}
        </button>
      </div>

      <!-- Stock Information -->
      {stockCount && stockCount < 10 && (
        <div class="product-detail__stock-info">
          <div class="product-detail__stock-indicator"></div>
          <span>Only {stockCount} left in stock</span>
        </div>
      )}
    </div>
  </div>

  <!-- Related Products Section -->
  {relatedProducts.length > 0 && (
    <div class="product-detail__related">
      <h2 class="product-detail__related-title">Complete Your Setup</h2>
      <div class="product-detail__related-grid">
        {relatedProducts.map(product => (
          <ItemCard
            id={product.id}
            title={product.title}
            price={product.price}
            image={product.image}
            rarity={product.rarity}
          />
        ))}
      </div>
    </div>
  )}

  <!-- 3D Model Viewer Modal (hidden by default) -->
  <div class="product-detail__modal product-detail__model-viewer" id="model-viewer-modal">
    <div class="product-detail__modal-content">
      <button class="product-detail__modal-close">×</button>
      <h3 class="product-detail__modal-title">3D View - {title}</h3>
      <div class="product-detail__model-container">
        <div class="product-detail__model-placeholder">
          <!-- The 3D model would be loaded here -->
          <img src={images[0]} alt={title} class="product-detail__model-fallback" />
          <div class="product-detail__model-overlay">
            <p>Rotate and zoom to explore</p>
            <div class="product-detail__model-controls">
              <button class="product-detail__model-button" data-action="rotate-left">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="9 14 4 9 9 4"></polyline>
                  <path d="M20 20v-7a4 4 0 0 0-4-4H4"></path>
                </svg>
              </button>
              <button class="product-detail__model-button" data-action="rotate-right">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="15 4 20 9 15 14"></polyline>
                  <path d="M4 20v-7a4 4 0 0 1 4-4h12"></path>
                </svg>
              </button>
              <button class="product-detail__model-button" data-action="zoom-in">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="11" cy="11" r="8"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  <line x1="11" y1="8" x2="11" y2="14"></line>
                  <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
              </button>
              <button class="product-detail__model-button" data-action="zoom-out">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="11" cy="11" r="8"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ id, rarity }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Gallery image switching
    const mainImage = document.getElementById('main-product-image');
    const thumbnailButtons = document.querySelectorAll('.product-detail__thumbnail-button');

    thumbnailButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update main image
        if (mainImage) {
          mainImage.src = button.dataset.image;
        }

        // Update active thumbnail
        thumbnailButtons.forEach(btn => btn.classList.remove('product-detail__thumbnail-button--active'));
        button.classList.add('product-detail__thumbnail-button--active');
      });
    });

    // Quantity input handlers
    const quantityInput = document.querySelector('.product-detail__quantity-input');
    const decreaseButton = document.querySelector('[data-action="decrease"]');
    const increaseButton = document.querySelector('[data-action="increase"]');

    if (quantityInput && decreaseButton && increaseButton) {
      decreaseButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value, 10) || 1;
        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        }
      });

      increaseButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value, 10) || 1;
        const max = parseInt(quantityInput.max, 10) || 10;
        if (currentValue < max) {
          quantityInput.value = currentValue + 1;
        }
      });

      quantityInput.addEventListener('change', () => {
        const max = parseInt(quantityInput.max, 10) || 10;
        let value = parseInt(quantityInput.value, 10);

        if (isNaN(value) || value < 1) {
          value = 1;
        } else if (value > max) {
          value = max;
        }

        quantityInput.value = value;
      });
    }

    // 3D Model viewer modal
    const viewButton = document.getElementById('view-3d-button');
    const modelModal = document.getElementById('model-viewer-modal');
    const closeButton = modelModal?.querySelector('.product-detail__modal-close');

    if (viewButton && modelModal && closeButton) {
      viewButton.addEventListener('click', () => {
        modelModal.classList.add('product-detail__modal--active');
        document.body.classList.add('modal-open');
      });

      closeButton.addEventListener('click', () => {
        modelModal.classList.remove('product-detail__modal--active');
        document.body.classList.remove('modal-open');
      });

      // Close on outside click
      modelModal.addEventListener('click', (e) => {
        if (e.target === modelModal) {
          modelModal.classList.remove('product-detail__modal--active');
          document.body.classList.remove('modal-open');
        }
      });

      // Model controls (would connect to actual 3D model library in production)
      const modelButtons = document.querySelectorAll('.product-detail__model-button');

      modelButtons.forEach(button => {
        button.addEventListener('click', () => {
          const action = button.dataset.action;
          console.log(`3D model action: ${action}`);
          // Here you would implement actual 3D model interactions
        });
      });
    }

    // Add to cart handler
    const addButton = document.querySelector('.product-detail__add-button');

    if (addButton) {
      addButton.addEventListener('click', () => {
        // Get quantity
        const quantity = parseInt(quantityInput?.value || '1', 10);

        // Animation effect based on rarity
        addButton.classList.add('product-detail__add-button--adding');

        // Add rarity-specific effect
        let effectDuration = 1000;

        if (rarity === 'legendary') {
          effectDuration = 2000;
          addLegendaryEffect();
        } else if (rarity === 'mystic') {
          effectDuration = 1500;
          addMysticEffect();
        } else if (rarity === 'rare') {
          effectDuration = 1200;
          addRareEffect();
        } else {
          addCommonEffect();
        }

        // Reset button after animation
        setTimeout(() => {
          addButton.classList.remove('product-detail__add-button--adding');

          // Show success message
          showAddedToCartMessage();
        }, effectDuration);

        // Dispatch custom event for cart system
        const addToCartEvent = new CustomEvent('addToCart', {
          detail: {
            productId: id,
            quantity: quantity,
            rarity: rarity
          }
        });

        document.dispatchEvent(addToCartEvent);
      });
    }

    // Rarity-specific add to cart effects
    function addCommonEffect() {
      // Simple effect for common items
      const effect = document.createElement('div');
      effect.className = 'product-detail__add-effect product-detail__add-effect--common';
      addButton.appendChild(effect);

      setTimeout(() => {
        effect.remove();
      }, 1000);
    }

    function addRareEffect() {
      // Effect for rare items
      const effect = document.createElement('div');
      effect.className = 'product-detail__add-effect product-detail__add-effect--rare';
      addButton.appendChild(effect);

      // Create multiple particles
      for (let i = 0; i < 10; i++) {
        const particle = document.createElement('div');
        particle.className = 'product-detail__effect-particle';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.animationDuration = `${800 + Math.random() * 400}ms`;
        particle.style.animationDelay = `${Math.random() * 200}ms`;
        effect.appendChild(particle);
      }

      setTimeout(() => {
        effect.remove();
      }, 1200);
    }

    function addMysticEffect() {
      // Effect for mystic items
      const effect = document.createElement('div');
      effect.className = 'product-detail__add-effect product-detail__add-effect--mystic';
      addButton.appendChild(effect);

      // Create ring effect
      const ring = document.createElement('div');
      ring.className = 'product-detail__effect-ring';
      effect.appendChild(ring);

      // Create particles
      for (let i = 0; i < 15; i++) {
        const particle = document.createElement('div');
        particle.className = 'product-detail__effect-particle';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.animationDuration = `${800 + Math.random() * 700}ms`;
        particle.style.animationDelay = `${Math.random() * 300}ms`;
        effect.appendChild(particle);
      }

      setTimeout(() => {
        effect.remove();
      }, 1500);
    }

    function addLegendaryEffect() {
      // Epic effect for legendary items
      const effect = document.createElement('div');
      effect.className = 'product-detail__add-effect product-detail__add-effect--legendary';
      addButton.appendChild(effect);

      // Create multiple rings
      for (let i = 0; i < 3; i++) {
        const ring = document.createElement('div');
        ring.className = 'product-detail__effect-ring';
        ring.style.animationDelay = `${i * 150}ms`;
        effect.appendChild(ring);
      }

      // Create many particles
      for (let i = 0; i < 25; i++) {
        const particle = document.createElement('div');
        particle.className = 'product-detail__effect-particle';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.animationDuration = `${1000 + Math.random() * 1000}ms`;
        particle.style.animationDelay = `${Math.random() * 500}ms`;
        effect.appendChild(particle);
      }

      // Create a shine effect
      const shine = document.createElement('div');
      shine.className = 'product-detail__effect-shine';
      effect.appendChild(shine);

      setTimeout(() => {
        effect.remove();
      }, 2000);

      // Also add a brief screen flash effect for legendary items
      const flashEffect = document.createElement('div');
      flashEffect.className = 'product-detail__screen-flash';
      document.body.appendChild(flashEffect);

      setTimeout(() => {
        flashEffect.remove();
      }, 1000);
    }

    function showAddedToCartMessage() {
      // Create and show a success message
      const message = document.createElement('div');
      message.className = 'product-detail__add-message';

      // Add rarity class
      message.classList.add(`product-detail__add-message--${rarity}`);

      // Message content
      message.innerHTML = `
        <div class="product-detail__add-message-icon">✓</div>
        <div class="product-detail__add-message-text">
          <strong>Added to inventory!</strong>
          <span>Check your cart to equip it.</span>
        </div>
      `;

      // Add to page
      document.body.appendChild(message);

      // Animate in
      setTimeout(() => {
        message.classList.add('product-detail__add-message--visible');
      }, 10);

      // Auto remove after delay
      setTimeout(() => {
        message.classList.remove('product-detail__add-message--visible');

        // Remove from DOM after animation
        setTimeout(() => {
          message.remove();
        }, 300);
      }, 3000);
    }
  });
</script>

<style>
  .product-detail {
    margin: var(--space-2xl) 0;
  }

  .product-detail__container {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
  }

  @media (min-width: 768px) {
    .product-detail__container {
      grid-template-columns: 1fr 1fr;
    }
  }

  /* Gallery styles */
  .product-detail__gallery {
    position: relative;
  }

  .product-detail__main-image-container {
    position: relative;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    background-color: var(--theme-surface);
    aspect-ratio: 3/4;
  }

  .product-detail__main-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-standard);
  }

  .product-detail__main-image:hover {
    transform: scale(1.05);
  }

  .product-detail__thumbnails {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-s);
    margin-top: var(--space-m);
  }

  .product-detail__thumbnail-button {
    width: 80px;
    height: 80px;
    border: 2px solid transparent;
    border-radius: var(--radius-md);
    overflow: hidden;
    padding: 0;
    background: none;
    cursor: pointer;
    transition: all var(--transition-standard);
  }

  .product-detail__thumbnail-button:hover {
    transform: translateY(-3px);
  }

  .product-detail__thumbnail-button--active {
    border-color: var(--theme-primary);
  }

  .product-detail__thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-detail__view-3d-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
    padding: var(--space-s) var(--space-m);
    margin-top: var(--space-m);
    background-color: var(--theme-surface);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    font-family: var(--font-secondary);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-standard);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-detail__view-3d-button:hover {
    background-color: var(--theme-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Rarity badge */
  .product-detail__rarity-badge {
    position: absolute;
    top: var(--space-s);
    right: var(--space-s);
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-s);
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: var(--radius-full);
    backdrop-filter: blur(4px);
    font-size: 0.85rem;
    font-family: var(--font-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: bold;
  }

  .product-detail__rarity-icon {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
  }

  .product-detail__rarity-badge[data-rarity="common"] {
    color: var(--color-rarity-common);
  }

  .product-detail__rarity-badge[data-rarity="common"] .product-detail__rarity-icon {
    background-color: var(--color-rarity-common);
  }

  .product-detail__rarity-badge[data-rarity="rare"] {
    color: var(--color-rarity-rare);
  }

  .product-detail__rarity-badge[data-rarity="rare"] .product-detail__rarity-icon {
    background-color: var(--color-rarity-rare);
    box-shadow: 0 0 5px var(--color-rarity-rare);
  }

  .product-detail__rarity-badge[data-rarity="mystic"] {
    color: var(--color-rarity-mystic);
  }

  .product-detail__rarity-badge[data-rarity="mystic"] .product-detail__rarity-icon {
    background-color: var(--color-rarity-mystic);
    box-shadow: 0 0 8px var(--color-rarity-mystic);
  }

  .product-detail__rarity-badge[data-rarity="legendary"] {
    color: var(--color-rarity-legendary);
  }

  .product-detail__rarity-badge[data-rarity="legendary"] .product-detail__rarity-icon {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 12px var(--color-rarity-legendary);
    animation: pulse 2s infinite alternate;
  }

  /* Discount badge */
  .product-detail__discount-badge {
    position: absolute;
    top: var(--space-s);
    left: var(--space-s);
    background-color: var(--theme-primary);
    color: white;
    padding: var(--space-xs) var(--space-s);
    border-radius: var(--radius-full);
    font-weight: bold;
    font-size: 0.85rem;
  }

  /* Product info styles */
  .product-detail__header {
    margin-bottom: var(--space-l);
  }

  .product-detail__title {
    font-size: var(--size-step-3);
    margin-bottom: var(--space-s);
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.02em;
  }

  .product-detail__price-container {
    display: flex;
    align-items: center;
    gap: var(--space-s);
  }

  .product-detail__price {
    font-size: var(--size-step-2);
    font-weight: bold;
    color: var(--theme-text-primary);
  }

  .product-detail__original-price {
    font-size: var(--size-step-1);
    text-decoration: line-through;
    color: var(--theme-text-secondary);
    opacity: 0.7;
  }

  .product-detail__rarity-info {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: var(--space-xs) var(--space-m);
    margin-bottom: var(--space-l);
    padding: var(--space-s) var(--space-m);
    background-color: var(--theme-surface);
    border-radius: var(--radius-md);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-detail__rarity-label {
    font-family: var(--font-secondary);
    font-weight: bold;
    color: var(--theme-text-secondary);
  }

  .product-detail__rarity-value {
    font-weight: bold;
    font-family: var(--font-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-detail__rarity-value[data-rarity="common"] {
    color: var(--color-rarity-common);
  }

  .product-detail__rarity-value[data-rarity="rare"] {
    color: var(--color-rarity-rare);
  }

  .product-detail__rarity-value[data-rarity="mystic"] {
    color: var(--color-rarity-mystic);
  }

  .product-detail__rarity-value[data-rarity="legendary"] {
    color: var(--color-rarity-legendary);
  }

  .product-detail__rarity-description {
    grid-column: 1 / -1;
    color: var(--theme-text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .product-detail__description {
    margin-bottom: var(--space-l);
    color: var(--theme-text-primary);
    line-height: 1.6;
  }

  .product-detail__long-description {
    margin-bottom: var(--space-l);
    color: var(--theme-text-secondary);
    line-height: 1.6;
  }

  /* Stats styles */
  .product-detail__stats {
    margin-bottom: var(--space-l);
    padding: var(--space-m);
    background-color: var(--theme-surface);
    border-radius: var(--radius-md);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-detail__stats-title {
    font-size: var(--size-step-1);
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
    font-family: var(--font-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-detail__stats-grid {
    display: grid;
    gap: var(--space-m);
  }

  .product-detail__stat {
    display: grid;
    grid-template-columns: 100px 1fr;
    align-items: center;
    gap: var(--space-s);
  }

  .product-detail__stat-name {
    text-transform: capitalize;
    font-family: var(--font-secondary);
    color: var(--theme-text-secondary);
  }

  .product-detail__stat-bar {
    height: 8px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-full);
    overflow: hidden;
    position: relative;
  }

  .product-detail__stat-fill {
    height: 100%;
    border-radius: var(--radius-full);
    animation: statFillAnimation 1.5s ease-out forwards;
    transform-origin: left;
    transform: scaleX(0);
  }

  .product-detail--common .product-detail__stat-fill {
    background-color: var(--color-rarity-common);
  }

  .product-detail--rare .product-detail__stat-fill {
    background-color: var(--color-rarity-rare);
  }

  .product-detail--mystic .product-detail__stat-fill {
    background-color: var(--color-rarity-mystic);
  }

  .product-detail--legendary .product-detail__stat-fill {
    background-color: var(--color-rarity-legendary);
    background-image: linear-gradient(45deg,
      rgba(255,255,255,0.2) 25%,
      transparent 25%,
      transparent 50%,
      rgba(255,255,255,0.2) 50%,
      rgba(255,255,255,0.2) 75%,
      transparent 75%,
      transparent
    );
    background-size: 20px 20px;
    animation: statFillAnimation 1.5s ease-out forwards, legendaryBarAnimation 1s linear infinite;
  }

  .product-detail__stat-value {
    position: absolute;
    right: var(--space-xs);
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.75rem;
    font-weight: bold;
    color: white;
  }

  /* Attributes styles */
  .product-detail__attributes {
    margin-bottom: var(--space-l);
    padding: var(--space-m);
    background-color: var(--theme-surface);
    border-radius: var(--radius-md);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-detail__attributes-title {
    font-size: var(--size-step-1);
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
    font-family: var(--font-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-detail__attributes-grid {
    display: grid;
    gap: var(--space-s);
  }

  .product-detail__attribute {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-s);
    padding-bottom: var(--space-xs);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .product-detail__attribute-name {
    color: var(--theme-text-secondary);
    font-family: var(--font-secondary);
  }

  .product-detail__attribute-value {
    color: var(--theme-text-primary);
    font-weight: 500;
  }

  /* Add to cart section */
  .product-detail__actions {
    display: flex;
    gap: var(--space-m);
    margin-bottom: var(--space-l);
  }

  .product-detail__quantity {
    display: flex;
    align-items: center;
    border-radius: var(--radius-button);
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
  }

  .product-detail__quantity-button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--theme-text-primary);
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    transition: background-color var(--transition-standard);
  }

  .product-detail__quantity-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .product-detail__quantity-input {
    width: 50px;
    height: 40px;
    text-align: center;
    border: none;
    background: none;
    color: var(--theme-text-primary);
    font-family: var(--font-secondary);
    -moz-appearance: textfield;
  }

  .product-detail__quantity-input::-webkit-inner-spin-button,
  .product-detail__quantity-input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .product-detail__add-button {
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-s);
    padding: var(--space-s) var(--space-l);
    font-family: var(--font-primary);
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border: none;
    border-radius: var(--radius-button);
    cursor: pointer;
    transition: all var(--transition-standard);
    position: relative;
    overflow: hidden;
  }

  .product-detail--common .product-detail__add-button {
    background-color: var(--color-rarity-common);
    color: #000;
  }

  .product-detail--rare .product-detail__add-button {
    background-color: var(--color-rarity-rare);
    color: #000;
  }

  .product-detail--mystic .product-detail__add-button {
    background-color: var(--color-rarity-mystic);
    color: #000;
  }

  .product-detail--legendary .product-detail__add-button {
    background-color: var(--color-rarity-legendary);
    color: #000;
  }

  .product-detail__add-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
  }

  .product-detail__add-button--disabled {
    background-color: rgba(255, 255, 255, 0.2) !important;
    color: var(--theme-text-secondary) !important;
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
  }

  .product-detail__add-button--adding {
    pointer-events: none;
  }

  /* Stock information */
  .product-detail__stock-info {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    color: var(--theme-text-secondary);
    font-size: 0.9rem;
    margin-bottom: var(--space-l);
  }

  .product-detail__stock-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: rgba(255, 87, 34, 0.8);
    animation: pulse 2s infinite alternate;
  }

  /* Related products */
  .product-detail__related {
    margin-top: var(--space-3xl);
  }

  .product-detail__related-title {
    font-size: var(--size-step-2);
    margin-bottom: var(--space-xl);
    color: var(--theme-text-primary);
    text-align: center;
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-detail__related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: var(--space-xl);
  }

  /* 3D Model Viewer Modal */
  .product-detail__modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: var(--z-modal);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all var(--transition-standard);
    backdrop-filter: blur(5px);
  }

  .product-detail__modal--active {
    opacity: 1;
    visibility: visible;
  }

  .product-detail__modal-content {
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    background-color: var(--theme-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-l);
    position: relative;
    overflow: hidden;
    backdrop-filter: var(--card-backdrop-filter);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.4);
  }

  .product-detail__modal-close {
    position: absolute;
    top: var(--space-s);
    right: var(--space-s);
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: var(--theme-text-primary);
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-standard);
    z-index: 1;
  }

  .product-detail__modal-close:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  .product-detail__modal-title {
    font-size: var(--size-step-1);
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
    text-align: center;
  }

  .product-detail__model-container {
    width: 100%;
    height: 500px;
    max-height: 70vh;
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: var(--radius-md);
    position: relative;
    overflow: hidden;
  }

  .product-detail__model-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .product-detail__model-fallback {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .product-detail__model-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
  }

  .product-detail__model-controls {
    display: flex;
    gap: var(--space-s);
    margin-top: var(--space-m);
  }

  .product-detail__model-button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-standard);
  }

  .product-detail__model-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  /* Add to cart effects */
  .product-detail__add-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: var(--radius-button);
    overflow: hidden;
    pointer-events: none;
  }

  .product-detail__add-effect--common {
    background-color: var(--color-rarity-common);
    animation: addEffectPulse 1s ease-out;
  }

  .product-detail__add-effect--rare {
    background-color: var(--color-rarity-rare);
    animation: addEffectPulse 1.2s ease-out;
  }

  .product-detail__add-effect--mystic {
    background-color: var(--color-rarity-mystic);
    animation: addEffectPulse 1.5s ease-out;
  }

  .product-detail__add-effect--legendary {
    background-color: var(--color-rarity-legendary);
    animation: addEffectPulse 2s ease-out;
  }

  .product-detail__effect-particle {
    position: absolute;
    width: 6px;
    height: 6px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    bottom: 0;
    animation: particleEffect 1s ease-out forwards;
  }

  .product-detail__effect-ring {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 100%;
    height: 100%;
    border: 2px solid white;
    border-radius: 50%;
    animation: ringEffect 1.5s ease-out forwards;
  }

  .product-detail__effect-shine {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 45%,
      rgba(255, 255, 255, 0.7) 50%,
      rgba(255, 255, 255, 0) 55%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg) translateX(-100%);
    animation: shineEffect 2s ease-out forwards;
  }

  .product-detail__screen-flash {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 213, 79, 0.2);
    z-index: var(--z-overlay);
    pointer-events: none;
    animation: screenFlash 1s ease-out forwards;
  }

  /* Add to cart success message */
  .product-detail__add-message {
    position: fixed;
    bottom: 30px;
    right: 30px;
    display: flex;
    align-items: center;
    gap: var(--space-m);
    padding: var(--space-m);
    background-color: var(--theme-surface);
    border-radius: var(--radius-md);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    backdrop-filter: var(--card-backdrop-filter);
    color: var(--theme-text-primary);
    transform: translateY(100px);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: var(--z-toast);
  }

  .product-detail__add-message--visible {
    transform: translateY(0);
    opacity: 1;
  }

  .product-detail__add-message--common {
    border-left: 4px solid var(--color-rarity-common);
  }

  .product-detail__add-message--rare {
    border-left: 4px solid var(--color-rarity-rare);
  }

  .product-detail__add-message--mystic {
    border-left: 4px solid var(--color-rarity-mystic);
  }

  .product-detail__add-message--legendary {
    border-left: 4px solid var(--color-rarity-legendary);
  }

  .product-detail__add-message-icon {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: var(--theme-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }

  .product-detail__add-message--common .product-detail__add-message-icon {
    background-color: var(--color-rarity-common);
    color: #000;
  }

  .product-detail__add-message--rare .product-detail__add-message-icon {
    background-color: var(--color-rarity-rare);
    color: #000;
  }

  .product-detail__add-message--mystic .product-detail__add-message-icon {
    background-color: var(--color-rarity-mystic);
    color: #000;
  }

  .product-detail__add-message--legendary .product-detail__add-message-icon {
    background-color: var(--color-rarity-legendary);
    color: #000;
    animation: pulse 2s infinite alternate;
  }

  .product-detail__add-message-text {
    display: flex;
    flex-direction: column;
  }

  .product-detail__add-message-text strong {
    margin-bottom: var(--space-2xs);
  }

  .product-detail__add-message-text span {
    font-size: 0.85rem;
    color: var(--theme-text-secondary);
  }

  /* Animations */
  @keyframes pulse {
    0% { transform: scale(1); opacity: 0.8; }
    100% { transform: scale(1.5); opacity: 1; }
  }

  @keyframes statFillAnimation {
    0% { transform: scaleX(0); }
    100% { transform: scaleX(1); }
  }

  @keyframes legendaryBarAnimation {
    0% { background-position: 0 0; }
    100% { background-position: 20px 0; }
  }

  @keyframes addEffectPulse {
    0% { opacity: 0.8; }
    100% { opacity: 0; }
  }

  @keyframes particleEffect {
    0% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) scale(0);
      opacity: 0;
    }
  }

  @keyframes ringEffect {
    0% {
      transform: translate(-50%, -50%) scale(0);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(2);
      opacity: 0;
    }
  }

  @keyframes shineEffect {
    0% {
      transform: rotate(30deg) translateX(-100%);
      opacity: 0;
    }
    25% {
      opacity: 1;
    }
    50% {
      transform: rotate(30deg) translateX(100%);
      opacity: 0;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes screenFlash {
    0% { opacity: 0; }
    10% { opacity: 1; }
    100% { opacity: 0; }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .product-detail__title {
      font-size: var(--size-step-2);
    }

    .product-detail__actions {
      flex-direction: column;
    }

    .product-detail__quantity {
      width: 100%;
    }

    .product-detail__quantity-input {
      flex-grow: 1;
    }

    .product-detail__related-grid {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .product-detail__stat-fill {
      animation: none;
      transform: none;
    }

    .product-detail--legendary .product-detail__stat-fill {
      animation: none;
    }

    .product-detail__rarity-badge[data-rarity="legendary"] .product-detail__rarity-icon,
    .product-detail__stock-indicator {
      animation: none;
    }

    .product-detail__add-message--legendary .product-detail__add-message-icon {
      animation: none;
    }
  }
</style>

================
File: src/components/ProductGrid.astro
================
---
/**
 * ProductGrid.astro
 * A component to display a grid of product items with 3D stack motion effects
 * and filtering capabilities by category and rarity.
 */

 import ItemCard from './ItemCard.astro';
import StackMotion from './StackMotion.astro';

interface Product {
  id: string;
  title: string;
  price: number;
  image: string;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
  category: string;
  description?: string;
  stats?: Record<string, number>;
}

interface Props {
  products: Product[];
  title?: string;
  useStackMotion?: boolean;
  showFilters?: boolean;
  initialCategory?: string;
  class?: string;
}

const {
  products,
  title,
  useStackMotion = true,
  showFilters = true,
  initialCategory = 'all',
  class: className = ''
} = Astro.props;

// Get unique categories from products
const categories = ['all', ...new Set(products.map(product => product.category))];

// Get rarities used in these products
const rarities = [...new Set(products.map(product => product.rarity))];

// Sort rarities by value
const rarityOrder = {
  'common': 0,
  'rare': 1,
  'mystic': 2,
  'legendary': 3
};

const sortedRarities = rarities.sort((a, b) =>
  rarityOrder[a as keyof typeof rarityOrder] - rarityOrder[b as keyof typeof rarityOrder]
);

const gridId = `product-grid-${Math.random().toString(36).substring(2, 9)}`;
---

<section class:list={["product-section", className]}>
  {title && <h2 class="product-section__title">{title}</h2>}

  {showFilters && (
    <div class="product-filters">
      <div class="product-filters__categories">
        {categories.map(category => (
          <button
            class:list={[
              "product-filters__button",
              { "product-filters__button--active": category === initialCategory }
            ]}
            data-category={category}
            data-filter-type="category"
          >
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>

      <div class="product-filters__rarities">
        {sortedRarities.map(rarity => (
          <button
            class:list={[
              "product-filters__button",
              "product-filters__button--rarity",
              `product-filters__button--${rarity}`
            ]}
            data-rarity={rarity}
            data-filter-type="rarity"
          >
            <span class="product-filters__rarity-icon"></span>
            {rarity.charAt(0).toUpperCase() + rarity.slice(1)}
          </button>
        ))}
      </div>
    </div>
  )}

  {useStackMotion ? (
    <StackMotion id={gridId} itemSelector=".product-grid__item" perspective={1200} maxTilt={8}>
      <div id={gridId} class="product-grid">
        {products.map(product => (
          <div class="product-grid__item stack__item" data-category={product.category} data-rarity={product.rarity}>
            <ItemCard
              id={product.id}
              title={product.title}
              price={product.price}
              image={product.image}
              rarity={product.rarity}
              description={product.description}
              stats={product.stats}
            />
          </div>
        ))}
      </div>
    </StackMotion>
  ) : (
    <div id={gridId} class="product-grid">
      {products.map(product => (
        <div class="product-grid__item" data-category={product.category} data-rarity={product.rarity}>
          <ItemCard
            id={product.id}
            title={product.title}
            price={product.price}
            image={product.image}
            rarity={product.rarity}
            description={product.description}
            stats={product.stats}
          />
        </div>
      ))}
    </div>
  )}

  <div class="product-grid__empty" style="display: none;">
    <p>No products match the selected filters.</p>
    <button class="product-grid__reset-button">Reset Filters</button>
  </div>
</section>

<script define:vars={{ gridId, initialCategory }}>
  document.addEventListener('DOMContentLoaded', () => {
    const gridElement = document.getElementById(gridId);
    if (!gridElement) return;

    const filterButtons = document.querySelectorAll('.product-filters__button');
    const gridItems = gridElement.querySelectorAll('.product-grid__item');
    const emptyMessage = document.querySelector('.product-grid__empty');
    const resetButton = document.querySelector('.product-grid__reset-button');

    // Filter state
    const activeFilters = {
      category: initialCategory,
      rarity: null
    };

    // Filter products based on active filters
    const filterProducts = () => {
      let visibleCount = 0;

      gridItems.forEach(item => {
        const matchesCategory = activeFilters.category === 'all' ||
                               item.dataset.category === activeFilters.category;
        const matchesRarity = activeFilters.rarity === null ||
                              item.dataset.rarity === activeFilters.rarity;

        if (matchesCategory && matchesRarity) {
          item.style.display = '';
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });

      // Show/hide empty message
      if (emptyMessage) {
        emptyMessage.style.display = visibleCount > 0 ? 'none' : 'block';
      }

      // If stack motion is enabled, trigger a reflow
      if (typeof window.updateStackEffect === 'function') {
        setTimeout(() => window.updateStackEffect(), 50);
      }
    };

    // Set active filter buttons
    const updateFilterButtons = () => {
      // Reset all buttons
      filterButtons.forEach(button => {
        const filterType = button.dataset.filterType;

        if (filterType === 'category') {
          button.classList.toggle('product-filters__button--active',
            button.dataset.category === activeFilters.category);
        } else if (filterType === 'rarity') {
          button.classList.toggle('product-filters__button--active',
            button.dataset.rarity === activeFilters.rarity);
        }
      });
    };

    // Handle filter button clicks
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filterType = button.dataset.filterType;

        if (filterType === 'category') {
          // Toggle only among category filters
          activeFilters.category = button.dataset.category;
        } else if (filterType === 'rarity') {
          // Toggle rarity filter on/off
          activeFilters.rarity = activeFilters.rarity === button.dataset.rarity ?
                                null : button.dataset.rarity;
        }

        updateFilterButtons();
        filterProducts();
      });
    });

    // Reset filters
    if (resetButton) {
      resetButton.addEventListener('click', () => {
        activeFilters.category = 'all';
        activeFilters.rarity = null;
        updateFilterButtons();
        filterProducts();
      });
    }

    // Apply initial filters
    filterProducts();

    // Handle theme changes by refreshing the filter display
    window.addEventListener('themeChanged', () => {
      // Allow time for CSS transitions
      setTimeout(() => {
        updateFilterButtons();
      }, 100);
    });
  });
</script>

<style>
  .product-section {
    margin: var(--space-3xl) 0;
  }

  .product-section__title {
    font-size: var(--size-step-3);
    margin-bottom: var(--space-xl);
    text-align: center;
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    position: relative;
    display: inline-block;
    left: 50%;
    transform: translateX(-50%);
  }

  .product-section__title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--theme-accent);
    transform: scaleX(0.6);
    transform-origin: center;
    transition: transform var(--transition-standard);
  }

  .product-section:hover .product-section__title::after {
    transform: scaleX(1);
  }

  /* Filters */
  .product-filters {
    display: flex;
    flex-direction: column;
    gap: var(--space-l);
    margin-bottom: var(--space-2xl);
  }

  .product-filters__categories,
  .product-filters__rarities {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: var(--space-s);
  }

  .product-filters__button {
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-surface);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    cursor: pointer;
    font-family: var(--font-secondary);
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all var(--transition-standard);
    backdrop-filter: blur(5px);
  }

  .product-filters__button:hover {
    background-color: var(--theme-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .product-filters__button--active {
    background-color: var(--theme-primary);
    box-shadow: 0 0 10px var(--theme-primary);
  }

  /* Rarity filter buttons */
  .product-filters__button--rarity {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .product-filters__rarity-icon {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .product-filters__button--common .product-filters__rarity-icon {
    background-color: var(--color-rarity-common);
  }

  .product-filters__button--rare .product-filters__rarity-icon {
    background-color: var(--color-rarity-rare);
  }

  .product-filters__button--mystic .product-filters__rarity-icon {
    background-color: var(--color-rarity-mystic);
  }

  .product-filters__button--legendary .product-filters__rarity-icon {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 5px var(--color-rarity-legendary);
    animation: rarity-pulse 2s infinite alternate;
  }

  /* Product grid */
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: var(--space-xl);
    position: relative;
  }

  .product-grid__item {
    display: flex;
    justify-content: center;
  }

  /* Empty state */
  .product-grid__empty {
    text-align: center;
    padding: var(--space-xl);
    background-color: var(--theme-surface);
    border-radius: var(--radius-lg);
    margin-top: var(--space-xl);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .product-grid__reset-button {
    margin-top: var(--space-m);
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    cursor: pointer;
    font-family: var(--font-primary);
    font-weight: 600;
    transition: all var(--transition-standard);
  }

  .product-grid__reset-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Animations */
  @keyframes rarity-pulse {
    0% { transform: scale(1); }
    100% { transform: scale(1.3); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .product-filters {
      gap: var(--space-m);
    }

    .product-filters__button {
      padding: var(--space-xs) var(--space-m);
      font-size: 0.8rem;
    }

    .product-grid {
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: var(--space-l);
    }

    .product-section__title {
      font-size: var(--size-step-2);
    }
  }

  @media (max-width: 480px) {
    .product-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: var(--space-m);
    }
  }
</style>

================
File: src/components/ShoppingCart.astro
================
---
/**
 * ShoppingCart.astro
 * A game-like shopping cart interface that displays products as inventory items
 * with special effects and transitions based on rarity.
 */

 interface CartItem {
  id: string;
  title: string;
  price: number;
  image: string;
  quantity: number;
  rarity: 'common' | 'rare' | 'mystic' | 'legendary';
}

interface Props {
  items?: CartItem[];
  isOpen?: boolean;
  class?: string;
}

const {
  items = [],
  isOpen = false,
  class: className = ''
} = Astro.props;

// Calculate totals
const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
const tax = subtotal * 0.08; // Example tax rate of 8%
const shipping = subtotal > 0 ? 4.99 : 0;
const total = subtotal + tax + shipping;

// Format currency
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
};

// Determine if cart has any legendary items
const hasLegendaryItems = items.some(item => item.rarity === 'legendary');

// Get highest rarity in cart
const getRarityValue = (rarity: string) => {
  switch (rarity) {
    case 'legendary': return 4;
    case 'mystic': return 3;
    case 'rare': return 2;
    case 'common':
    default: return 1;
  }
};

const highestRarity = items.length > 0
  ? items.reduce((highest, item) => {
      const itemRarityValue = getRarityValue(item.rarity);
      return itemRarityValue > getRarityValue(highest) ? item.rarity : highest;
    }, 'common')
  : 'common';

// Generate unique ID for this cart instance
const cartId = 'cart-' + Math.random().toString(36).substring(2, 9);
---

<div
  id={cartId}
  class:list={[
    'shopping-cart',
    { 'shopping-cart--open': isOpen },
    `shopping-cart--rarity-${highestRarity}`,
    className
  ]}
  aria-hidden={!isOpen}
>
  <div class="shopping-cart__backdrop"></div>

  <div class="shopping-cart__container">
    <div class="shopping-cart__header">
      <h2 class="shopping-cart__title">Your Inventory</h2>
      <button class="shopping-cart__close-button" aria-label="Close cart">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <div class="shopping-cart__body">
      {items.length > 0 ? (
        <div class="shopping-cart__items">
          {items.map((item, index) => (
            <div
              class:list={[
                'shopping-cart__item',
                `shopping-cart__item--${item.rarity}`
              ]}
              data-item-id={item.id}
              data-rarity={item.rarity}
              style={`--item-index: ${index};`}
            >
              <div class="shopping-cart__item-image-container">
                <img src={item.image} alt={item.title} class="shopping-cart__item-image" />
                <div class="shopping-cart__item-rarity-badge">
                  <span class="shopping-cart__item-rarity-icon"></span>
                  <span class="shopping-cart__item-rarity-label">{item.rarity}</span>
                </div>
              </div>

              <div class="shopping-cart__item-details">
                <h3 class="shopping-cart__item-title">{item.title}</h3>
                <div class="shopping-cart__item-price">{formatCurrency(item.price)}</div>

                <div class="shopping-cart__item-quantity">
                  <button
                    class="shopping-cart__quantity-button"
                    data-action="decrease"
                    data-item-id={item.id}
                    aria-label="Decrease quantity"
                  >
                    -
                  </button>
                  <span class="shopping-cart__quantity-value">{item.quantity}</span>
                  <button
                    class="shopping-cart__quantity-button"
                    data-action="increase"
                    data-item-id={item.id}
                    aria-label="Increase quantity"
                  >
                    +
                  </button>
                </div>
              </div>

              <div class="shopping-cart__item-subtotal">
                <span class="shopping-cart__item-subtotal-label">Subtotal:</span>
                <span class="shopping-cart__item-subtotal-value">
                  {formatCurrency(item.price * item.quantity)}
                </span>
              </div>

              <button
                class="shopping-cart__item-remove"
                data-item-id={item.id}
                aria-label="Remove item"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                  <polyline points="3 6 5 6 21 6"></polyline>
                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  <line x1="10" y1="11" x2="10" y2="17"></line>
                  <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
              </button>

              {/* Special effect for legendary items */}
              {item.rarity === 'legendary' && (
                <div class="shopping-cart__item-legendary-effect"></div>
              )}
            </div>
          ))}
        </div>

        <div class="shopping-cart__summary">
          <div class="shopping-cart__summary-row">
            <span>Subtotal</span>
            <span>{formatCurrency(subtotal)}</span>
          </div>
          <div class="shopping-cart__summary-row">
            <span>Tax</span>
            <span>{formatCurrency(tax)}</span>
          </div>
          <div class="shopping-cart__summary-row">
            <span>Shipping</span>
            <span>{formatCurrency(shipping)}</span>
          </div>
          <div class="shopping-cart__summary-row shopping-cart__summary-row--total">
            <span>Total</span>
            <span>{formatCurrency(total)}</span>
          </div>

          <div class="shopping-cart__rarity-bonus">
            {highestRarity !== 'common' && (
              <div class="shopping-cart__rarity-bonus-message">
                <div class="shopping-cart__rarity-bonus-icon" data-rarity={highestRarity}></div>
                <div class="shopping-cart__rarity-bonus-text">
                  {highestRarity === 'legendary' ? (
                    'Legendary item bonus: Free shipping'
                  ) : highestRarity === 'mystic' ? (
                    'Mystic item bonus: 10% off next purchase'
                  ) : (
                    'Rare item bonus: Special sticker pack'
                  )}
                </div>
              </div>
            )}
          </div>

          <button class="shopping-cart__checkout-button">
            Proceed to Checkout
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
              <line x1="5" y1="12" x2="19" y2="12"></line>
              <polyline points="12 5 19 12 12 19"></polyline>
            </svg>
          </button>
        </div>
      ) : (
        <div class="shopping-cart__empty">
          <div class="shopping-cart__empty-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <path d="M16 10a4 4 0 0 1-8 0"></path>
            </svg>
          </div>
          <h3 class="shopping-cart__empty-title">Your inventory is empty</h3>
          <p class="shopping-cart__empty-text">Discover unique items and add them to your collection</p>
          <button class="shopping-cart__continue-button">
            Continue Shopping
          </button>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  class ShoppingCart {
    cartElement: HTMLElement | null;
    items: any[] = [];

    constructor(cartId: string) {
      this.cartElement = document.getElementById(cartId);

      if (!this.cartElement) return;

      this.init();
    }

    init() {
      this.setupEventListeners();
      this.loadCartFromStorage();
      this.updateCartUI();

      // Setup cart item entrance animation
      this.animateCartItems();
    }

    setupEventListeners() {
      if (!this.cartElement) return;

      // Close cart button
      const closeButton = this.cartElement.querySelector('.shopping-cart__close-button');
      if (closeButton) {
        closeButton.addEventListener('click', () => this.closeCart());
      }

      // Click outside to close
      const backdrop = this.cartElement.querySelector('.shopping-cart__backdrop');
      if (backdrop) {
        backdrop.addEventListener('click', () => this.closeCart());
      }

      // Continue shopping button
      const continueButton = this.cartElement.querySelector('.shopping-cart__continue-button');
      if (continueButton) {
        continueButton.addEventListener('click', () => this.closeCart());
      }

      // Item quantity buttons
      this.cartElement.querySelectorAll('.shopping-cart__quantity-button').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement;
          const itemId = target.dataset.itemId;
          const action = target.dataset.action;

          if (itemId && action) {
            if (action === 'increase') {
              this.updateItemQuantity(itemId, 1);
            } else if (action === 'decrease') {
              this.updateItemQuantity(itemId, -1);
            }
          }
        });
      });

      // Remove item buttons
      this.cartElement.querySelectorAll('.shopping-cart__item-remove').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement;
          const itemId = target.dataset.itemId;

          if (itemId) {
            this.removeItem(itemId);
          }
        });
      });

      // Global event listener for adding items to cart
      document.addEventListener('addToCart', ((e: CustomEvent) => {
        const { productId, quantity, rarity } = e.detail;
        this.addItem(productId, quantity, rarity);
      }) as EventListener);
    }

    loadCartFromStorage() {
      const storedCart = localStorage.getItem('voyager-cart');
      if (storedCart) {
        try {
          this.items = JSON.parse(storedCart);
        } catch (e) {
          console.error('Error loading cart from storage:', e);
          this.items = [];
        }
      }
    }

    saveCartToStorage() {
      localStorage.setItem('voyager-cart', JSON.stringify(this.items));
    }

    updateCartUI() {
      if (!this.cartElement) return;

      // Update cart count in header
      const cartCount = document.querySelector('.shop-actions__badge');
      if (cartCount) {
        const totalItems = this.items.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems.toString();

        // Show/hide based on items
        if (totalItems > 0) {
          cartCount.classList.add('shop-actions__badge--visible');
        } else {
          cartCount.classList.remove('shop-actions__badge--visible');
        }
      }

      // Update highest rarity class
      const highestRarity = this.getHighestRarity();

      // Remove existing rarity classes
      this.cartElement.classList.remove(
        'shopping-cart--rarity-common',
        'shopping-cart--rarity-rare',
        'shopping-cart--rarity-mystic',
        'shopping-cart--rarity-legendary'
      );

      // Add new highest rarity class
      this.cartElement.classList.add(`shopping-cart--rarity-${highestRarity}`);

      // Refresh the entire cart (in a real implementation, we might update more selectively)
      // But for this example, we'll just reload the page which will re-render the component
      // with the updated cart data from localStorage
      if (this.cartElement.classList.contains('shopping-cart--open')) {
        location.reload();
      }
    }

    getHighestRarity() {
      if (this.items.length === 0) return 'common';

      const rarityOrder = {
        'common': 1,
        'rare': 2,
        'mystic': 3,
        'legendary': 4
      };

      return this.items.reduce((highest, item) => {
        const itemRarityValue = rarityOrder[item.rarity as keyof typeof rarityOrder] || 1;
        const highestValue = rarityOrder[highest as keyof typeof rarityOrder] || 1;

        return itemRarityValue > highestValue ? item.rarity : highest;
      }, 'common');
    }

    addItem(productId: string, quantity: number, rarity: string) {
      // In a real implementation, you would fetch the product details from an API
      // For this example, we'll just add a placeholder item
      const existingItem = this.items.find(item => item.id === productId);

      if (existingItem) {
        existingItem.quantity += quantity;
      } else {
        // Simulate fetching product details (in a real app, this would come from an API)
        const newItem = {
          id: productId,
          title: `Product ${productId}`,
          price: 49.99,
          image: '/img/products/placeholder.jpg',
          quantity: quantity,
          rarity: rarity || 'common'
        };

        this.items.push(newItem);
      }

      this.saveCartToStorage();
      this.updateCartUI();

      // Open the cart
      this.openCart();
    }

    updateItemQuantity(itemId: string, change: number) {
      const item = this.items.find(item => item.id === itemId);

      if (item) {
        item.quantity += change;

        // Remove item if quantity is zero or less
        if (item.quantity <= 0) {
          this.removeItem(itemId);
          return;
        }

        this.saveCartToStorage();
        this.updateCartUI();
      }
    }

    removeItem(itemId: string) {
      // Find the item to remove
      const itemIndex = this.items.findIndex(item => item.id === itemId);

      if (itemIndex !== -1) {
        // Find the item element
        const itemElement = this.cartElement?.querySelector(`.shopping-cart__item[data-item-id="${itemId}"]`);

        if (itemElement) {
          // Add removal animation
          itemElement.classList.add('shopping-cart__item--removing');

          // Remove item from array after animation
          setTimeout(() => {
            this.items.splice(itemIndex, 1);
            this.saveCartToStorage();
            this.updateCartUI();
          }, 500); // Match animation duration
        } else {
          // No element found, just remove immediately
          this.items.splice(itemIndex, 1);
          this.saveCartToStorage();
          this.updateCartUI();
        }
      }
    }

    openCart() {
      if (!this.cartElement) return;

      this.cartElement.classList.add('shopping-cart--open');
      document.body.classList.add('cart-open');

      // Animate items entrance
      this.animateCartItems();
    }

    closeCart() {
      if (!this.cartElement) return;

      this.cartElement.classList.remove('shopping-cart--open');
      document.body.classList.remove('cart-open');
    }

    animateCartItems() {
      if (!this.cartElement) return;

      const itemElements = this.cartElement.querySelectorAll('.shopping-cart__item');

      // Reset animations
      itemElements.forEach(item => {
        item.classList.remove('shopping-cart__item--animate-in');
      });

      // Trigger animations with staggered delay
      setTimeout(() => {
        itemElements.forEach(item => {
          item.classList.add('shopping-cart__item--animate-in');
        });
      }, 100);
    }
  }

  // Initialize all shopping carts on the page
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.shopping-cart').forEach(cart => {
      new ShoppingCart(cart.id);
    });

    // Global cart toggle buttons
    const cartToggleButtons = document.querySelectorAll('[data-action="toggle-cart"]');
    cartToggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const cart = document.querySelector('.shopping-cart');
        if (cart && cart.id) {
          if (cart.classList.contains('shopping-cart--open')) {
            cart.classList.remove('shopping-cart--open');
            document.body.classList.remove('cart-open');
          } else {
            cart.classList.add('shopping-cart--open');
            document.body.classList.add('cart-open');

            // Initialize this specific cart
            new ShoppingCart(cart.id);
          }
        }
      });
    });
  });
</script>

<style>
  /* Main container */
  .shopping-cart {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    z-index: var(--z-modal);
    visibility: hidden;
    opacity: 0;
    transition: visibility 0.3s, opacity 0.3s;
  }

  .shopping-cart--open {
    visibility: visible;
    opacity: 1;
  }

  /* Backdrop */
  .shopping-cart__backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px);
    transition: opacity 0.3s;
    opacity: 0;
  }

  .shopping-cart--open .shopping-cart__backdrop {
    opacity: 1;
  }

  /* Cart container */
  .shopping-cart__container {
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 480px;
    height: 100%;
    background-color: var(--theme-surface);
    box-shadow: -10px 0 30px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .shopping-cart--open .shopping-cart__container {
    transform: translateX(0);
  }

  /* Cart header */
  .shopping-cart__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-m) var(--space-l);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .shopping-cart__title {
    font-size: var(--size-step-2);
    margin: 0;
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .shopping-cart__close-button {
    background: none;
    border: none;
    color: var(--theme-text-primary);
    cursor: pointer;
    padding: var(--space-xs);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-standard);
  }

  .shopping-cart__close-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: rotate(90deg);
  }

  /* Cart body */
  .shopping-cart__body {
    flex: 1;
    overflow-y: auto;
    padding: var(--space-l);
  }

  /* Cart items */
  .shopping-cart__items {
    margin-bottom: var(--space-xl);
  }

  .shopping-cart__item {
    position: relative;
    display: grid;
    grid-template-columns: 80px 1fr auto;
    grid-template-areas:
      "image details remove"
      "image details subtotal";
    gap: var(--space-s);
    padding: var(--space-m);
    margin-bottom: var(--space-m);
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: var(--radius-md);
    overflow: hidden;
    transition: all 0.3s ease;
    transform: translateX(50px);
    opacity: 0;
    animation-delay: calc(var(--item-index, 0) * 0.1s);
  }

  .shopping-cart__item--animate-in {
    animation: slideInCartItem 0.5s forwards;
  }

  .shopping-cart__item--removing {
    animation: removeCartItem 0.5s forwards;
  }

  /* Item variants based on rarity */
  .shopping-cart__item--common {
    border-left: 3px solid var(--color-rarity-common);
  }

  .shopping-cart__item--rare {
    border-left: 3px solid var(--color-rarity-rare);
    box-shadow: 0 0 10px rgba(100, 181, 246, 0.2);
  }

  .shopping-cart__item--mystic {
    border-left: 3px solid var(--color-rarity-mystic);
    box-shadow: 0 0 15px rgba(206, 147, 216, 0.3);
  }

  .shopping-cart__item--legendary {
    border-left: 3px solid var(--color-rarity-legendary);
    box-shadow: 0 0 20px rgba(255, 213, 79, 0.4);
    overflow: hidden;
  }

  .shopping-cart__item-image-container {
    grid-area: image;
    position: relative;
  }

  .shopping-cart__item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: var(--radius-sm);
  }

  .shopping-cart__item-rarity-badge {
    position: absolute;
    bottom: 0;
    left: 0;
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 2px 6px;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 0 var(--radius-sm) 0 var(--radius-sm);
    font-size: 0.7rem;
    text-transform: uppercase;
  }

  .shopping-cart__item-rarity-icon {
    display: inline-block;
    width: 6px;
    height: 6px;
    border-radius: 50%;
  }

  .shopping-cart__item--common .shopping-cart__item-rarity-icon {
    background-color: var(--color-rarity-common);
  }

  .shopping-cart__item--common .shopping-cart__item-rarity-label {
    color: var(--color-rarity-common);
  }

  .shopping-cart__item--rare .shopping-cart__item-rarity-icon {
    background-color: var(--color-rarity-rare);
    box-shadow: 0 0 3px var(--color-rarity-rare);
  }

  .shopping-cart__item--rare .shopping-cart__item-rarity-label {
    color: var(--color-rarity-rare);
  }

  .shopping-cart__item--mystic .shopping-cart__item-rarity-icon {
    background-color: var(--color-rarity-mystic);
    box-shadow: 0 0 5px var(--color-rarity-mystic);
  }

  .shopping-cart__item--mystic .shopping-cart__item-rarity-label {
    color: var(--color-rarity-mystic);
  }

  .shopping-cart__item--legendary .shopping-cart__item-rarity-icon {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 7px var(--color-rarity-legendary);
    animation: pulse 2s infinite alternate;
  }

  .shopping-cart__item--legendary .shopping-cart__item-rarity-label {
    color: var(--color-rarity-legendary);
  }

  .shopping-cart__item-details {
    grid-area: details;
    display: flex;
    flex-direction: column;
  }

  .shopping-cart__item-title {
    font-size: var(--size-step-0);
    margin: 0 0 var(--space-2xs);
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
  }

  .shopping-cart__item-price {
    font-size: 0.9rem;
    color: var(--theme-text-secondary);
    margin-bottom: var(--space-s);
  }

  .shopping-cart__item-quantity {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
  }

  .shopping-cart__quantity-button {
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-sm);
    cursor: pointer;
    transition: all var(--transition-standard);
  }

  .shopping-cart__quantity-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .shopping-cart__quantity-value {
    min-width: 20px;
    text-align: center;
    font-family: var(--font-secondary);
  }

  .shopping-cart__item-subtotal {
    grid-area: subtotal;
    text-align: right;
    align-self: end;
    font-size: 0.9rem;
  }

  .shopping-cart__item-subtotal-label {
    color: var(--theme-text-secondary);
    margin-right: var(--space-2xs);
  }

  .shopping-cart__item-subtotal-value {
    font-weight: bold;
    color: var(--theme-text-primary);
  }

  .shopping-cart__item-remove {
    grid-area: remove;
    background: none;
    border: none;
    color: var(--theme-text-secondary);
    cursor: pointer;
    padding: var(--space-2xs);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-standard);
    align-self: start;
    justify-self: end;
  }

  .shopping-cart__item-remove:hover {
    color: var(--theme-text-primary);
    background-color: rgba(255, 0, 0, 0.1);
  }

  /* Legendary item effect */
  .shopping-cart__item-legendary-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: linear-gradient(
      45deg,
      rgba(255, 213, 79, 0) 0%,
      rgba(255, 213, 79, 0.1) 50%,
      rgba(255, 213, 79, 0) 100%
    );
    animation: legendaryGlow 3s infinite alternate;
  }

  /* Order summary */
  .shopping-cart__summary {
    padding: var(--space-l);
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: var(--radius-md);
    animation: fadeIn 0.5s 0.3s forwards;
    opacity: 0;
  }

  .shopping-cart__summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--space-s);
    font-size: 0.95rem;
    color: var(--theme-text-secondary);
  }

  .shopping-cart__summary-row--total {
    font-size: var(--size-step-1);
    font-weight: bold;
    color: var(--theme-text-primary);
    padding-top: var(--space-s);
    margin-top: var(--space-s);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Rarity bonus section */
  .shopping-cart__rarity-bonus {
    margin-top: var(--space-m);
    min-height: 40px;
  }

  .shopping-cart__rarity-bonus-message {
    display: flex;
    align-items: center;
    gap: var(--space-s);
    padding: var(--space-s);
    border-radius: var(--radius-sm);
    background-color: rgba(0, 0, 0, 0.2);
    margin-bottom: var(--space-l);
    animation: fadeIn 0.5s 0.4s forwards;
    opacity: 0;
  }

  .shopping-cart__rarity-bonus-icon {
    width: 16px;
    height: 16px;
    border-radius: 50%;
  }

  .shopping-cart__rarity-bonus-icon[data-rarity="rare"] {
    background-color: var(--color-rarity-rare);
    box-shadow: 0 0 5px var(--color-rarity-rare);
  }

  .shopping-cart__rarity-bonus-icon[data-rarity="mystic"] {
    background-color: var(--color-rarity-mystic);
    box-shadow: 0 0 8px var(--color-rarity-mystic);
  }

  .shopping-cart__rarity-bonus-icon[data-rarity="legendary"] {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 12px var(--color-rarity-legendary);
    animation: pulse 2s infinite alternate;
  }

  .shopping-cart__rarity-bonus-text {
    font-size: 0.9rem;
    color: var(--theme-text-primary);
  }

  .shopping-cart__checkout-button {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-s);
    padding: var(--space-m);
    border: none;
    border-radius: var(--radius-md);
    font-family: var(--font-primary);
    font-weight: bold;
    font-size: var(--size-step-0);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    transition: all var(--transition-standard);
    animation: fadeIn 0.5s 0.5s forwards;
    opacity: 0;
  }

  .shopping-cart__checkout-button .icon {
    transition: transform var(--transition-standard);
  }

  .shopping-cart__checkout-button:hover .icon {
    transform: translateX(4px);
  }

  /* Theme-specific cart styles */
  .shopping-cart--rarity-common .shopping-cart__checkout-button {
    background-color: var(--theme-primary);
    color: white;
  }

  .shopping-cart--rarity-common .shopping-cart__checkout-button:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .shopping-cart--rarity-rare .shopping-cart__checkout-button {
    background-color: var(--color-rarity-rare);
    color: black;
  }

  .shopping-cart--rarity-rare .shopping-cart__checkout-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 15px rgba(100, 181, 246, 0.4);
  }

  .shopping-cart--rarity-mystic .shopping-cart__checkout-button {
    background-color: var(--color-rarity-mystic);
    color: black;
  }

  .shopping-cart--rarity-mystic .shopping-cart__checkout-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 20px rgba(206, 147, 216, 0.5);
  }

  .shopping-cart--rarity-legendary .shopping-cart__checkout-button {
    background-color: var(--color-rarity-legendary);
    color: black;
    position: relative;
    overflow: hidden;
  }

  .shopping-cart--rarity-legendary .shopping-cart__checkout-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 25px rgba(255, 213, 79, 0.6);
  }

  .shopping-cart--rarity-legendary .shopping-cart__checkout-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 45%,
      rgba(255, 255, 255, 0.7) 50%,
      rgba(255, 255, 255, 0) 55%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: shineEffect 3s infinite;
    pointer-events: none;
    z-index: 1;
  }

  /* Empty cart */
  .shopping-cart__empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    height: 100%;
    padding: var(--space-xl);
    animation: fadeIn 0.5s forwards;
  }

  .shopping-cart__empty-icon {
    color: var(--theme-text-secondary);
    opacity: 0.5;
    margin-bottom: var(--space-l);
  }

  .shopping-cart__empty-title {
    font-size: var(--size-step-1);
    margin-bottom: var(--space-s);
    color: var(--theme-text-primary);
    font-family: var(--font-primary);
  }

  .shopping-cart__empty-text {
    color: var(--theme-text-secondary);
    margin-bottom: var(--space-xl);
    max-width: 300px;
  }

  .shopping-cart__continue-button {
    padding: var(--space-s) var(--space-l);
    background-color: var(--theme-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-family: var(--font-primary);
    cursor: pointer;
    transition: all var(--transition-standard);
  }

  .shopping-cart__continue-button:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  /* Animations */
  @keyframes slideInCartItem {
    0% {
      transform: translateX(50px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes removeCartItem {
    0% {
      transform: translateX(0);
      opacity: 1;
    }
    100% {
      transform: translateX(50px);
      opacity: 0;
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0% { transform: scale(1); opacity: 0.8; }
    100% { transform: scale(1.5); opacity: 1; }
  }

  @keyframes legendaryGlow {
    0% {
      opacity: 0.3;
    }
    100% {
      opacity: 0.7;
    }
  }

  @keyframes shineEffect {
    0% {
      transform: rotate(30deg) translateX(-100%);
      opacity: 0;
    }
    20% {
      opacity: 0.5;
    }
    30% {
      transform: rotate(30deg) translateX(100%);
      opacity: 0;
    }
    100% {
      opacity: 0;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 480px) {
    .shopping-cart__container {
      max-width: 100%;
    }

    .shopping-cart__item {
      grid-template-columns: 60px 1fr;
      grid-template-areas:
        "image details"
        "image details"
        "subtotal subtotal"
        "remove remove";
      gap: var(--space-xs);
    }

    .shopping-cart__item-image {
      width: 60px;
      height: 60px;
    }

    .shopping-cart__item-subtotal,
    .shopping-cart__item-remove {
      justify-self: flex-end;
      margin-top: var(--space-xs);
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .shopping-cart__container {
      transition: transform 0.1s ease;
    }

    .shopping-cart__item--animate-in,
    .shopping-cart__item--removing {
      animation: none;
      transform: none;
      opacity: 1;
    }

    .shopping-cart__item-legendary-effect,
    .shopping-cart--rarity-legendary .shopping-cart__checkout-button::after,
    .shopping-cart__item--legendary .shopping-cart__item-rarity-icon {
      animation: none;
    }

    .shopping-cart__summary,
    .shopping-cart__rarity-bonus-message,
    .shopping-cart__checkout-button {
      animation: none;
      opacity: 1;
    }
  }
</style>

================
File: src/components/StackMotion.astro
================
---
/**
 * StackMotion.astro
 * A component that creates a 3D stacked effect when scrolling
 * through a collection of items.
 */

 interface Props {
  id?: string;
  class?: string;
  itemSelector?: string; // CSS selector for stack items
  perspective?: number; // Perspective value in pixels
  maxTilt?: number; // Maximum tilt angle in degrees
  transitionSpeed?: number; // Transition speed in ms
}

const {
  id = 'stack-motion-' + Math.random().toString(36).substring(2, 9),
  class: className = '',
  itemSelector = '.stack__item',
  perspective = 1000,
  maxTilt = 5,
  transitionSpeed = 300,
} = Astro.props;
---

<div id={id} class:list={["stack-container", className]}>
  <div class="stack-container__content">
    <slot />
  </div>
</div>

<script define:vars={{ id, itemSelector, perspective, maxTilt, transitionSpeed }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(id);
    if (!container) return;

    const items = container.querySelectorAll(itemSelector);
    if (!items.length) return;

    // Set stack container perspective
    container.style.perspective = `${perspective}px`;

    // Set initial styles on items
    items.forEach((item, index) => {
      item.style.transition = `transform ${transitionSpeed}ms ease`;
      item.dataset.stackIndex = index.toString();
      item.style.zIndex = (items.length - index).toString();
    });

    // Track scroll position for calculations
    let lastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
    let ticking = false;

    function updateStackEffect() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollDirection = scrollTop > lastScrollTop ? 'down' : 'up';
      const scrollDelta = Math.abs(scrollTop - lastScrollTop);
      const scrollFactor = Math.min(scrollDelta / 100, 1); // Normalize scroll amount

      items.forEach((item) => {
        const index = parseInt(item.dataset.stackIndex);
        const depthFactor = index * 0.15; // Deeper items move more

        // Calculate transform based on scroll direction and depth
        let rotateX = 0;
        let translateZ = 0;
        let translateY = 0;

        if (scrollDirection === 'down') {
          rotateX = -maxTilt * scrollFactor * depthFactor;
          translateZ = -30 * scrollFactor * depthFactor;
          translateY = 20 * scrollFactor * depthFactor;
        } else {
          rotateX = maxTilt * scrollFactor * depthFactor;
          translateZ = -30 * scrollFactor * depthFactor;
          translateY = -20 * scrollFactor * depthFactor;
        }

        // Apply the transform with easing
        item.style.transform = `
          rotateX(${rotateX}deg)
          translateZ(${translateZ}px)
          translateY(${translateY}px)
        `;
      });

      lastScrollTop = scrollTop;
      ticking = false;
    }

    // Handle scroll events with requestAnimationFrame for performance
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateStackEffect();
          ticking = false;
        });
        ticking = true;
      }
    });

    // Initialize
    updateStackEffect();

    // Handle resize events
    window.addEventListener('resize', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateStackEffect();
          ticking = false;
        });
        ticking = true;
      }
    });

    // Reset on page leave to avoid visual glitches
    window.addEventListener('beforeunload', () => {
      items.forEach((item) => {
        item.style.transform = 'none';
      });
    });

    // Handle mouse movement for additional effect when not scrolling
    container.addEventListener('mousemove', (e) => {
      if (window.innerWidth < 768) return; // Skip on mobile

      const containerRect = container.getBoundingClientRect();
      const centerX = containerRect.width / 2;
      const centerY = containerRect.height / 2;

      const mouseX = e.clientX - containerRect.left;
      const mouseY = e.clientY - containerRect.top;

      // Calculate normalized position (-1 to 1 range)
      const normalizedX = (mouseX - centerX) / centerX;
      const normalizedY = (mouseY - centerY) / centerY;

      items.forEach((item) => {
        const index = parseInt(item.dataset.stackIndex);
        const depthFactor = index * 0.05; // Subtle effect

        // Get the current transform
        const currentTransform = item.style.transform;

        // Add mouse movement effect to existing transform
        item.style.transform = `${currentTransform}
          rotateY(${normalizedX * depthFactor * maxTilt}deg)
          rotateX(${-normalizedY * depthFactor * maxTilt}deg)
        `;
      });
    });

    // Reset mouse effect when leaving container
    container.addEventListener('mouseleave', () => {
      updateStackEffect(); // Reset to scroll-based transforms
    });
  });
</script>

<style>
  .stack-container {
    position: relative;
    width: 100%;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .stack-container__content {
    width: 100%;
    position: relative;
    transform-style: preserve-3d;
  }

  /* Default item styling - can be overridden */
  :global(.stack__item) {
    transform-style: preserve-3d;
    transition: transform var(--transition-standard, 300ms ease);
    will-change: transform;
  }

  /* Responsive adjustments */
  @media (prefers-reduced-motion: reduce) {
    :global(.stack__item) {
      transition: none !important;
      transform: none !important;
    }
  }
</style>

================
File: src/components/ThemeSwitcher.astro
================
---
/**
 * ThemeSwitcher.astro
 * A component that allows users to switch between different destination themes.
 * Utilizes ViewTransition API when available with fallbacks for unsupported browsers.
 */

 interface Theme {
  id: string;
  name: string;
  icon: string;
  description: string;
}

interface Props {
  themes?: Theme[];
  currentTheme?: string;
  class?: string;
  compact?: boolean;
}

// Default themes
const defaultThemes: Theme[] = [
  {
    id: 'iceland',
    name: 'Iceland',
    icon: '❄️',
    description: 'Cold, icy northern landscapes with blue hues'
  },
  {
    id: 'thailand',
    name: 'Thailand',
    icon: '🌴',
    description: 'Lush tropical rainforest with vibrant greens'
  },
  {
    id: 'berlin',
    name: 'Berlin',
    icon: '🔥',
    description: 'Dark, fiery underground scene with red and black tones'
  },
  {
    id: 'spain',
    name: 'Spain',
    icon: '☀️',
    description: 'Vibrant, colorful Mediterranean setting with purple gradients'
  }
];

const {
  themes = defaultThemes,
  currentTheme = 'iceland', // Default theme
  class: className = '',
  compact = false
} = Astro.props;
---

<div class:list={["theme-switcher", className, { "theme-switcher--compact": compact }]}>
  {!compact && (
    <div class="theme-switcher__header">
      <span class="theme-switcher__label">Destination:</span>
    </div>
  )}

  <div class="theme-switcher__options">
    {themes.map((theme) => (
      <button
        class:list={[
          "theme-switcher__option",
          { "theme-switcher__option--active": theme.id === currentTheme }
        ]}
        data-theme={theme.id}
        aria-label={`Switch to ${theme.name} theme`}
        title={theme.description}
      >
        <span class="theme-switcher__icon">{theme.icon}</span>
        {!compact && <span class="theme-switcher__name">{theme.name}</span>}
      </button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Detect if View Transitions API is supported
    const supportsViewTransitions = !!document.startViewTransition;

    // Add a class to enable conditional CSS
    if (supportsViewTransitions) {
      document.documentElement.classList.add('supports-view-transitions');
    }

    // Get all theme buttons
    const themeButtons = document.querySelectorAll('.theme-switcher__option');
    const html = document.documentElement;

    // Set initial theme from localStorage or keep the server-rendered one
    const savedTheme = localStorage.getItem('voyager-theme');
    if (savedTheme) {
      html.dataset.theme = savedTheme;

      // Update active button
      document.querySelectorAll('.theme-switcher__option--active')
        .forEach(el => el.classList.remove('theme-switcher__option--active'));

      document.querySelectorAll(`.theme-switcher__option[data-theme="${savedTheme}"]`)
        .forEach(el => el.classList.add('theme-switcher__option--active'));
    }

    // Handle theme switching
    themeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const theme = button.getAttribute('data-theme');
        if (!theme) return;

        // Don't switch if already on this theme
        if (html.dataset.theme === theme) return;

        // Remove active class from all buttons
        document.querySelectorAll('.theme-switcher__option--active')
          .forEach(el => el.classList.remove('theme-switcher__option--active'));

        // Add active class to clicked button
        document.querySelectorAll(`.theme-switcher__option[data-theme="${theme}"]`)
          .forEach(el => el.classList.add('theme-switcher__option--active'));

        // Use View Transitions API if available
        if (supportsViewTransitions) {
          document.startViewTransition(() => {
            html.dataset.theme = theme;
            localStorage.setItem('voyager-theme', theme);

            // Dispatch custom event for other components to react
            window.dispatchEvent(new CustomEvent('themeChanged', {
              detail: { theme }
            }));
          });
        } else {
          // Fallback for browsers without View Transitions
          html.dataset.theme = theme;
          localStorage.setItem('voyager-theme', theme);

          // Dispatch custom event for other components to react
          window.dispatchEvent(new CustomEvent('themeChanged', {
            detail: { theme }
          }));
        }
      });
    });
  });
</script>

<style>
  .theme-switcher {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs, 0.5rem);
    padding: var(--space-s, 0.75rem);
    background-color: var(--theme-surface, rgba(0, 0, 0, 0.2));
    border-radius: var(--radius-lg, 0.5rem);
    backdrop-filter: var(--card-backdrop-filter, blur(8px));
    border: 1px solid rgba(255, 255, 255, 0.1);
    width: max-content;
  }

  .theme-switcher--compact {
    flex-direction: row;
    align-items: center;
    padding: var(--space-xs, 0.5rem);
  }

  .theme-switcher__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .theme-switcher__label {
    font-family: var(--font-secondary, monospace);
    font-size: 0.85rem;
    color: var(--theme-text-secondary, #a3c1ff);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .theme-switcher__options {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs, 0.5rem);
  }

  .theme-switcher--compact .theme-switcher__options {
    gap: var(--space-2xs, 0.25rem);
  }

  .theme-switcher__option {
    display: flex;
    align-items: center;
    gap: var(--space-2xs, 0.25rem);
    padding: var(--space-xs, 0.5rem) var(--space-s, 0.75rem);
    background-color: var(--theme-surface, rgba(0, 0, 0, 0.2));
    border: 1px solid transparent;
    border-radius: var(--radius-button, 0.25rem);
    color: var(--theme-text-primary, white);
    cursor: pointer;
    font-family: var(--font-primary, sans-serif);
    font-size: 0.9rem;
    transition: all var(--transition-standard, 250ms ease);
  }

  .theme-switcher--compact .theme-switcher__option {
    padding: var(--space-2xs, 0.25rem);
    border-radius: var(--radius-full, 9999px);
  }

  .theme-switcher__option:hover {
    background-color: var(--theme-primary, #7aa4e3);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .theme-switcher__option--active {
    background-color: var(--theme-primary, #7aa4e3);
    box-shadow: 0 0 10px var(--theme-primary, #7aa4e3);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .theme-switcher__icon {
    font-size: 1.2em;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-switcher__name {
    font-weight: 500;
  }

  /* Animation for theme transitions */
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  .theme-switcher__option--active .theme-switcher__icon {
    animation: pulse 2s infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .theme-switcher:not(.theme-switcher--compact) {
      width: 100%;
    }

    .theme-switcher__options {
      justify-content: center;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .theme-switcher__option:hover {
      transform: none;
    }

    .theme-switcher__option--active .theme-switcher__icon {
      animation: none;
    }
  }
</style>

================
File: src/css-utils/clamp-generator.js
================
const viewports = require('../design-tokens/viewports.json');

/**
 * Takes an array of tokens and sends back and array of name
 * and clamp pairs for CSS fluid values.
 *
 * @param {array} tokens array of {name: string, min: number, max: number}
 * @returns {array} {name: string, value: string}
 */
const clampGenerator = tokens => {
  const rootSize = 16;

  return tokens.map(({name, min, max}) => {
    if (min === max) {
      return `${min / rootSize}rem`;
    }

    // Convert the min and max sizes to rems
    const minSize = min / rootSize;
    const maxSize = max / rootSize;

    // Convert the pixel viewport sizes into rems
    const minViewport = viewports.min / rootSize;
    const maxViewport = viewports.max / rootSize;

    // Slope and intersection allow us to have a fluid value but also keep that sensible
    const slope = (maxSize - minSize) / (maxViewport - minViewport);
    const intersection = -1 * minViewport * slope + minSize;

    return {
      name,
      value: `clamp(${minSize}rem, ${intersection.toFixed(2)}rem + ${(
        slope * 100
      ).toFixed(2)}vw, ${maxSize}rem)`
    };
  });
};

module.exports = clampGenerator;

================
File: src/css-utils/tokens-to-tailwind.js
================
const slugify = require('slugify');

/**
 * Converts human readable tokens into tailwind config friendly ones
 *
 * @param {array} tokens {name: string, value: any}
 * @return {object} {key, value}
 */
const tokensToTailwind = tokens => {
  const nameSlug = text => slugify(text, {lower: true});
  let response = {};

  tokens.forEach(({name, value}) => {
    response[nameSlug(name)] = value;
  });

  return response;
};

module.exports = tokensToTailwind;

================
File: src/css/blocks/prose.css
================
.prose {
  --flow-space: var(--space-m);
}

================
File: src/css/components/box.css
================
/*
BOX
More info: https://every-layout.dev/layouts/box/#the-generator
*/

.box {
    background: var(--color-light);
    color: var(--color-dark);
    padding: var(--space-s-m);
  }
  
  .box * {
    color: inherit;
  }
  
  .box.invert {
    background: var(--color-dark);
    color: var(--color-light);
  }

================
File: src/css/components/cluster.css
================
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-m));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

================
File: src/css/components/flow.css
================
/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

================
File: src/css/components/grid.css
================
/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */
.grid[data-layout='50-50'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

/* Twelve column grid layout */
.grid[data-layout='twelfths'] {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}

/* Special layout for larger devices. Used on home page intro */
.grid[data-layout='lg:10/2'] {
  grid-template-columns: 100%;
}

@media screen(md) {
  .grid[data-layout='lg:10/2'] {
    grid-template-columns: clamp(40rem, 80vw, 60rem);
  }
}

@media screen(lg) {
  .grid[data-layout='lg:10/2'] {
    grid-template-columns: 10fr 2fr;
  }
}

================
File: src/css/components/icon.css
================
/* 
ICON
From Every Layout: https://every-layout.dev/layouts/icon/
*/

.icon {
    width: 0.75em;
    width: 1cap;
    height: 0.75em;
    height: 1cap;
  }
  
  .with-icon {
    display: inline-flex;
    align-items: baseline;
  }
  
  .with-icon .icon {
    margin-inline-end: 1rem;
  }

================
File: src/css/components/repel.css
================
/*
REPEL
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--repel-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel-vertical-alignment, center);
  gap: var(--gutter, var(--space-s-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

================
File: src/css/components/sidebar.css
================
/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
}

.sidebar > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

================
File: src/css/components/switcher.css
================
/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
  align-items: var(--switcher-vertical-alignment, flex-start);
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
}

/* Max 2 items,
so anything greater than 2 is ful width */
.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

================
File: src/css/components/wrapper.css
================
/*
WRAPPER COMPOSITION 
A common wrapper/container
*/
.wrapper {
  margin-inline: auto;
  max-width: clamp(16rem, var(--wrapper-max-width, 100vw), 80rem);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

================
File: src/css/global.css
================
@import 'tailwindcss/base';

@import 'global/reset.css';
@import 'global/fonts.css';

@import 'tailwindcss/components';

@import 'global/variables.css';
@import 'global/global-styles.css';
/* 
See issue: https://github.com/frankstallone/astro-cube-boilerplate/issues/1
Reference source: https://github.com/Set-Creative-Studio/cube-boilerplate/blob/main/src/css/global.css#L11

@import-glob 'blocks/*.css' layer(components);
@import-glob 'components/*.css' layer(components);
@import-glob 'utilities/*.css' layer(components); 
*/

@import 'blocks/prose.css' layer(components);
@import 'components/box.css' layer(components);
@import 'components/cluster.css' layer(components);
@import 'components/flow.css' layer(components);
@import 'components/grid.css' layer(components);
@import 'components/icon.css' layer(components);
@import 'components/repel.css' layer(components);
@import 'components/sidebar.css' layer(components);
@import 'components/switcher.css' layer(components);
@import 'components/wrapper.css' layer(components);
@import 'utilities/region.css' layer(components);
@import 'utilities/visually-hidden.css' layer(components);

@import 'tailwindcss/utilities';

================
File: src/css/global/fonts.css
================
/* @font-face here */

================
File: src/css/global/global-styles.css
================
/* 
  Global styles 

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/
body {
  background: var(--color-light);
  color: var(--color-dark);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
}

================
File: src/css/global/reset.css
================
/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

================
File: src/css/global/variables.css
================
/* src/css/global/variables.css */

/**
 * Voyager Design System: Base Variables
 * These variables define the structure and shared properties across all themes
 */

 :root {
  /* Core spacing variables - adapted from the existing Astro Cube Boilerplate */
  --gutter: var(--space-s-l);
  --flow-space: var(--space-m);

  /* Typography */
  --font-primary: 'Exo 2', var(--font-base);
  --font-secondary: 'Kode Mono', monospace;
  --leading-standard: 1.5;

  /* Transitions & Animation */
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);

  /* Visual styles */
  --radius-card: 10px;
  --radius-button: 6px;
  --radius-badge: 9999px;

  /* Game-specific variables */
  --card-hover-lift: 10px;
  --card-parallax-depth: 10px;

  /* Card effects */
  --card-glow-intensity-common: 0.2;
  --card-glow-intensity-rare: 0.4;
  --card-glow-intensity-mystic: 0.6;
  --card-glow-intensity-legendary: 0.8;
  --card-backdrop-filter: blur(8px);

  /* Z-index layers */
  --z-below: -1;
  --z-base: 0;
  --z-above: 1;
  --z-header: 10;
  --z-overlay: 20;
  --z-modal: 30;
  --z-toast: 40;
  --z-tooltip: 50;

  /* Common component structural definitions */
  --card-padding: var(--space-m);
  --card-border-width: var(--border-width-default, 2px);
  --button-padding: var(--space-s) var(--space-l);
  --nav-height: 4rem;
  --nav-padding: var(--space-m);
  --header-height: 6rem;
  --footer-padding: var(--space-xl);
  --modal-padding: var(--space-l);
  --input-padding: var(--space-xs) var(--space-s);

  /* Parallax Variables */
  --parallax-depth-1: 0.1;
  --parallax-depth-2: 0.2;
  --parallax-depth-3: 0.3;
  --parallax-depth-4: 0.4;
  --parallax-depth-5: 0.5;

  /* Rarity Colors - These stay constant across themes */
  --color-rarity-common: #b0bec5;
  --color-rarity-rare: #64b5f6;
  --color-rarity-mystic: #ce93d8;
  --color-rarity-legendary: #ffd54f;

  /* Default Theme Variables - Will be overridden by theme-specific CSS */
  --theme-background: linear-gradient(180deg, #0b1733 0%, #203a6d 100%);
  --theme-primary: #7aa4e3;
  --theme-secondary: #3d5e91;
  --theme-accent: #a6c9ff;
  --theme-surface: rgba(16, 37, 72, 0.8);
  --theme-text-primary: #ffffff;
  --theme-text-secondary: #a3c1ff;

  /* Default Card backgrounds - Will be overridden by theme-specific CSS */
  --card-bg-common: linear-gradient(135deg, #62728a 0%, #2e3b4f 100%);
  --card-bg-rare: linear-gradient(135deg, #315a82 0%, #1a304d 100%);
  --card-bg-mystic: linear-gradient(135deg, #6b45a4 0%, #2e1d45 100%);
  --card-bg-legendary: linear-gradient(135deg, #b4883b 0%, #5d4010 100%);

  /* Theme-specific effects */
  --ambient-animation: "snowfall"; /* Default */
  --particle-density: 60;
  --theme-accent-pattern: url("/img/patterns/default-pattern.svg");
}

/* ------ THEME: ICELAND ------ */
[data-theme="iceland"] {
  /* Main Colors */
  --theme-background: linear-gradient(180deg, #0b1733 0%, #203a6d 100%);
  --theme-primary: #7aa4e3;
  --theme-secondary: #3d5e91;
  --theme-accent: #a6c9ff;
  --theme-surface: rgba(16, 37, 72, 0.8);
  --theme-text-primary: #ffffff;
  --theme-text-secondary: #a3c1ff;

  /* Card Backgrounds */
  --card-bg-common: linear-gradient(135deg, #62728a 0%, #2e3b4f 100%);
  --card-bg-rare: linear-gradient(135deg, #315a82 0%, #1a304d 100%);
  --card-bg-mystic: linear-gradient(135deg, #6b45a4 0%, #2e1d45 100%);
  --card-bg-legendary: linear-gradient(135deg, #b4883b 0%, #5d4010 100%);

  /* Button Styles */
  --button-bg-primary: #3d5e91;
  --button-bg-secondary: transparent;
  --button-text: #ffffff;
  --button-border: #7aa4e3;

  /* Special Effects */
  --ambient-animation: "snowfall";
  --particle-density: 60;
  --theme-accent-pattern: url("/img/patterns/iceland-pattern.svg");
  --accent-noise: url("/img/textures/ice-noise.png");

  /* Modal/Dialog styling */
  --modal-backdrop: rgba(11, 23, 51, 0.8);
  --modal-bg: linear-gradient(135deg, #1c3258 0%, #0b1733 100%);
  --modal-border: rgba(122, 164, 227, 0.3);

  /* Custom scrollbar */
  --scrollbar-thumb: #3d5e91;
  --scrollbar-track: #0b1733;
}

/* ------ THEME: THAILAND ------ */
[data-theme="thailand"] {
  /* Main Colors */
  --theme-background: linear-gradient(180deg, #0a3e2b 0%, #1e6e55 100%);
  --theme-primary: #4caf50;
  --theme-secondary: #1b5e20;
  --theme-accent: #81c784;
  --theme-surface: rgba(13, 63, 43, 0.8);
  --theme-text-primary: #ffffff;
  --theme-text-secondary: #b9e4bc;

  /* Card Backgrounds */
  --card-bg-common: linear-gradient(135deg, #4f8a4f 0%, #2e4f2e 100%);
  --card-bg-rare: linear-gradient(135deg, #31824b 0%, #1a4d27 100%);
  --card-bg-mystic: linear-gradient(135deg, #45a488 0%, #1d4539 100%);
  --card-bg-legendary: linear-gradient(135deg, #b49a3b 0%, #5d4c10 100%);

  /* Button Styles */
  --button-bg-primary: #1b5e20;
  --button-bg-secondary: transparent;
  --button-text: #ffffff;
  --button-border: #4caf50;

  /* Special Effects */
  --ambient-animation: "rainforest";
  --particle-density: 20;
  --theme-accent-pattern: url("/img/patterns/thailand-pattern.svg");
  --accent-noise: url("/img/textures/leaf-noise.png");

  /* Modal/Dialog styling */
  --modal-backdrop: rgba(10, 62, 43, 0.8);
  --modal-bg: linear-gradient(135deg, #1e6e55 0%, #0a3e2b 100%);
  --modal-border: rgba(76, 175, 80, 0.3);

  /* Custom scrollbar */
  --scrollbar-thumb: #1b5e20;
  --scrollbar-track: #0a3e2b;
}

/* ------ THEME: BERLIN (Diablo 2 inspired) ------ */
[data-theme="berlin"] {
  /* Main Colors */
  --theme-background: linear-gradient(180deg, #1a0e0c 0%, #3d1a17 100%);
  --theme-primary: #e53935;
  --theme-secondary: #7f1614;
  --theme-accent: #ff6e40;
  --theme-surface: rgba(41, 19, 16, 0.8);
  --theme-text-primary: #ffffff;
  --theme-text-secondary: #ffccbc;

  /* Card Backgrounds */
  --card-bg-common: linear-gradient(135deg, #5d4948 0%, #2b2221 100%);
  --card-bg-rare: linear-gradient(135deg, #824b31 0%, #4d2a1a 100%);
  --card-bg-mystic: linear-gradient(135deg, #a44545 0%, #451d1d 100%);
  --card-bg-legendary: linear-gradient(135deg, #b47d3b 0%, #5d3e10 100%);

  /* Button Styles */
  --button-bg-primary: #7f1614;
  --button-bg-secondary: transparent;
  --button-text: #ffffff;
  --button-border: #e53935;

  /* Special Effects */
  --ambient-animation: "embers";
  --particle-density: 25;
  --theme-accent-pattern: url("/img/patterns/berlin-pattern.svg");
  --accent-noise: url("/img/textures/fire-noise.png");

  /* Modal/Dialog styling */
  --modal-backdrop: rgba(26, 14, 12, 0.8);
  --modal-bg: linear-gradient(135deg, #3d1a17 0%, #1a0e0c 100%);
  --modal-border: rgba(229, 57, 53, 0.3);

  /* Custom scrollbar */
  --scrollbar-thumb: #7f1614;
  --scrollbar-track: #1a0e0c;
}

/* ------ THEME: SPAIN ------ */
[data-theme="spain"] {
  /* Main Colors */
  --theme-background: linear-gradient(180deg, #5f2c82 0%, #49a09d 100%);
  --theme-primary: #ba68c8;
  --theme-secondary: #7b1fa2;
  --theme-accent: #f48fb1;
  --theme-surface: rgba(95, 44, 130, 0.8);
  --theme-text-primary: #ffffff;
  --theme-text-secondary: #e1bee7;

  /* Card Backgrounds */
  --card-bg-common: linear-gradient(135deg, #7e57c2 0%, #4527a0 100%);
  --card-bg-rare: linear-gradient(135deg, #5e35b1 0%, #311b92 100%);
  --card-bg-mystic: linear-gradient(135deg, #8e24aa 0%, #4a148c 100%);
  --card-bg-legendary: linear-gradient(135deg, #d81b60 0%, #880e4f 100%);

  /* Button Styles */
  --button-bg-primary: #7b1fa2;
  --button-bg-secondary: transparent;
  --button-text: #ffffff;
  --button-border: #ba68c8;

  /* Special Effects */
  --ambient-animation: "stardust";
  --particle-density: 35;
  --theme-accent-pattern: url("/img/patterns/spain-pattern.svg");
  --accent-noise: url("/img/textures/wave-noise.png");

  /* Modal/Dialog styling */
  --modal-backdrop: rgba(95, 44, 130, 0.8);
  --modal-bg: linear-gradient(135deg, #5f2c82 0%, #49a09d 100%);
  --modal-border: rgba(186, 104, 200, 0.3);

  /* Custom scrollbar */
  --scrollbar-thumb: #7b1fa2;
  --scrollbar-track: #5f2c82;
}

/* Custom Scrollbar Styling */
@media (min-width: 768px) {
  ::-webkit-scrollbar {
    width: 14px;
  }

  ::-webkit-scrollbar-track {
    background-color: var(--scrollbar-track);
  }

  ::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-thumb);
    border-radius: 7px;
    border: 3px solid var(--scrollbar-track);
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: var(--theme-primary);
  }
}

/* Theme transition animations */
@keyframes theme-fade-in {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* Apply theme transitions if supported */
.supports-view-transitions [data-theme] {
  view-transition-name: theme;
}

/* Fallback for browsers that don't support view transitions */
:not(.supports-view-transitions) [data-theme] {
  animation: theme-fade-in 0.5s ease-out;
}

/* Ambient background animations */
@keyframes snowfall {
  0% {
    background-position: 0 0;
    opacity: 0;
  }
  50% {
    opacity: 0.7;
  }
  100% {
    background-position: 0 100vh;
    opacity: 0;
  }
}

@keyframes rainforest {
  0% {
    background-position: 0 -100vh;
    transform: rotate(0deg);
  }
  100% {
    background-position: 100vw 100vh;
    transform: rotate(10deg);
  }
}

@keyframes embers {
  0% {
    background-position: 0 0;
    opacity: 0.2;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    background-position: 100vw -100vh;
    opacity: 0.2;
  }
}

@keyframes stardust {
  0% {
    opacity: 0.1;
    transform: translateY(0) rotate(0deg);
  }
  50% {
    opacity: 0.7;
  }
  100% {
    opacity: 0.1;
    transform: translateY(100vh) rotate(360deg);
  }
}

/* Accessibility - Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  *, ::before, ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }

  .item-card:hover {
    transform: none !important;
  }

  .item-card__inner {
    transform: none !important;
  }

  .item-card[data-rarity="legendary"] {
    animation: none !important;
  }

  .item-card__shine {
    display: none !important;
  }
}

================
File: src/css/utilities/animation.css
================
/**
 * Animation Utilities
 *
 * Reusable animation classes that can be applied to elements
 * to create consistent animation effects across components.
 */

/* Entrance animations */
.animate-fade-in {
  animation: fade-in 0.5s ease forwards;
}

.animate-slide-up {
  animation: slide-up 0.5s ease forwards;
}

.animate-slide-down {
  animation: slide-down 0.5s ease forwards;
}

.animate-slide-left {
  animation: slide-left 0.5s ease forwards;
}

.animate-slide-right {
  animation: slide-right 0.5s ease forwards;
}

.animate-scale-in {
  animation: scale-in 0.5s ease forwards;
}

.animate-bounce-in {
  animation: bounce-in 0.5s var(--transition-bounce) forwards;
}

/* Continuous animations */
.animate-pulse {
  animation: pulse 2s infinite alternate;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-spin {
  animation: spin 2s linear infinite;
}

.animate-shine {
  position: relative;
  overflow: hidden;
}

.animate-shine::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to bottom right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 45%,
    rgba(255, 255, 255, 0.7) 50%,
    rgba(255, 255, 255, 0) 55%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: shine 6s infinite;
  pointer-events: none;
  z-index: 1;
}

.animate-glow {
  animation: glow 2s infinite alternate;
}

/* Animation delays */
.delay-100 {
  animation-delay: 100ms;
}

.delay-200 {
  animation-delay: 200ms;
}

.delay-300 {
  animation-delay: 300ms;
}

.delay-400 {
  animation-delay: 400ms;
}

.delay-500 {
  animation-delay: 500ms;
}

.delay-750 {
  animation-delay: 750ms;
}

.delay-1000 {
  animation-delay: 1000ms;
}

/* Animation durations */
.duration-100 {
  animation-duration: 100ms;
}

.duration-200 {
  animation-duration: 200ms;
}

.duration-300 {
  animation-duration: 300ms;
}

.duration-500 {
  animation-duration: 500ms;
}

.duration-700 {
  animation-duration: 700ms;
}

.duration-1000 {
  animation-duration: 1000ms;
}

/* Animation easing */
.ease-in {
  animation-timing-function: var(--ease-in, cubic-bezier(0.4, 0, 1, 1));
}

.ease-out {
  animation-timing-function: var(--ease-out, cubic-bezier(0, 0, 0.2, 1));
}

.ease-in-out {
  animation-timing-function: var(--ease-in-out, cubic-bezier(0.4, 0, 0.2, 1));
}

.ease-bounce {
  animation-timing-function: var(--ease-bounce, cubic-bezier(0.5, 0.05, 0.2, 1.5));
}

/* Mouse hover effects */
.hover-lift {
  transition: transform var(--transition-standard);
}

.hover-lift:hover {
  transform: translateY(-5px);
}

.hover-lift-lg {
  transition: transform var(--transition-standard);
}

.hover-lift-lg:hover {
  transform: translateY(-10px);
}

.hover-scale {
  transition: transform var(--transition-standard);
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-glow {
  transition: box-shadow var(--transition-standard);
}

.hover-glow:hover {
  box-shadow: 0 0 15px var(--theme-primary, rgba(255, 255, 255, 0.5));
}

/* Define keyframe animations */
@keyframes fade-in {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes slide-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-down {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-left {
  0% {
    opacity: 0;
    transform: translateX(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slide-right {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scale-in {
  0% {
    opacity: 0;
    transform: scale(0.9);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes bounce-in {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.8;
  }
  100% {
    transform: scale(1.05);
    opacity: 1;
  }
}

@keyframes float {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes shine {
  0% {
    transform: rotate(30deg) translateX(-100%);
    opacity: 0;
  }
  20% {
    opacity: 1;
  }
  40% {
    transform: rotate(30deg) translateX(100%);
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}

@keyframes glow {
  0% {
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
  }
  100% {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
  }
}

/* Reduced motion adaptations */
@media (prefers-reduced-motion: reduce) {
  .animate-fade-in,
  .animate-slide-up,
  .animate-slide-down,
  .animate-slide-left,
  .animate-slide-right,
  .animate-scale-in,
  .animate-bounce-in,
  .animate-pulse,
  .animate-float,
  .animate-spin,
  .animate-shine,
  .animate-glow,
  .hover-lift,
  .hover-lift-lg,
  .hover-scale,
  .hover-glow {
    animation: none;
    transition: none;
  }

  .animate-shine::after {
    display: none;
  }
}

================
File: src/css/utilities/rarity.css
================
/**
 * Rarity Utility Classes
 *
 * These utility classes provide consistent styling for different rarity levels
 * across components. They can be applied to any element to indicate rarity.
 */

/* Base rarity colors */
.rarity-common {
  --rarity-color: var(--color-rarity-common);
  --rarity-glow: var(--card-glow-intensity-common);
  --rarity-bg: var(--card-bg-common, linear-gradient(135deg, #62728a 0%, #2e3b4f 100%));
}

.rarity-rare {
  --rarity-color: var(--color-rarity-rare);
  --rarity-glow: var(--card-glow-intensity-rare);
  --rarity-bg: var(--card-bg-rare, linear-gradient(135deg, #315a82 0%, #1a304d 100%));
}

.rarity-mystic {
  --rarity-color: var(--color-rarity-mystic);
  --rarity-glow: var(--card-glow-intensity-mystic);
  --rarity-bg: var(--card-bg-mystic, linear-gradient(135deg, #6b45a4 0%, #2e1d45 100%));
}

.rarity-legendary {
  --rarity-color: var(--color-rarity-legendary);
  --rarity-glow: var(--card-glow-intensity-legendary);
  --rarity-bg: var(--card-bg-legendary, linear-gradient(135deg, #b4883b 0%, #5d4010 100%));
}

/* Rarity badges */
.rarity-badge {
  display: inline-flex;
  align-items: center;
  gap: var(--space-2xs, 0.25rem);
  padding: var(--space-2xs, 0.25rem) var(--space-xs, 0.5rem);
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: var(--radius-full, 9999px);
  font-size: 0.75rem;
  text-transform: uppercase;
  font-family: var(--font-secondary);
  letter-spacing: 0.05em;
  font-weight: bold;
}

.rarity-badge-icon {
  display: inline-block;
  width: 8px;
  height: 8px;
  border-radius: 50%;
}

.rarity-common .rarity-badge-icon {
  background-color: var(--color-rarity-common);
}

.rarity-common.rarity-badge,
.rarity-common .rarity-badge-text {
  color: var(--color-rarity-common);
}

.rarity-rare .rarity-badge-icon {
  background-color: var(--color-rarity-rare);
  box-shadow: 0 0 5px var(--color-rarity-rare);
}

.rarity-rare.rarity-badge,
.rarity-rare .rarity-badge-text {
  color: var(--color-rarity-rare);
}

.rarity-mystic .rarity-badge-icon {
  background-color: var(--color-rarity-mystic);
  box-shadow: 0 0 8px var(--color-rarity-mystic);
}

.rarity-mystic.rarity-badge,
.rarity-mystic .rarity-badge-text {
  color: var(--color-rarity-mystic);
}

.rarity-legendary .rarity-badge-icon {
  background-color: var(--color-rarity-legendary);
  box-shadow: 0 0 12px var(--color-rarity-legendary);
  animation: rarity-pulse 2s infinite alternate;
}

.rarity-legendary.rarity-badge,
.rarity-legendary .rarity-badge-text {
  color: var(--color-rarity-legendary);
}

/* Rarity borders */
.rarity-border {
  border-width: var(--border-width-default, 2px);
  border-style: solid;
}

.rarity-common.rarity-border {
  border-color: var(--color-rarity-common);
}

.rarity-rare.rarity-border {
  border-color: var(--color-rarity-rare);
  box-shadow: 0 0 10px rgba(100, 181, 246, 0.3);
}

.rarity-mystic.rarity-border {
  border-color: var(--color-rarity-mystic);
  box-shadow: 0 0 15px rgba(206, 147, 216, 0.4);
}

.rarity-legendary.rarity-border {
  border-color: var(--color-rarity-legendary);
  box-shadow: 0 0 20px rgba(255, 213, 79, 0.5);
}

/* Rarity backgrounds */
.rarity-bg {
  background: var(--rarity-bg);
}

/* Rarity text */
.rarity-text {
  color: var(--rarity-color);
}

.rarity-legendary.rarity-text {
  text-shadow: 0 0 5px rgba(255, 213, 79, 0.5);
}

/* Rarity buttons */
.rarity-button {
  background-color: var(--rarity-color);
  color: #000;
  border: none;
  border-radius: var(--radius-button, 6px);
  padding: var(--space-xs, 0.5rem) var(--space-s, 0.75rem);
  font-family: var(--font-primary);
  font-weight: bold;
  cursor: pointer;
  transition: all var(--transition-standard, 250ms ease);
}

.rarity-button:hover {
  transform: translateY(-3px);
}

.rarity-common.rarity-button:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.rarity-rare.rarity-button:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 15px rgba(100, 181, 246, 0.4);
}

.rarity-mystic.rarity-button:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 20px rgba(206, 147, 216, 0.5);
}

.rarity-legendary.rarity-button:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 0 25px rgba(255, 213, 79, 0.6);
}

.rarity-legendary.rarity-button {
  position: relative;
  overflow: hidden;
}

.rarity-legendary.rarity-button::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to bottom right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 45%,
    rgba(255, 255, 255, 0.7) 50%,
    rgba(255, 255, 255, 0) 55%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: rarity-shine-effect 3s infinite;
  pointer-events: none;
  z-index: 1;
}

/* Rarity effects */
.rarity-shine {
  position: relative;
  overflow: hidden;
}

.rarity-shine::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to bottom right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 45%,
    rgba(255, 255, 255, 0.7) 50%,
    rgba(255, 255, 255, 0) 55%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: rarity-shine-effect 6s infinite;
  pointer-events: none;
  z-index: 1;
}

/* Rarity progress bars */
.rarity-progress {
  height: 8px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: var(--radius-full, 9999px);
  overflow: hidden;
  position: relative;
}

.rarity-progress-fill {
  height: 100%;
  border-radius: var(--radius-full, 9999px);
  transition: width 1s ease;
}

.rarity-common .rarity-progress-fill {
  background-color: var(--color-rarity-common);
}

.rarity-rare .rarity-progress-fill {
  background-color: var(--color-rarity-rare);
}

.rarity-mystic .rarity-progress-fill {
  background-color: var(--color-rarity-mystic);
}

.rarity-legendary .rarity-progress-fill {
  background-color: var(--color-rarity-legendary);
  background-image: linear-gradient(45deg,
    rgba(255,255,255,0.2) 25%,
    transparent 25%,
    transparent 50%,
    rgba(255,255,255,0.2) 50%,
    rgba(255,255,255,0.2) 75%,
    transparent 75%,
    transparent
  );
  background-size: 20px 20px;
  animation: rarity-bar-animation 1s linear infinite;
}

/* Animations */
@keyframes rarity-pulse {
  0% { transform: scale(1); opacity: 0.8; }
  100% { transform: scale(1.5); opacity: 1; }
}

@keyframes rarity-shine-effect {
  0% {
    transform: rotate(30deg) translateX(-100%);
    opacity: 0;
  }
  20% {
    opacity: 1;
  }
  40% {
    transform: rotate(30deg) translateX(100%);
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}

@keyframes rarity-bar-animation {
  0% { background-position: 0 0; }
  100% { background-position: 20px 0; }
}

/* Reduced motion adaptations */
@media (prefers-reduced-motion: reduce) {
  .rarity-legendary .rarity-badge-icon,
  .rarity-legendary .rarity-progress-fill,
  .rarity-legendary.rarity-button::after,
  .rarity-shine::after {
    animation: none;
  }
}

================
File: src/css/utilities/region.css
================
/* 
REGION UTILITY
Consistent block padding for page sections
*/
.region {
  padding-block: var(--region-space, var(--space-xl-2xl));
}

================
File: src/css/utilities/visually-hidden.css
================
/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

================
File: src/design-tokens/colors.json
================
{
  "title": "Colors",
  "description": "Core colors and rarity-specific colors for the Voyager Design System",
  "items": [
    {
      "name": "Transparent",
      "value": "transparent"
    },
    {
      "name": "Dark",
      "value": "#030303"
    },
    {
      "name": "Light",
      "value": "#ffffff"
    },
    {
      "name": "Primary",
      "value": "#02394A"
    },
    {
      "name": "Rarity Common",
      "value": "#b0bec5"
    },
    {
      "name": "Rarity Rare",
      "value": "#64b5f6"
    },
    {
      "name": "Rarity Mystic",
      "value": "#ce93d8"
    },
    {
      "name": "Rarity Legendary",
      "value": "#ffd54f"
    },
    {
      "name": "Common Glow",
      "value": "rgba(176, 190, 197, 0.5)"
    },
    {
      "name": "Rare Glow",
      "value": "rgba(100, 181, 246, 0.6)"
    },
    {
      "name": "Mystic Glow",
      "value": "rgba(206, 147, 216, 0.7)"
    },
    {
      "name": "Legendary Glow",
      "value": "rgba(255, 213, 79, 0.8)"
    }
  ]
}

================
File: src/design-tokens/effects.json
================
{
  "title": "Effects",
  "description": "Animation, transitions, and effects for the Voyager Design System",
  "items": [
    {
      "name": "Transition Standard",
      "value": "250ms ease"
    },
    {
      "name": "Transition Movement",
      "value": "200ms linear"
    },
    {
      "name": "Transition Fade",
      "value": "300ms ease"
    },
    {
      "name": "Transition Bounce",
      "value": "500ms cubic-bezier(0.5, 0.05, 0.2, 1.5)"
    },
    {
      "name": "Card Hover Lift",
      "value": "10px"
    },
    {
      "name": "Card Parallax Depth",
      "value": "10px"
    },
    {
      "name": "Parallax Depth 1",
      "value": "0.1"
    },
    {
      "name": "Parallax Depth 2",
      "value": "0.2"
    },
    {
      "name": "Parallax Depth 3",
      "value": "0.3"
    },
    {
      "name": "Parallax Depth 4",
      "value": "0.4"
    },
    {
      "name": "Parallax Depth 5",
      "value": "0.5"
    },
    {
      "name": "Border Radius Card",
      "value": "10px"
    },
    {
      "name": "Border Radius Button",
      "value": "6px"
    },
    {
      "name": "Border Radius Badge",
      "value": "9999px"
    },
    {
      "name": "Z Index Background",
      "value": "-10"
    },
    {
      "name": "Z Index Base",
      "value": "1"
    },
    {
      "name": "Z Index Cards",
      "value": "10"
    },
    {
      "name": "Z Index Header",
      "value": "100"
    },
    {
      "name": "Z Index Modal",
      "value": "1000"
    },
    {
      "name": "Z Index Toast",
      "value": "2000"
    },
    {
      "name": "Card Glow Intensity Common",
      "value": "0.2"
    },
    {
      "name": "Card Glow Intensity Rare",
      "value": "0.4"
    },
    {
      "name": "Card Glow Intensity Mystic",
      "value": "0.6"
    },
    {
      "name": "Card Glow Intensity Legendary",
      "value": "0.8"
    },
    {
      "name": "Card Backdrop Filter",
      "value": "blur(8px)"
    }
  ]
}

================
File: src/design-tokens/fonts.json
================
{
  "title": "Fonts",
  "description": "Each array of fonts creates a priority-based order. The first font in the array should be the ideal font, followed by sensible, web-safe fallbacks",
  "items": [
    {
      "name": "Base",
      "description": "System fonts for body copy and globally set text.",
      "value": ["Inter", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "sans-serif"]
    }
  ]
}

================
File: src/design-tokens/spacing.json
================
{
  "title": "Spacing",
  "description": "Consistent spacing sizes, based on a ratio, with min and max sizes. This allows you to set spacing based on the context size. For example, min for mobile and max for desktop browsers.",
  "meta": {
    "scaleGenerator": "https://utopia.fyi/space/calculator/?c=330,18,1.2,1200,24,1.25,6,2,&s=0.75|0.5|0.25,1.5|2|3|4|6|8,s-l|s-xl&g=s,l,xl,12"
  },
  "items": [
    {
      "name": "Zero",
      "min": 0,
      "max": 1
    },
    {
      "name": "3XS",
      "min": 5,
      "max": 6
    },
    {
      "name": "2XS",
      "min": 9,
      "max": 12
    },
    {
      "name": "XS",
      "min": 14,
      "max": 18
    },
    {
      "name": "S",
      "min": 18,
      "max": 24
    },
    {
      "name": "M",
      "min": 27,
      "max": 36
    },
    {
      "name": "L",
      "min": 36,
      "max": 48
    },
    {
      "name": "XL",
      "min": 54,
      "max": 72
    },
    {
      "name": "2XL",
      "min": 72,
      "max": 96
    },
    {
      "name": "3XL",
      "min": 108,
      "max": 144
    },
    {
      "name": "4XL",
      "min": 144,
      "max": 192
    },
    {
      "name": "3XS - 2XS",
      "min": 5,
      "max": 12
    },
    {
      "name": "2XS - XS",
      "min": 9,
      "max": 18
    },
    {
      "name": "XS - S",
      "min": 14,
      "max": 24
    },
    {
      "name": "S - M",
      "min": 18,
      "max": 36
    },
    {
      "name": "M - L",
      "min": 27,
      "max": 48
    },
    {
      "name": "L - XL",
      "min": 36,
      "max": 72
    },
    {
      "name": "XL - 2XL",
      "min": 54,
      "max": 96
    },
    {
      "name": "2XL - 3XL",
      "min": 72,
      "max": 144
    },
    {
      "name": "3XL - 4XL",
      "min": 108,
      "max": 192
    },
    {
      "name": "S - L",
      "min": 18,
      "max": 48
    },
    {
      "name": "S - XL",
      "min": 18,
      "max": 72
    }
  ]
}

================
File: src/design-tokens/text-leading.json
================
{
  "title": "Leading",
  "description": "Ratio-based leading/line-height values",
  "items": [
    {
      "name": "Flat",
      "value": 1
    },
    {
      "name": "Fine",
      "value": 1.15
    },
    {
      "name": "Standard",
      "value": 1.5
    },
    {
      "name": "Loose",
      "value": 1.7
    }
  ]
}

================
File: src/design-tokens/text-sizes.json
================
{
  "title": "Text Sizes",
  "description": "A minimum and maximum text size size allows you to pick the right size from a ratio, depending on the context size. The min and max sizes are in pixels and should be converted to appropiate sizes, per context. For example, for web, the should be converted to REM units (pixelSize / baseSize)",
  "meta": {
    "scaleGenerator": "https://utopia.fyi/type/calculator/?c=330,18,1.175,1200,24,1.25,7,1,&s=0.75%7C0.5%7C0.25,1.5%7C2%7C3%7C4%7C6,s-l&g=s,l,xl,12"
  },
  "items": [
    {
      "name": "Step 000",
      "min": 12,
      "max": 14
    },
    {
      "name": "Step 00",
      "min": 15,
      "max": 16
    },
    {
      "name": "Step 0",
      "min": 18,
      "max": 20
    },
    {
      "name": "Step 1",
      "min": 21.6,
      "max": 25
    },
    {
      "name": "Step 2",
      "min": 25.92,
      "max": 31.25
    },
    {
      "name": "Step 3",
      "min": 31.1,
      "max": 39.06
    },
    {
      "name": "Step 4",
      "min": 39.06,
      "max": 48.83
    },
    {
      "name": "Step 5",
      "min": 44.79,
      "max": 61.04
    }
  ]
}

================
File: src/design-tokens/text-weights.json
================
{
  "title": "Text Weights",
  "description": "Helper classes and custom properties for common font weights",
  "meta": {},
  "items": [
    {
      "name": "Regular",
      "value": 400
    },
    {
      "name": "Medium",
      "value": 500
    },
    {
      "name": "Bold",
      "value": 700
    }
  ]
}

================
File: src/design-tokens/themes/base.json
================
{
  "title": "Base Theme Properties",
  "description": "Properties that all themes share regardless of visual presentation",
  "items": [
    {
      "name": "Font Primary",
      "value": "Exo 2, sans-serif"
    },
    {
      "name": "Font Secondary",
      "value": "Kode Mono, monospace"
    },
    {
      "name": "Border Width Thin",
      "value": "1px"
    },
    {
      "name": "Border Width Default",
      "value": "2px"
    },
    {
      "name": "Border Width Thick",
      "value": "4px"
    },
    {
      "name": "Nav Height",
      "value": "4rem"
    },
    {
      "name": "Nav Padding",
      "value": "1rem"
    },
    {
      "name": "Header Height",
      "value": "6rem"
    },
    {
      "name": "Footer Padding",
      "value": "2rem"
    },
    {
      "name": "Modal Padding",
      "value": "1.5rem"
    },
    {
      "name": "Card Padding",
      "value": "1rem"
    },
    {
      "name": "Input Padding",
      "value": "0.5rem 0.75rem"
    },
    {
      "name": "Button Padding Small",
      "value": "0.5rem 1rem"
    },
    {
      "name": "Button Padding Default",
      "value": "0.75rem 1.5rem"
    },
    {
      "name": "Button Padding Large",
      "value": "1rem 2rem"
    }
  ]
}

================
File: src/design-tokens/themes/iceland.json
================
{
  "title": "Iceland Theme",
  "description": "Cold, icy, northern theme with blue hues",
  "extends": "base",
  "items": [
    {
      "name": "Background",
      "value": "linear-gradient(180deg, #0b1733 0%, #203a6d 100%)"
    },
    {
      "name": "Primary",
      "value": "#7aa4e3"
    },
    {
      "name": "Secondary",
      "value": "#3d5e91"
    },
    {
      "name": "Accent",
      "value": "#a6c9ff"
    },
    {
      "name": "Surface",
      "value": "rgba(16, 37, 72, 0.8)"
    },
    {
      "name": "Text Primary",
      "value": "#ffffff"
    },
    {
      "name": "Text Secondary",
      "value": "#a3c1ff"
    },
    {
      "name": "Card Background Common",
      "value": "linear-gradient(135deg, #62728a 0%, #2e3b4f 100%)"
    },
    {
      "name": "Card Background Rare",
      "value": "linear-gradient(135deg, #315a82 0%, #1a304d 100%)"
    },
    {
      "name": "Card Background Mystic",
      "value": "linear-gradient(135deg, #6b45a4 0%, #2e1d45 100%)"
    },
    {
      "name": "Card Background Legendary",
      "value": "linear-gradient(135deg, #b4883b 0%, #5d4010 100%)"
    },
    {
      "name": "Button Primary",
      "value": "#3d5e91"
    },
    {
      "name": "Button Border",
      "value": "#7aa4e3"
    },
    {
      "name": "Ambient Animation",
      "value": "snowfall"
    },
    {
      "name": "Particle Density",
      "value": "60"
    },
    {
      "name": "Accent Pattern",
      "value": "url('/img/patterns/iceland-pattern.svg')"
    },
    {
      "name": "Accent Noise",
      "value": "url('/img/textures/ice-noise.png')"
    },
    {
      "name": "Modal Backdrop",
      "value": "rgba(11, 23, 51, 0.8)"
    },
    {
      "name": "Modal Background",
      "value": "linear-gradient(135deg, #1c3258 0%, #0b1733 100%)"
    },
    {
      "name": "Modal Border",
      "value": "rgba(122, 164, 227, 0.3)"
    },
    {
      "name": "Scrollbar Thumb",
      "value": "#3d5e91"
    },
    {
      "name": "Scrollbar Track",
      "value": "#0b1733"
    }
  ]
}

================
File: src/design-tokens/viewports.json
================
{
  "title": "Viewports",
  "description": "The min and maximum viewports used to generate fluid type and space scales.",
  "min": 330,
  "mid": 760,
  "max": 1230
}

================
File: src/env.d.ts
================
/// <reference types="astro/client" />

================
File: src/js/theme-utils.js
================
/**
 * Theme utilities for Voyager Design System
 * Handles theme switching with ViewTransition API support and fallbacks
 */

// Check for View Transitions API support
const supportsViewTransitions = typeof document !== 'undefined'
  ? 'startViewTransition' in document
  : false;

/**
 * Initialize theme system
 * Sets up the theme from localStorage or defaults to 'iceland'
 */
export function initThemeSystem() {
  if (typeof document === 'undefined') return; // SSR check

  // Add support class to document if View Transitions API is available
  if (supportsViewTransitions) {
    document.documentElement.classList.add('supports-view-transitions');
  }

  // Set initial theme from localStorage or default
  const savedTheme = localStorage.getItem('voyager-theme') || 'iceland';
  setTheme(savedTheme, false);

  // Listen for theme change events from any component
  window.addEventListener('themeChanged', (e) => {
    if (e.detail && e.detail.theme) {
      setTheme(e.detail.theme, true);
    }
  });
}

/**
 * Set the current theme
 * @param {string} themeName - The theme to switch to
 * @param {boolean} animate - Whether to animate the transition
 */
export function setTheme(themeName, animate = true) {
  if (typeof document === 'undefined') return; // SSR check

  const html = document.documentElement;
  const themeMetaColor = document.querySelector('meta[name="theme-color"]');

  // Define meta colors for each theme
  const themeColors = {
    iceland: '#0b1733',
    thailand: '#0a3e2b',
    berlin: '#1a0e0c',
    spain: '#5f2c82'
  };

  const applyThemeChange = () => {
    // Set data-theme attribute
    html.dataset.theme = themeName;

    // Save to localStorage
    localStorage.setItem('voyager-theme', themeName);

    // Update meta theme-color if it exists
    if (themeMetaColor && themeColors[themeName]) {
      themeMetaColor.setAttribute('content', themeColors[themeName]);
    }

    // Update active classes on theme switcher buttons
    document.querySelectorAll('.theme-switcher__option').forEach(button => {
      button.classList.toggle(
        'theme-switcher__option--active',
        button.dataset.theme === themeName
      );
    });

    // Dispatch an event for components to react to
    // (beyond the initial themeChanged event)
    window.dispatchEvent(new CustomEvent('themeApplied', {
      detail: { theme: themeName }
    }));
  };

  // Don't animate if specifically told not to
  // or if it's the initial page load
  if (!animate || !supportsViewTransitions) {
    applyThemeChange();
    return;
  }

  // Use View Transitions API if available
  if (supportsViewTransitions) {
    document.startViewTransition(() => {
      applyThemeChange();
    });
  } else {
    applyThemeChange();
  }
}

/**
 * Get current theme name
 * @returns {string} Current theme name
 */
export function getCurrentTheme() {
  if (typeof document === 'undefined') return 'iceland'; // Default for SSR

  return document.documentElement.dataset.theme || 'iceland';
}

/**
 * Check if the current theme is of a specific name
 * @param {string} themeName - Theme name to check against
 * @returns {boolean} True if current theme matches
 */
export function isTheme(themeName) {
  return getCurrentTheme() === themeName;
}

/**
 * Load theme-specific assets preemptively for better performance
 * @param {string} themeName - Theme to preload assets for
 */
export function preloadThemeAssets(themeName) {
  // Theme-specific asset paths
  const themeAssets = {
    iceland: [
      '/img/patterns/iceland-pattern.svg',
      '/img/textures/ice-noise.png',
      '/img/backgrounds/iceland-bg-1.jpg',
      '/img/backgrounds/iceland-bg-2.jpg',
      '/img/backgrounds/iceland-bg-3.jpg'
    ],
    thailand: [
      '/img/patterns/thailand-pattern.svg',
      '/img/textures/leaf-noise.png',
      '/img/backgrounds/thailand-bg-1.jpg',
      '/img/backgrounds/thailand-bg-2.jpg',
      '/img/backgrounds/thailand-bg-3.jpg'
    ],
    berlin: [
      '/img/patterns/berlin-pattern.svg',
      '/img/textures/fire-noise.png',
      '/img/backgrounds/berlin-bg-1.jpg',
      '/img/backgrounds/berlin-bg-2.jpg',
      '/img/backgrounds/berlin-bg-3.jpg'
    ],
    spain: [
      '/img/patterns/spain-pattern.svg',
      '/img/textures/wave-noise.png',
      '/img/backgrounds/spain-bg-1.jpg',
      '/img/backgrounds/spain-bg-2.jpg',
      '/img/backgrounds/spain-bg-3.jpg'
    ]
  };

  if (!themeAssets[themeName]) return;

  // Preload images
  themeAssets[themeName].forEach(path => {
    const link = document.createElement('link');
    link.rel = 'preload';
    link.as = path.endsWith('.svg') ? 'image' : 'image';
    link.href = path;
    link.type = path.endsWith('.svg') ? 'image/svg+xml' :
                 path.endsWith('.png') ? 'image/png' : 'image/jpeg';
    document.head.appendChild(link);
  });
}

/**
 * Setup theme switcher buttons
 * @param {string} selectorClass - CSS class to identify theme switcher buttons
 */
export function setupThemeSwitcherButtons(selectorClass = '.theme-switcher__option') {
  if (typeof document === 'undefined') return; // SSR check

  const themeButtons = document.querySelectorAll(selectorClass);

  themeButtons.forEach(button => {
    const themeName = button.dataset.theme;
    if (!themeName) return;

    button.addEventListener('click', () => {
      // Don't do anything if already on this theme
      if (getCurrentTheme() === themeName) return;

      // Preload assets for smoother transition
      preloadThemeAssets(themeName);

      // Dispatch theme change event
      window.dispatchEvent(new CustomEvent('themeChanged', {
        detail: { theme: themeName }
      }));
    });

    // Preload assets on hover for even smoother transitions
    button.addEventListener('mouseenter', () => {
      preloadThemeAssets(themeName);
    });
  });
}

// Initialize on page load in the browser
if (typeof window !== 'undefined') {
  window.addEventListener('DOMContentLoaded', () => {
    initThemeSystem();
    setupThemeSwitcherButtons();
  });
}

================
File: src/layouts/BaseLayout.astro
================
---
/**
 * BaseLayout.astro
 * The main layout component that provides theme support and common structure.
 * This layout sets up the theme environment and includes essential components.
 */

 import ThemeSwitcher from '../components/ThemeSwitcher.astro';
import AmbientEffects from '../components/AmbientEffects.astro';
import '../css/global.css';

interface Props {
  title: string;
  description?: string;
  initialTheme?: 'iceland' | 'thailand' | 'berlin' | 'spain';
  showThemeSwitcher?: boolean;
  showAmbientEffects?: boolean;
}

const {
  title,
  description = 'A game-like shopping experience',
  initialTheme = 'iceland',
  showThemeSwitcher = true,
  showAmbientEffects = true
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" data-theme={initialTheme}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    <!-- Preload critical fonts -->
    <link
      rel="preload"
      href="/fonts/Exo2-Variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/KodeMono-VariableFont.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Theme color meta tag (will be updated via JS) -->
    <meta name="theme-color" content="#0b1733" />
  </head>
  <body>
    <!-- Theme-specific ambient effects -->
    {showAmbientEffects && <AmbientEffects />}

    <!-- Main header with navigation -->
    <header class="shop-header">
      <div class="wrapper">
        <div class="repel">
          <a href="/" class="shop-logo">VOYAGER</a>

          <nav class="shop-nav">
            <a href="/shop" class="shop-nav__link">Shop</a>
            <a href="/collections" class="shop-nav__link">Collections</a>
            <a href="/lookbook" class="shop-nav__link">Lookbook</a>
            <a href="/about" class="shop-nav__link">About</a>
          </nav>

          <div class="shop-actions">
            <button class="shop-actions__button" aria-label="Search">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
              </svg>
            </button>

            <button class="shop-actions__button" aria-label="Cart">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <path d="M16 10a4 4 0 0 1-8 0"></path>
              </svg>
              <span class="shop-actions__badge">2</span>
            </button>

            <!-- Theme switcher (compact in header) -->
            {showThemeSwitcher &&
              <div class="shop-actions__theme-switcher">
                <ThemeSwitcher compact={true} currentTheme={initialTheme} />
              </div>
            }
          </div>
        </div>
      </div>
    </header>

    <!-- Main content -->
    <main id="main-content">
      <slot />
    </main>

    <!-- Footer -->
    <footer class="shop-footer">
      <div class="wrapper">
        <div class="shop-footer__content">
          <div class="footer-section">
            <h3>Navigation</h3>
            <ul>
              <li><a href="/shop">Shop</a></li>
              <li><a href="/collections">Collections</a></li>
              <li><a href="/lookbook">Lookbook</a></li>
              <li><a href="/about">About</a></li>
            </ul>
          </div>

          <div class="footer-section">
            <h3>Support</h3>
            <ul>
              <li><a href="/faq">FAQ</a></li>
              <li><a href="/shipping">Shipping & Returns</a></li>
              <li><a href="/sizing">Sizing Guide</a></li>
              <li><a href="/contact">Contact Us</a></li>
            </ul>
          </div>

          <div class="footer-section">
            <h3>Legal</h3>
            <ul>
              <li><a href="/terms">Terms & Conditions</a></li>
              <li><a href="/privacy">Privacy Policy</a></li>
              <li><a href="/cookies">Cookie Policy</a></li>
            </ul>
          </div>

          <div class="footer-section">
            <h3>Connect</h3>
            <div class="footer-section__social">
              <a href="#" aria-label="Instagram">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                  <rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect>
                  <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path>
                  <line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>
                </svg>
              </a>
              <a href="#" aria-label="Twitter">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                  <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>
                </svg>
              </a>
              <a href="#" aria-label="YouTube">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                  <path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"></path>
                  <polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon>
                </svg>
              </a>
              <a href="#" aria-label="TikTok">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                  <path d="M9 12a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"></path>
                  <path d="M20 9V7a4 4 0 0 0-4-4h-2"></path>
                  <path d="M15 8v12a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V8a4 4 0 0 1 4-4h4"></path>
                  <path d="M19 12V8h-3"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>

        <div class="shop-footer__bottom">
          <p>&copy; {new Date().getFullYear()} Voyager. All rights reserved.</p>
        </div>
      </div>
    </footer>

    <script>
      // Update theme-color meta tag based on current theme
      document.addEventListener('DOMContentLoaded', () => {
        const updateThemeColor = () => {
          const theme = document.documentElement.dataset.theme || 'iceland';
          let themeColor;

          switch (theme) {
            case 'iceland':
              themeColor = '#0b1733';
              break;
            case 'thailand':
              themeColor = '#0a3e2b';
              break;
            case 'berlin':
              themeColor = '#1a0e0c';
              break;
            case 'spain':
              themeColor = '#5f2c82';
              break;
            default:
              themeColor = '#0b1733';
          }

          // Update meta tag
          const metaThemeColor = document.querySelector('meta[name="theme-color"]');
          if (metaThemeColor) {
            metaThemeColor.setAttribute('content', themeColor);
          }
        };

        // Initial update
        updateThemeColor();

        // Update on theme change
        window.addEventListener('themeChanged', updateThemeColor);
      });
    </script>
  </body>
</html>

<style>
  /* Header styles */
  .shop-header {
    padding: var(--space-m) 0;
    position: sticky;
    top: 0;
    z-index: var(--z-header);
    background: linear-gradient(to bottom,
                  rgba(0, 0, 0, 0.5) 0%,
                  rgba(0, 0, 0, 0.3) 50%,
                  rgba(0, 0, 0, 0) 100%);
    backdrop-filter: blur(8px);
    transition: background var(--transition-standard);
  }

  .shop-logo {
    font-family: var(--font-primary);
    font-size: var(--size-step-2);
    font-weight: bold;
    text-decoration: none;
    color: var(--theme-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    transition: color var(--transition-standard), text-shadow var(--transition-standard);
  }

  .shop-logo:hover {
    color: var(--theme-accent);
    text-shadow: 0 0 15px var(--theme-accent);
  }

  .shop-nav {
    display: none;
  }

  @media (min-width: 768px) {
    .shop-nav {
      display: flex;
      gap: var(--space-l);
    }
  }

  .shop-nav__link {
    color: var(--theme-text-primary);
    text-decoration: none;
    position: relative;
    padding: var(--space-xs) var(--space-s);
    font-family: var(--font-secondary);
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 0.05em;
    transition: color var(--transition-standard);
  }

  .shop-nav__link::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--theme-accent);
    transform: scaleX(0);
    transform-origin: right;
    transition: transform var(--transition-standard);
  }

  .shop-nav__link:hover {
    color: var(--theme-accent);
  }

  .shop-nav__link:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }

  .shop-actions {
    display: flex;
    align-items: center;
    gap: var(--space-s);
  }

  .shop-actions__button {
    background: none;
    border: none;
    color: var(--theme-text-primary);
    cursor: pointer;
    padding: var(--space-xs);
    border-radius: 50%;
    position: relative;
    transition: color var(--transition-standard), transform var(--transition-movement);
  }

  .shop-actions__button:hover {
    color: var(--theme-accent);
    transform: translateY(-2px);
  }

  .shop-actions__badge {
    position: absolute;
    top: 0;
    right: 0;
    background-color: var(--theme-primary);
    color: white;
    font-size: 0.7rem;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }

  .shop-actions__theme-switcher {
    margin-left: var(--space-s);
  }

  /* Footer styles */
  .shop-footer {
    background-color: var(--theme-surface);
    color: var(--theme-text-primary);
    padding: var(--space-2xl) 0;
    margin-top: var(--space-3xl);
    position: relative;
    backdrop-filter: var(--card-backdrop-filter);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .shop-footer__content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-xl);
  }

  .footer-section h3 {
    font-size: var(--size-step-0);
    margin-bottom: var(--space-m);
    color: var(--theme-accent);
    font-family: var(--font-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .footer-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .footer-section li {
    margin-bottom: var(--space-s);
  }

  .footer-section a {
    color: var(--theme-text-secondary);
    text-decoration: none;
    transition: color var(--transition-standard);
  }

  .footer-section a:hover {
    color: var(--theme-accent);
  }

  .footer-section__social {
    display: flex;
    gap: var(--space-s);
  }

  .footer-section__social a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.1);
    transition: background-color var(--transition-standard), transform var(--transition-movement);
  }

  .footer-section__social a:hover {
    background-color: var(--theme-primary);
    transform: translateY(-3px);
  }

  .shop-footer__bottom {
    text-align: center;
    margin-top: var(--space-xl);
    padding-top: var(--space-l);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--theme-text-secondary);
    font-size: 0.9rem;
  }

  /* Utilities */
  .wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-m);
  }

  .icon {
    width: 24px;
    height: 24px;
  }

  /* Skip to content link for accessibility */
  .skip-to-content {
    position: absolute;
    top: -100%;
    left: 0;
    background: var(--theme-primary);
    color: white;
    padding: var(--space-s) var(--space-m);
    z-index: var(--z-modal);
    text-decoration: none;
    transition: top 0.2s;
  }

  .skip-to-content:focus {
    top: 0;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .shop-logo {
      font-size: var(--size-step-1);
    }

    .shop-footer__content {
      grid-template-columns: 1fr;
      gap: var(--space-l);
    }
  }
</style>

================
File: src/layouts/Layout.astro
================
---
import "../css/global.css";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>

================
File: src/pages/index.astro
================
---
/**
 * src/pages/index.astro
 * Home page showcasing the Voyager Design System components and theme capabilities.
 */

 import BaseLayout from '../layouts/BaseLayout.astro';
import ParallaxHero from '../components/ParallaxHero.astro';
import ProductGrid from '../components/ProductGrid.astro';
import ThemeSwitcher from '../components/ThemeSwitcher.astro';
import CardPackOpener from '../components/CardPackOpener.astro';

// Example product data
const featuredProducts = [
  {
    id: 'obsidian-hoodie',
    title: 'Obsidian Stealth Hoodie',
    price: 89.99,
    image: '/img/products/obsidian-hoodie.jpg',
    rarity: 'rare',
    category: 'hoodies',
    description: 'Engineered for the urban explorer. This hoodie adapts to your environment.',
    stats: {
      comfort: 85,
      durability: 92,
      style: 88,
      uniqueness: 74
    }
  },
  {
    id: 'frost-tee',
    title: 'Frost Tech Tee',
    price: 49.99,
    image: '/img/products/frost-tee.jpg',
    rarity: 'common',
    category: 'shirts',
    description: 'Breathable performance fabric with cooling technology.',
    stats: {
      comfort: 90,
      durability: 75,
      style: 70,
      uniqueness: 65
    }
  },
  {
    id: 'mystic-cargo',
    title: 'Mystic Cargo Pants',
    price: 119.99,
    image: '/img/products/mystic-cargo.jpg',
    rarity: 'mystic',
    category: 'pants',
    description: 'Multi-pocket design with hidden compartments and water-resistant fabric.',
    stats: {
      comfort: 82,
      durability: 95,
      style: 85,
      uniqueness: 88
    }
  },
  {
    id: 'nova-jacket',
    title: 'Nova Expedition Jacket',
    price: 299.99,
    image: '/img/products/nova-jacket.jpg',
    rarity: 'legendary',
    category: 'outerwear',
    description: 'Our most advanced technical jacket for extreme conditions.',
    stats: {
      comfort: 88,
      durability: 98,
      style: 93,
      uniqueness: 96
    }
  },
  {
    id: 'shadow-beanie',
    title: 'Shadow Beanie',
    price: 34.99,
    image: '/img/products/shadow-beanie.jpg',
    rarity: 'common',
    category: 'accessories',
    description: 'Lightweight yet warm headwear for everyday use.',
    stats: {
      comfort: 87,
      durability: 80,
      style: 75,
      uniqueness: 60
    }
  },
  {
    id: 'echo-backpack',
    title: 'Echo Tactical Backpack',
    price: 149.99,
    image: '/img/products/echo-backpack.jpg',
    rarity: 'rare',
    category: 'accessories',
    description: 'Modular storage system with reinforced construction.',
    stats: {
      comfort: 78,
      durability: 94,
      style: 85,
      uniqueness: 80
    }
  }
];

// Example hero parallax layers for Iceland theme
const icelandLayers = [
  {
    image: '/img/backgrounds/iceland-bg-3.jpg',
    depth: 0.1,
    position: 'bottom center'
  },
  {
    image: '/img/backgrounds/iceland-bg-2.jpg',
    depth: 0.2,
    opacity: 0.8
  },
  {
    image: '/img/backgrounds/iceland-bg-1.jpg',
    depth: 0.3,
    position: 'top center'
  }
];

// State for showing card pack opener
const showPackOpener = false;
---

<BaseLayout title="Voyager - Game-Like Shopping Experience" initialTheme="iceland">
  <!-- Full-width Hero Section with Parallax -->
  <ParallaxHero
    title="DISCOVER THE NEXT LEVEL"
    subtitle="Explore our exclusive collections designed for the modern adventurer. Each piece is crafted with premium materials and innovative technology."
    ctaText="Start Your Journey"
    ctaLink="/shop"
    layers={icelandLayers}
    height="90vh"
  />

  <!-- Theme Destination Selector -->
  <section class="theme-section">
    <div class="wrapper">
      <h2 class="theme-section__title">Choose Your Destination</h2>
      <p class="theme-section__description">Each destination features exclusive items and unique environments</p>

      <ThemeSwitcher />

      <div class="theme-section__preview">
        <div class="theme-section__image">
          <img src="/img/destinations/iceland-preview.jpg" alt="Iceland collection" data-theme-image="iceland" />
          <img src="/img/destinations/thailand-preview.jpg" alt="Thailand collection" style="display: none" data-theme-image="thailand" />
          <img src="/img/destinations/berlin-preview.jpg" alt="Berlin collection" style="display: none" data-theme-image="berlin" />
          <img src="/img/destinations/spain-preview.jpg" alt="Spain collection" style="display: none" data-theme-image="spain" />
        </div>
        <div class="theme-section__info">
          <div data-theme-content="iceland">
            <h3>Iceland Collection</h3>
            <p>Inspired by the stark beauty of Nordic landscapes, our Iceland collection features technical apparel designed for extreme conditions.</p>
            <ul class="theme-section__features">
              <li>Cold-resistant materials</li>
              <li>Thermal regulation technology</li>
              <li>Minimalist Scandinavian design</li>
            </ul>
          </div>
          <div data-theme-content="thailand" style="display: none">
            <h3>Thailand Collection</h3>
            <p>Embrace the vibrant energy of Southeast Asia with our Thailand collection, featuring lightweight, breathable fabrics perfect for tropical climates.</p>
            <ul class="theme-section__features">
              <li>Moisture-wicking fabrics</li>
              <li>UV protection</li>
              <li>Bold colors and patterns</li>
            </ul>
          </div>
          <div data-theme-content="berlin" style="display: none">
            <h3>Berlin Collection</h3>
            <p>Underground club culture meets street fashion in our Berlin collection, with dark, edgy pieces designed for urban exploration.</p>
            <ul class="theme-section__features">
              <li>Durable urban wear</li>
              <li>Reflective details for visibility</li>
              <li>Industrial-inspired hardware</li>
            </ul>
          </div>
          <div data-theme-content="spain" style="display: none">
            <h3>Spain Collection</h3>
            <p>Vibrant colors and flowing silhouettes define our Spain collection, inspired by Mediterranean beaches and Barcelona's artistic heritage.</p>
            <ul class="theme-section__features">
              <li>Lightweight, flowing fabrics</li>
              <li>Bold color combinations</li>
              <li>Artistic patterns and prints</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Featured Products Grid with Stack Motion -->
  <section class="featured-section">
    <div class="wrapper">
      <ProductGrid
        products={featuredProducts}
        title="Featured Items"
        useStackMotion={true}
        showFilters={true}
      />
    </div>
  </section>

  <!-- Rarity System Explanation -->
  <section class="rarity-section">
    <div class="wrapper">
      <h2 class="rarity-section__title">Item Rarity System</h2>
      <p class="rarity-section__description">Our products are classified by rarity, each offering different levels of exclusivity and features</p>

      <div class="rarity-grid">
        <div class="rarity-card" data-rarity="common">
          <div class="rarity-card__header">
            <span class="rarity-card__icon"></span>
            <h3 class="rarity-card__title">Common</h3>
          </div>
          <p class="rarity-card__description">Everyday essentials with quality materials and reliable construction.</p>
          <div class="rarity-card__stats">
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Availability</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 80%"></div>
              </div>
            </div>
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Uniqueness</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 40%"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="rarity-card" data-rarity="rare">
          <div class="rarity-card__header">
            <span class="rarity-card__icon"></span>
            <h3 class="rarity-card__title">Rare</h3>
          </div>
          <p class="rarity-card__description">Limited production runs with enhanced features and premium details.</p>
          <div class="rarity-card__stats">
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Availability</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 60%"></div>
              </div>
            </div>
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Uniqueness</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 65%"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="rarity-card" data-rarity="mystic">
          <div class="rarity-card__header">
            <span class="rarity-card__icon"></span>
            <h3 class="rarity-card__title">Mystic</h3>
          </div>
          <p class="rarity-card__description">Exclusive designs with advanced technology and superior craftsmanship.</p>
          <div class="rarity-card__stats">
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Availability</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 35%"></div>
              </div>
            </div>
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Uniqueness</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 85%"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="rarity-card" data-rarity="legendary">
          <div class="rarity-card__header">
            <span class="rarity-card__icon"></span>
            <h3 class="rarity-card__title">Legendary</h3>
          </div>
          <p class="rarity-card__description">Ultra-rare collector's items with unique features and exceptional quality.</p>
          <div class="rarity-card__stats">
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Availability</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 15%"></div>
              </div>
            </div>
            <div class="rarity-card__stat">
              <span class="rarity-card__stat-name">Uniqueness</span>
              <div class="rarity-card__stat-bar">
                <div class="rarity-card__stat-fill" style="width: 95%"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Card Pack Promotion -->
  <section class="pack-section">
    <div class="wrapper">
      <div class="pack-section__content">
        <div class="pack-section__info">
          <h2 class="pack-section__title">Mystery Packs</h2>
          <p class="pack-section__description">Experience the thrill of discovery with our exclusive Mystery Packs. Each pack contains a curated selection of items with at least one Rare or higher rarity.</p>
          <button id="show-pack-button" class="pack-section__button">Open Sample Pack</button>
        </div>
        <div class="pack-section__image">
          <img src="/img/mystery-pack.jpg" alt="Mystery Pack" />
        </div>
      </div>
    </div>
  </section>

  <!-- Conditionally show pack opener -->
  {showPackOpener && (
    <CardPackOpener
      packName="Sample Mystery Pack"
      packImage="/img/mystery-pack.jpg"
      products={featuredProducts.slice(0, 3)}
      onOpenCallback="handlePackOpen"
    />
  )}
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Theme preview switcher functionality
    const updateThemePreview = (theme) => {
      // Hide all theme images
      document.querySelectorAll('[data-theme-image]').forEach(img => {
        img.style.display = 'none';
      });

      // Show the selected theme image
      const selectedImage = document.querySelector(`[data-theme-image="${theme}"]`);
      if (selectedImage) {
        selectedImage.style.display = 'block';
      }

      // Hide all theme content
      document.querySelectorAll('[data-theme-content]').forEach(content => {
        content.style.display = 'none';
      });

      // Show the selected theme content
      const selectedContent = document.querySelector(`[data-theme-content="${theme}"]`);
      if (selectedContent) {
        selectedContent.style.display = 'block';
      }
    };

    // Listen for theme changes and update preview
    window.addEventListener('themeChanged', (e) => {
      updateThemePreview(e.detail.theme);
    });

    // Set initial theme preview
    updateThemePreview(document.documentElement.dataset.theme || 'iceland');

    // Pack opener functionality
    const packButton = document.getElementById('show-pack-button');
    if (packButton) {
      packButton.addEventListener('click', () => {
        // Create and inject the card pack opener component
        const packOpener = document.createElement('div');
        packOpener.innerHTML = `
          <div id="dynamic-pack-opener" class="pack-opener">
            <!-- Loading animation -->
            <div class="pack-opener__loading">
              <div class="pack-spinner"></div>
              <p>Preparing your pack...</p>
            </div>
          </div>
        `;
        document.body.appendChild(packOpener);

        // Simulate loading and fetch the pack opener component
        setTimeout(() => {
          fetch('/api/sample-pack')
            .then(response => response.text())
            .then(html => {
              document.getElementById('dynamic-pack-opener').innerHTML = html;
            })
            .catch(error => {
              console.error('Error loading pack opener:', error);
              document.getElementById('dynamic-pack-opener').remove();
            });
        }, 1000);
      });
    }

    // Callback function for after pack opening
    window.handlePackOpen = () => {
      console.log('Pack opened successfully!');
      // Here you could track analytics, update user inventory, etc.
    };
  });
</script>

<style>
  /* Theme Section Styles */
  .theme-section {
    margin: var(--space-4xl) 0;
    padding: var(--space-2xl) 0;
    position: relative;
  }

  .theme-section__title {
    font-size: var(--size-step-3);
    text-align: center;
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
  }

  .theme-section__description {
    text-align: center;
    max-width: 800px;
    margin: 0 auto var(--space-2xl);
    color: var(--theme-text-secondary);
    font-family: var(--font-secondary);
  }

  .theme-section__preview {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
    margin-top: var(--space-2xl);
    background-color: var(--theme-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-xl);
    backdrop-filter: var(--card-backdrop-filter);
  }

  @media (min-width: 768px) {
    .theme-section__preview {
      grid-template-columns: 1fr 1fr;
    }
  }

  .theme-section__image img {
    width: 100%;
    border-radius: var(--radius-lg);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    transition: transform var(--transition-standard);
  }

  .theme-section__image img:hover {
    transform: scale(1.02);
  }

  .theme-section__info {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .theme-section__info h3 {
    font-size: var(--size-step-2);
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
  }

  .theme-section__info p {
    margin-bottom: var(--space-l);
    color: var(--theme-text-secondary);
    line-height: 1.6;
  }

  .theme-section__features {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .theme-section__features li {
    position: relative;
    padding-left: var(--space-l);
    margin-bottom: var(--space-s);
    color: var(--theme-text-primary);
  }

  .theme-section__features li::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    background-color: var(--theme-accent);
    border-radius: 50%;
  }

  /* Featured Section Styles */
  .featured-section {
    margin: var(--space-4xl) 0;
  }

  /* Rarity Section Styles */
  .rarity-section {
    margin: var(--space-4xl) 0;
    padding: var(--space-2xl) 0;
    position: relative;
  }

  .rarity-section__title {
    font-size: var(--size-step-3);
    text-align: center;
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
  }

  .rarity-section__description {
    text-align: center;
    max-width: 800px;
    margin: 0 auto var(--space-2xl);
    color: var(--theme-text-secondary);
    font-family: var(--font-secondary);
  }

  .rarity-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: var(--space-l);
  }

  .rarity-card {
    background-color: var(--theme-surface);
    border-radius: var(--radius-lg);
    padding: var(--space-l);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .rarity-card__header {
    display: flex;
    align-items: center;
    gap: var(--space-s);
    margin-bottom: var(--space-m);
  }

  .rarity-card__icon {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .rarity-card[data-rarity="common"] .rarity-card__icon {
    background-color: var(--color-rarity-common);
  }

  .rarity-card[data-rarity="rare"] .rarity-card__icon {
    background-color: var(--color-rarity-rare);
    box-shadow: 0 0 5px var(--color-rarity-rare);
  }

  .rarity-card[data-rarity="mystic"] .rarity-card__icon {
    background-color: var(--color-rarity-mystic);
    box-shadow: 0 0 8px var(--color-rarity-mystic);
  }

  .rarity-card[data-rarity="legendary"] .rarity-card__icon {
    background-color: var(--color-rarity-legendary);
    box-shadow: 0 0 12px var(--color-rarity-legendary);
    animation: pulse 2s infinite alternate;
  }

  .rarity-card__title {
    font-size: var(--size-step-1);
    margin: 0;
    color: var(--theme-text-primary);
  }

  .rarity-card__description {
    margin-bottom: var(--space-l);
    color: var(--theme-text-secondary);
    line-height: 1.5;
  }

  .rarity-card__stats {
    display: flex;
    flex-direction: column;
    gap: var(--space-s);
  }

  .rarity-card__stat {
    display: grid;
    grid-template-columns: 100px 1fr;
    align-items: center;
    gap: var(--space-s);
  }

  .rarity-card__stat-name {
    font-size: 0.85rem;
    color: var(--theme-text-secondary);
  }

  .rarity-card__stat-bar {
    height: 6px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-full);
    overflow: hidden;
  }

  .rarity-card[data-rarity="common"] .rarity-card__stat-fill {
    background-color: var(--color-rarity-common);
    height: 100%;
    border-radius: var(--radius-full);
  }

  .rarity-card[data-rarity="rare"] .rarity-card__stat-fill {
    background-color: var(--color-rarity-rare);
    height: 100%;
    border-radius: var(--radius-full);
  }

  .rarity-card[data-rarity="mystic"] .rarity-card__stat-fill {
    background-color: var(--color-rarity-mystic);
    height: 100%;
    border-radius: var(--radius-full);
  }

  .rarity-card[data-rarity="legendary"] .rarity-card__stat-fill {
    background-color: var(--color-rarity-legendary);
    height: 100%;
    border-radius: var(--radius-full);
    animation: legendaryBarPulse 3s infinite alternate;
  }

  /* Pack Section Styles */
  .pack-section {
    margin: var(--space-4xl) 0;
    padding: var(--space-2xl) 0;
    background-color: var(--theme-surface);
    backdrop-filter: var(--card-backdrop-filter);
  }

  .pack-section__content {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
    align-items: center;
  }

  @media (min-width: 768px) {
    .pack-section__content {
      grid-template-columns: 1.5fr 1fr;
    }
  }

  .pack-section__title {
    font-size: var(--size-step-3);
    margin-bottom: var(--space-m);
    color: var(--theme-text-primary);
  }

  .pack-section__description {
    margin-bottom: var(--space-l);
    color: var(--theme-text-secondary);
    line-height: 1.6;
  }

  .pack-section__button {
    padding: var(--space-s) var(--space-xl);
    background-color: var(--theme-primary);
    color: var(--theme-text-primary);
    border: none;
    border-radius: var(--radius-button);
    font-size: var(--size-step-0);
    font-weight: bold;
    cursor: pointer;
    transition: all var(--transition-standard);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .pack-section__button:hover {
    background-color: var(--theme-secondary);
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .pack-section__image img {
    width: 100%;
    border-radius: var(--radius-lg);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
    transition: transform var(--transition-bounce);
  }

  .pack-section__image img:hover {
    transform: translateY(-10px) scale(1.05);
  }

  /* Pack opener loading */
  .pack-opener__loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: var(--theme-text-primary);
  }

  .pack-spinner {
    width: 60px;
    height: 60px;
    border: 6px solid rgba(255, 255, 255, 0.1);
    border-top-color: var(--theme-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: var(--space-m);
  }

  /* Animations */
  @keyframes pulse {
    0% { transform: scale(1); opacity: 0.8; }
    100% { transform: scale(1.5); opacity: 1; }
  }

  @keyframes legendaryBarPulse {
    0% { opacity: 0.7; }
    100% { opacity: 1; }
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
import plugin from "tailwindcss/plugin";
import postcss from "postcss";
import postcssJs from "postcss-js";

import clampGenerator from "./src/css-utils/clamp-generator.js";
import tokensToTailwind from "./src/css-utils/tokens-to-tailwind.js";

// Raw design tokens
import colorTokens from "./src/design-tokens/colors.json";
import fontTokens from "./src/design-tokens/fonts.json";
import spacingTokens from "./src/design-tokens/spacing.json";
import textSizeTokens from "./src/design-tokens/text-sizes.json";
import textLeadingTokens from "./src/design-tokens/text-leading.json";
import textWeightTokens from "./src/design-tokens/text-weights.json";
import viewportTokens from "./src/design-tokens/viewports.json";

// Process design tokens
const colors = tokensToTailwind(colorTokens.items);
const fontFamily = tokensToTailwind(fontTokens.items);
const fontWeight = tokensToTailwind(textWeightTokens.items);
const fontSize = tokensToTailwind(clampGenerator(textSizeTokens.items));
const lineHeight = tokensToTailwind(textLeadingTokens.items);
const spacing = tokensToTailwind(clampGenerator(spacingTokens.items));

export default {
  content: ["./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}"],
  // Add color classes to safe list so they are always generated
  safelist: [],
  theme: {
    screens: {
      sm: `${viewportTokens.min}px`,
      md: `${viewportTokens.mid}px`,
      lg: `${viewportTokens.max}px`,
    },
    colors,
    spacing,
    fontSize,
    lineHeight,
    fontFamily,
    fontWeight,
    backgroundColor: ({ theme }) => theme("colors"),
    textColor: ({ theme }) => theme("colors"),
    margin: ({ theme }) => ({
      auto: "auto",
      ...theme("spacing"),
    }),
    padding: ({ theme }) => theme("spacing"),
  },
  variantOrder: [
    "first",
    "last",
    "odd",
    "even",
    "visited",
    "checked",
    "empty",
  ],
};

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict",
  "exclude": ["./dist"]
}
